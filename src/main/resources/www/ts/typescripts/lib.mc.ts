interface ConditionCompositeUoWAbstr
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var ConditionCompositeUoWAbstr:
{
	new (value?: any): ConditionCompositeUoWAbstr;
	(): any;
	(value: any): any;
	prototype: ConditionCompositeUoWAbstr;
}
interface MapContext
{
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	update(arg0: Kernel): void;
	extensions(): Set;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number): FeaturePoint;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: NavNode): boolean;
	isIncompleteNode(arg0: Node): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavNode): Set;
	findCrfs(arg0: NavLink): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(): Iterator;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointSize(): number;
	featurePointSize(arg0: FeaturePointType): number;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationSize(): number;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	hasCustomContext(arg0: Class): boolean;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
}
declare var MapContext:
{
	new (value?: any): MapContext;
	(): any;
	(value: any): any;
	prototype: MapContext;
}
interface UoWSecurityManager
{
	type(): string;
	checkUpdatePermissions(arg0: Kernel): boolean;
	checkAddPermissions(arg0: Kernel): boolean;
	getSecurityLog(): string;
	checkDeletePermissions(arg0: Kernel): boolean;
	clearSecurityLog(): void;
}
declare var UoWSecurityManager:
{
	new (value?: any): UoWSecurityManager;
	(): any;
	(value: any): any;
	prototype: UoWSecurityManager;
}
interface Predicate
{
	test(arg0: any): boolean;
	filter(arg0: Iterator, arg1: Collection): Collection;
	filter(arg0: Iterable, arg1: Collection): Collection;
	all(arg0: Array<any>): boolean;
	all(arg0: Collection): boolean;
	any(arg0: Collection): boolean;
	any(arg0: Array<any>): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var Predicate:
{
	new (value?: any): Predicate;
	(): any;
	(value: any): any;
	prototype: Predicate;
}
interface UnitOfWork
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
}
declare var UnitOfWork:
{
	new (value?: any): UnitOfWork;
	(): any;
	(value: any): any;
	prototype: UnitOfWork;
}
interface Kernel
{
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var Kernel:
{
	new (value?: any): Kernel;
	(): any;
	(value: any): any;
	prototype: Kernel;
}
interface MapObjectAssociation
{
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var MapObjectAssociation:
{
	new (value?: any): MapObjectAssociation;
	(): any;
	(value: any): any;
	prototype: MapObjectAssociation;
}
interface MapObjectAssociationType
{
	values(): MapObjectAssociationType;
	valueOf(arg0: string): MapObjectAssociationType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var MapObjectAssociationType:
{
	new (value?: any): MapObjectAssociationType;
	(): any;
	(value: any): any;
	prototype: MapObjectAssociationType;
}
interface FeaturePoint
{
	calcPercentFromRef(): double;
	link(): Link;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var FeaturePoint:
{
	new (value?: any): FeaturePoint;
	(): any;
	(value: any): any;
	prototype: FeaturePoint;
}
interface FeaturePointType
{
	values(): FeaturePointType;
	valueOf(arg0: string): FeaturePointType;
	getSifPlusPublishValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var FeaturePointType:
{
	new (value?: any): FeaturePointType;
	(): any;
	(value: any): any;
	prototype: FeaturePointType;
}
interface RoadName
{
	formattedName(): string;
	isAttached(): boolean;
	getSuffix(): string;
	getStreetType(): string;
	isPrecedes(): boolean;
	valueEquivalent(arg0: RoadNameKernel): boolean;
	getPrefix(): string;
	getTransliterations(): Set;
	getDirectionOnSign(): string;
	getRouteType(): number;
	makeFlat(): FlatRoadName;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	type(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getType(): string;
	id(): number;
	basename(): string;
	getBasename(): string;
	getLanguageCode(): string;
	sequenceNumber(): number;
	getShortName(): string;
	isExonym(): boolean;
	languageCode(): string;
	cleared(): boolean;
	getNamePvid(): number;
	getPoiKeyword(): string;
	isRoadName(): boolean;
	getRefSequenceNumber(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var RoadName:
{
	new (value?: any): RoadName;
	(): any;
	(value: any): any;
	prototype: RoadName;
}
interface RoadNameKernel
{
	isAttached(): boolean;
	getSuffix(): string;
	getStreetType(): string;
	isPrecedes(): boolean;
	valueEquivalent(arg0: RoadNameKernel): boolean;
	getPrefix(): string;
	getTransliterations(): Set;
	getDirectionOnSign(): string;
	getRouteType(): number;
	makeFlat(): FlatRoadName;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	type(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getType(): string;
	id(): number;
	basename(): string;
	getBasename(): string;
	getLanguageCode(): string;
	sequenceNumber(): number;
	getShortName(): string;
	isExonym(): boolean;
	languageCode(): string;
	cleared(): boolean;
	getNamePvid(): number;
	getPoiKeyword(): string;
	isRoadName(): boolean;
	getRefSequenceNumber(): number;
}
declare var RoadNameKernel:
{
	new (value?: any): RoadNameKernel;
	(): any;
	(value: any): any;
	prototype: RoadNameKernel;
}
interface RoadLink
{
	toString(): string;
	roadName(): RoadName;
	navLink(): NavLink;
	setLeftAddressRange(arg0: AddressRange): void;
	setRightAddressRange(arg0: AddressRange): void;
	setAddressRangeType(arg0: number): void;
	setNameSource(arg0: number): void;
	refRoadLink(): RoadLink;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	getNavLinkId(): number;
	isValidUnnamed(): boolean;
	getAddressRangeType(): number;
	getLeftAddressRange(): AddressRange;
	getRightAddressRange(): AddressRange;
	getRoadNameId(): number;
	getRefRoadLinkId(): number;
	getRoadLinkPvid(): number;
	getNameSource(): number;
	isExitName(): boolean;
	isExplicatable(): boolean;
	isJunctionName(): boolean;
	isPostalName(): boolean;
	isCommonName(): boolean;
	isScenicName(): boolean;
	isStaleName(): boolean;
	isVanityName(): boolean;
	isBicycleRouteName(): boolean;
	getAttrNameStatus(): number;
}
declare var RoadLink:
{
	new (value?: any): RoadLink;
	(): any;
	(value: any): any;
	prototype: RoadLink;
}
interface PointOfInterest
{
	vanityCities(): Set;
	children(): Set;
	roadLink(): RoadLink;
	parents(): Set;
	namedPlace(): NamedPlace;
	isPremium(): boolean;
	parentAssocType(arg0: PointOfInterest): string;
	childAssocType(arg0: PointOfInterest): string;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getAddress(): string;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isPrivate(): boolean;
	getAttributes(): Set;
	getStreetSide(): string;
	getPoiPvid(): number;
	getLinkPoint(): GeoPoint;
	getPercentFromRef(): number;
	getAddressFormat(): string;
	getDataSource(): number;
	getAttachedFiles(): Set;
	getAllActualAddress(): Set;
	getAllFullHouseNumber(): Set;
	getAllParsedActualAddress(): Set;
	isLongHaul(): boolean;
	isChanged(): boolean;
	getNGValChangeMessage(): string;
	getNGValMoveMessage(): string;
	isChangeStatus(): boolean;
	getDisplayPoint(): GeoPoint;
	getChainId(): number;
	getLocationScore(): number;
	getPlaceScore(): number;
	getCalculatedLevel(): number;
	getNextReviewDate(): number;
	getPhoneNumber(): string;
	isNationalImportance(): boolean;
	isInVicinity(): boolean;
	isLongHaulBatch(): boolean;
	getLongHaulManual(): string;
	getActualAddress(): FlatPointOfInterestText;
	getThirdPartyData(): Set;
	getNotes(): List;
	getParsedActualAddress(): FlatPOIParsedAddress;
	getActualAddressTransliterations(): Set;
	getContacts(): Set;
	getProtectedId(): string;
	getFullHouseNumber(): FlatPointOfInterestText;
	makeFlat(): FlatPointOfInterest;
	getFlatParents(): Set;
	getFlatChildren(): Set;
	getRoadLinkId(): number;
	getVanityCityIds(): Set;
	getNamedPlaceId(): number;
	getNamedPlaceType(): string;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PointOfInterest:
{
	new (value?: any): PointOfInterest;
	(): any;
	(value: any): any;
	prototype: PointOfInterest;
}
interface NavStrand
{
	navLinks(): List;
	condition(): Condition;
	orientedStrand(): OrientedStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getNavLinkIds(): List;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var NavStrand:
{
	new (value?: any): NavStrand;
	(): any;
	(value: any): any;
	prototype: NavStrand;
}
interface Link
{
	length(): double;
	cartoFeatures(): Set;
	setLinkPvid(arg0: number): void;
	angle(arg0: Link, arg1: Node): double;
	leftPostalArea(): PostalArea;
	rightPostalArea(): PostalArea;
	viaAreas(): Set;
	setDetailedCity(arg0: boolean): void;
	setUrban(arg0: boolean): void;
	setGeometrySource(arg0: number): void;
	edge(): GeoEdge;
	bearing(arg0: Node): double;
	rightAdminPlace(): AdminPlace;
	refNode(): Node;
	nrefNode(): Node;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	rightAlternateNamedPlaces(): Set;
	leftAlternateNamedPlaces(): Set;
	leftAdminPlace(): AdminPlace;
	assignEdge(arg0: GeoEdge): void;
	setAdminPlace(arg0: AdminPlace, arg1: number): void;
	isBoundary(): boolean;
	nextShape(arg0: Node): GeoPoint;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isBridge(): boolean;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	isUrban(): boolean;
	getLinkProductBoundaryOverrides(): Set;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	getGeometrySource(): number;
	isDetailedCity(): boolean;
	getShape(): List;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	getRightAlternateNamedPlaceIds(): Set;
	getLeftAlternateNamedPlaceIds(): Set;
	getLinkPvid(): number;
	makeFlat(): FlatLink;
	isAligned(): boolean;
	getMapEdgeId(): number;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	hasAdasHeight(): boolean;
	getLinkStats(): LinkStats;
	getExtendedAttributes(): Set;
}
declare var Link:
{
	new (value?: any): Link;
	(): any;
	(value: any): any;
	prototype: Link;
}
interface CartoFeature
{
	cartoLinks(): Set;
	isLongHaul(): boolean;
	cartoFaces(): Set;
	hasCompletePolygonBoundary(): boolean;
	namedPlace(): NamedPlace;
	hasPartialCartoLinkOrFace(): boolean;
	getCartoFace(arg0: number): CartoFace;
	getCartoLink(arg0: number): CartoLink;
	isGroupedStructure(): boolean;
	poiCartos(): Set;
	getPoiCarto(arg0: number): PoiCarto;
	isWaterFeature(): boolean;
	getAttachedFiles(): Set;
	getRegions(): Set;
	makeFlat(): FlatCartoFeature;
	getNamedPlaceId(): number;
	getDisplayClass(): string;
	getCartoPvid(): number;
	getValidUnnamedSource(): number;
	getNamedPlaceType(): string;
	isSpecialCaseProtected(): boolean;
	getTmcCodes(): Set;
	getEnteredCartoFeatureSubTypes(): Set;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getExtendedAttributes(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var CartoFeature:
{
	new (value?: any): CartoFeature;
	(): any;
	(value: any): any;
	prototype: CartoFeature;
}
interface Face
{
	area(): double;
	getOrientedLinkIds(): Set;
	enclaves(): number;
	exteriorBoundary(): List;
	enclaveBoundary(arg0: number): List;
	polygon(): GeoPolygon;
	boundaryComponents(): List;
	boundaryFragments(): List;
	closedBoundaryComponents(): List;
	isBroken(): boolean;
	isComplete(): boolean;
	hasPartialFaceLink(): boolean;
	cartoFeatures(): Set;
	boundaryAsPoints(): List;
	faceLinks(): Set;
	getLinkIds(): Set;
	mbr(): GeoRectangle;
	boundary(): List;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getFacePvid(): number;
}
declare var Face:
{
	new (value?: any): Face;
	(): any;
	(value: any): any;
	prototype: Face;
}
interface NavLink
{
	length(): double;
	access(): Set;
	refNavNode(): NavNode;
	nrefNavNode(): NavNode;
	firstNavNode(): NavNode;
	lastNavNode(): NavNode;
	productAdmin(): AdminPlace;
	cost(): number;
	display(): Set;
	hasAccess(arg0: number): boolean;
	hasDisplay(arg0: number): boolean;
	hasSpecialAttr(arg0: string): boolean;
	specialAttr(): Set;
	hasSameAttributes(arg0: NavLinkKernel): boolean;
	roadLinks(): List;
	isDivided(): boolean;
	getToNavLanes(): List;
	getFromNavLanes(): List;
	getToRefExtendedLanes(): number;
	getFromRefExtendedLanes(): number;
	getCenterDividerMarker(): DividerMarkerType;
	setAccess(arg0: number, arg1: boolean): void;
	setTollway(arg0: boolean): void;
	setDividerLegal(arg0: boolean): void;
	setInProcessData(arg0: boolean): void;
	setPaved(arg0: boolean): void;
	setPrivate(arg0: boolean): void;
	setRamp(arg0: boolean): void;
	setPoiAccess(arg0: boolean): void;
	setControlledAccess(arg0: boolean): void;
	setBoatFerry(arg0: boolean): void;
	setRailFerry(arg0: boolean): void;
	setMultiDig(arg0: boolean): void;
	replaceAllDividerGaps(arg0: List): void;
	setDividerGap(arg0: float): void;
	removeDividerGap(arg0: float): void;
	setFunctionalClass(arg0: number): void;
	setDirectionOfTravel(arg0: number): void;
	setFromRefSpeedLimit(arg0: number): void;
	setToRefSpeedLimit(arg0: number): void;
	setSpeedCategory(arg0: number): void;
	setLaneCategory(arg0: number): void;
	setFromRefNumberLanes(arg0: number): void;
	setToRefNumberLanes(arg0: number): void;
	setFuncClassSource(arg0: number): void;
	setDirOfTravelSource(arg0: number): void;
	setSpeedLimitSource(arg0: number): void;
	setSpeedLimitDate(arg0: number): void;
	setNumberLanesSource(arg0: number): void;
	setDividerSource(arg0: number): void;
	setFrontageRoad(arg0: boolean): void;
	setAdasPrecisionCategory(arg0: string): void;
	setAdasGeometrySource(arg0: number): void;
	setAdasGeometryDate(arg0: number): void;
	setStubLinkBatch(arg0: boolean): void;
	addRoadLink(arg0: RoadLink): void;
	removeRoadLink(arg0: RoadLink): void;
	setDivider(arg0: string): void;
	setLongHaulBatch(arg0: boolean): void;
	setIntersectionCategory(arg0: string): void;
	link(): Link;
	getNavLane(arg0: number, arg1: string): NavLane;
	getPriority(): number;
	isPrivate(): boolean;
	getOffset(): number;
	isPoiAccess(): boolean;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getToRefPhysicalLanes(): number;
	getToRefNumberLanes(): number;
	getFromRefPhysicalLanes(): number;
	getFromRefNumberLanes(): number;
	isStubLink(): boolean;
	getNRefNavNodeId(): number;
	getRefNavNodeId(): number;
	getLinkId(): number;
	getSupplementalGeoBits(): number;
	getFunctionalClass(): number;
	isInProcessData(): boolean;
	kernelType(): Class;
	getDivider(): string;
	isReversible(): boolean;
	getProductAdminId(): number;
	getConfidenceScore(): number;
	getDirectionOfTravel(): number;
	isRamp(): boolean;
	isPaved(): boolean;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): number;
	getLaneCategory(): number;
	getDirOfTravelSource(): number;
	getDividerSource(): number;
	getNumberLanesSource(): number;
	getSpeedLimitSource(): number;
	getFuncClassSource(): number;
	getSpeedCategorySource(): number;
	isTollway(): boolean;
	isDividerLegal(): boolean;
	isFourWheelDrive(): boolean;
	isHistoricalUSFourWheelDrive(): boolean;
	isControlledAccess(): boolean;
	isBoatFerry(): boolean;
	isRailFerry(): boolean;
	isMultiDig(): boolean;
	getDividerGaps(): List;
	isFrontageRoad(): boolean;
	getAdasPrecisionCategory(): string;
	getAdasGeometrySource(): number;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getIntersectionCategory(): string;
	isMotorway(): boolean;
	isScenicRoute(): boolean;
	getLaneAttributes(): Set;
	isExpressLanes(): boolean;
	isCarpoolRoad(): boolean;
	isParkingLotRoad(): boolean;
	isTransportVerified(): boolean;
	isPublicAccess(): boolean;
	getLowMobility(): number;
	getPrioritySource(): number;
	getGradeCategory(): number;
	getCTlastUpdated(): Date;
	getRoadClass(): number;
	getOverUnderPassIndicator(): number;
	isDeliveryRoad(): boolean;
	getPedestrianPreferred(): number;
	isLimitedAccessRoad(): boolean;
	getBUARoad(): string;
	makeFlat(): FlatNavLink;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	isAccessMotorcycles(): boolean;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getExtendedAttributes(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	edge(): GeoEdge;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
}
declare var NavLink:
{
	new (value?: any): NavLink;
	(): any;
	(value: any): any;
	prototype: NavLink;
}
interface CompositeRoadFeature
{
	navFeatures(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CompositeRoadFeature:
{
	new (value?: any): CompositeRoadFeature;
	(): any;
	(value: any): any;
	prototype: CompositeRoadFeature;
}
interface GeoRectangle
{
	expand(arg0: GeoPoint): void;
	expand(arg0: GeoRectangle): void;
	expand(arg0: List): void;
	lowerLeft(): GeoPoint;
	upperRight(): GeoPoint;
	height(): number;
	containsPoint(arg0: GeoPoint): boolean;
	isDegenerate(): boolean;
	containsRectangle(arg0: GeoRectangle): boolean;
	intersectsRectangle(arg0: GeoRectangle): boolean;
	intersectionRectangle(arg0: GeoRectangle): GeoRectangle;
	width(): number;
	area(): double;
	enclaves(): number;
	exteriorBoundary(): List;
	enclaveBoundary(arg0: number): List;
	boundaryAsPoints(): List;
	perimeter(): double;
	boundary(): List;
	contains(arg0: GeoShape): boolean;
	intersects(arg0: GeoShape): boolean;
	touches(arg0: GeoShape): boolean;
	sameShape(arg0: GeoShape): boolean;
	geodeticSystem(): string;
	intersection(arg0: GeoShape): Set;
	connected(): boolean;
	mbr(): GeoRectangle;
	distance(arg0: GeoShape): double;
	center(): GeoPoint;
}
declare var GeoRectangle:
{
	new (value?: any): GeoRectangle;
	(): any;
	(value: any): any;
	prototype: GeoRectangle;
}
interface NavNode
{
	node(): Node;
	navLinks(): List;
	removeNavLink(arg0: NavLink): boolean;
	valence(): number;
	navlinks(): List;
	addNavLink(arg0: NavLink): void;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getNodeId(): number;
}
declare var NavNode:
{
	new (value?: any): NavNode;
	(): any;
	(value: any): any;
	prototype: NavNode;
}
interface Node
{
	setPoint(arg0: GeoPoint): void;
	links(): List;
	makeFlat(): FlatNode;
	addLink(arg0: Link): void;
	isRefNode(arg0: Node): boolean;
	isReference(arg0: Link): boolean;
	removeLink(arg0: Link): void;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getPoint(): GeoPoint;
	isAligned(): boolean;
	getNodePvid(): number;
	getMapEdgeId(): number;
	getNodeElevation(): NodeElevation;
	getExtendedAttributes(): Set;
}
declare var Node:
{
	new (value?: any): Node;
	(): any;
	(value: any): any;
	prototype: Node;
}
interface PostalArea
{
	country(): Country;
	applicableAdmins(): Set;
	namedPlace(): NamedPlace;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getNamedPlacePvid(): number;
	getPostalCode(): string;
	getCountryId(): number;
	getNamedPlaceId(): number;
}
declare var PostalArea:
{
	new (value?: any): PostalArea;
	(): any;
	(value: any): any;
	prototype: PostalArea;
}
interface FaceLink
{
	face(): Face;
	link(): Link;
	getFaceId(): number;
	getLinkId(): number;
	isInverted(): boolean;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var FaceLink:
{
	new (value?: any): FaceLink;
	(): any;
	(value: any): any;
	prototype: FaceLink;
}
interface PoiAssoc
{
	getPrimaryPois(): Set;
	getSecondaryPois(): Set;
	getPois(): Set;
	getPoiAssocDetails(): Set;
	getAssocPvid(): number;
	getAssocType(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PoiAssoc:
{
	new (value?: any): PoiAssoc;
	(): any;
	(value: any): any;
	prototype: PoiAssoc;
}
interface AdminPlace
{
	parent(): AdminPlace;
	getDisplayName(): string;
	country(): Country;
	clipLevelAdminPlaces(): Set;
	centerPoint(): PointOfInterest;
	getUserCode(): string;
	listChildren(arg0: string): string;
	simpleFormat(): string;
	listParents(): string;
	children(): Set;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getParentId(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	getTimeZone(): string;
	getAdminLevel(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
}
declare var AdminPlace:
{
	new (value?: any): AdminPlace;
	(): any;
	(value: any): any;
	prototype: AdminPlace;
}
interface Country
{
	adminLevelFeatureType(arg0: number): number;
	description(arg0: number): string;
	parent(): AdminPlace;
	getDisplayName(): string;
	country(): Country;
	clipLevelAdminPlaces(): Set;
	centerPoint(): PointOfInterest;
	getUserCode(): string;
	listChildren(arg0: string): string;
	simpleFormat(): string;
	listParents(): string;
	children(): Set;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getParentId(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	getTimeZone(): string;
	getAdminLevel(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getIsoCode(): string;
	getAltSpanningLevel(): number;
	getEbuCode(): string;
	getNppoiAtMaxMinus1(): boolean;
	isFullGeometry(): boolean;
	getPhonePrefix(): string;
	getClipAdminLevel(): number;
	getLanguageCode(): string;
	getDescription(): string;
	getUnitOfMeasure(): string;
	getMaxAdminLevel(): number;
	getAdminLevelFeatureType(): number;
	getCurrencyPrecision(): number;
	getCurrencyType(): string;
	getHouseNumberFormat(): string;
	getPhoneCountryCode(): string;
	getSpeedLimitUnit(): string;
	getDrivingSide(): string;
}
declare var Country:
{
	new (value?: any): Country;
	(): any;
	(value: any): any;
	prototype: Country;
}
interface MapComponent
{
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var MapComponent:
{
	new (value?: any): MapComponent;
	(): any;
	(value: any): any;
	prototype: MapComponent;
}
interface CartoLink
{
	cartoFeature(): CartoFeature;
	productAdmin(): AdminPlace;
	link(): Link;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	getLinkId(): number;
	isLineOfControl(): boolean;
	getCartoId(): number;
	kernelType(): Class;
	getProductAdminId(): number;
	makeFlat(): FlatCartoLink;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	length(): double;
	edge(): GeoEdge;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CartoLink:
{
	new (value?: any): CartoLink;
	(): any;
	(value: any): any;
	prototype: CartoLink;
}
interface PoiCarto
{
	cartoFeature(): CartoFeature;
	poi(): PointOfInterest;
	getCartoId(): number;
	getPoiId(): number;
	getPoiIsBuilding(): boolean;
	getCartoFeatureSubTypePublishCode(): CartoFeatureSubTypePublishValue;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PoiCarto:
{
	new (value?: any): PoiCarto;
	(): any;
	(value: any): any;
	prototype: PoiCarto;
}
interface Sign
{
	originatingNavLink(): NavLink;
	destinations(): List;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getDataSource(): number;
	getMultiNavPvid(): number;
	getFlatDestinations(): List;
	getOriginatingNavLinkId(): number;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var Sign:
{
	new (value?: any): Sign;
	(): any;
	(value: any): any;
	prototype: Sign;
}
interface GeoPoint
{
	equals(arg0: any): boolean;
	clone(): GeoPoint;
	hasAltitude(): boolean;
	setAltitude(arg0: number): void;
	maxPoint(arg0: GeoPoint): GeoPoint;
	altitude(): number;
	bearingDegrees(arg0: GeoPoint): double;
	angleDegrees(arg0: GeoPoint, arg1: GeoPoint): double;
	pointDistance(arg0: GeoPoint): double;
	minPoint(arg0: GeoPoint): GeoPoint;
	angle(arg0: GeoPoint, arg1: GeoPoint): double;
	setZLevel(arg0: number): void;
	lon(): number;
	lat(): number;
	bearing(arg0: GeoPoint): double;
	compareXY(arg0: GeoPoint): number;
	baseAngle(arg0: GeoPoint): double;
	setLat(arg0: number): void;
	setLon(arg0: number): void;
	zLevel(): number;
	sameXY(arg0: GeoPoint): boolean;
	contains(arg0: GeoShape): boolean;
	intersects(arg0: GeoShape): boolean;
	touches(arg0: GeoShape): boolean;
	sameShape(arg0: GeoShape): boolean;
	geodeticSystem(): string;
	intersection(arg0: GeoShape): Set;
	connected(): boolean;
	mbr(): GeoRectangle;
	distance(arg0: GeoShape): double;
	center(): GeoPoint;
	compareTo(arg0: any): number;
}
declare var GeoPoint:
{
	new (value?: any): GeoPoint;
	(): any;
	(value: any): any;
	prototype: GeoPoint;
}
interface MapFeature
{
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var MapFeature:
{
	new (value?: any): MapFeature;
	(): any;
	(value: any): any;
	prototype: MapFeature;
}
interface MapContextExtension
{
	extender(): MapContextExtender;
	mapContext(): MapContext;
}
declare var MapContextExtension:
{
	new (value?: any): MapContextExtension;
	(): any;
	(value: any): any;
	prototype: MapContextExtension;
}
interface ValidationSelector
{
	equals(arg0: any): boolean;
	addRule(arg0: RuleInfoKernel): boolean;
	resetDeltaVals(): void;
	getValidationCommands(arg0: List): List;
	getValidationCommands(arg0: Delta): List;
	allRuleNamesForBatch(): Set;
	allRuleNamesForBatchUpdate(): Set;
	clearAllRules(): void;
	getRuleByRuleCode(arg0: string): Rule;
	getBatchValidationByRuleName(arg0: string): BatchValidation;
	allRules(): Collection;
	flatRuleIterator(): Iterator;
	getRuleNamesForRuleCodes(arg0: Set): Set;
	getRuleCodesForRuleNames(arg0: Collection): Set;
	wavRulesExist(): boolean;
	getInlineWAVKernelsVsRuleCodes(): MultiMap;
	ruleInfoIterator(): Iterator;
	setMetadataForRules(arg0: Metadata): void;
	updateRuleInfoId(arg0: number, arg1: number): void;
	getRule(arg0: number): Rule;
	getRule(arg0: string): Rule;
	removeRule(arg0: RuleInfoKernel): void;
	toString(): string;
	getClass(): Class;
}
declare var ValidationSelector:
{
	new (value?: any): ValidationSelector;
	(): any;
	(value: any): any;
	prototype: ValidationSelector;
}
interface UnvalidatedChange
{
	unvalidatedMapObjects(): List;
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUser(): string;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var UnvalidatedChange:
{
	new (value?: any): UnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: UnvalidatedChange;
}
interface ExternalPostalData
{
	addExternalPostalInfo(arg0: ExternalPostalInfo): void;
	removeExternalPostalInfo(arg0: string): void;
	removeExternalPostalInfo(arg0: ExternalPostalInfo): void;
	removeExternalPostalInfosByPostalCode(arg0: string): number;
	getExternalPostalInfo(arg0: string): ExternalPostalInfo;
	getExternalPostalInfoByPostalCode(arg0: string): ExternalPostalInfo;
	getCreationDate(): string;
	externalPostalIterator(): Iterator;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ExternalPostalData:
{
	new (value?: any): ExternalPostalData;
	(): any;
	(value: any): any;
	prototype: ExternalPostalData;
}
interface ExternalZipCityData
{
	addExternalZipCityInfo(arg0: ExternalZipCityInfo): void;
	removeExternalZipCityInfo(arg0: string): void;
	removeExternalZipCityInfo(arg0: ExternalZipCityInfo): void;
	removeExternalZipCityInfosByPostalCode(arg0: string): number;
	getExternalZipCityInfo(arg0: string): ExternalZipCityInfo;
	getExternalZipCityInfoByPostalCode(arg0: string): ExternalZipCityInfo;
	externalZipCityIterator(): Iterator;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ExternalZipCityData:
{
	new (value?: any): ExternalZipCityData;
	(): any;
	(value: any): any;
	prototype: ExternalZipCityData;
}
interface TrafficInfo
{
	addTrafficReference(arg0: TrafficReference): void;
	getTrafficReference1(arg0: AdminPlace): TrafficReference;
	getTrafficReferenceByTableIdAdmin(arg0: AdminPlace, arg1: number): TrafficReference;
	getTrafficReferencesSet(arg0: AdminPlace): Set;
	addTrafficData(arg0: TrafficData): void;
	allTrafficData(): Iterator;
	allTrafficReferences(): Iterator;
	getTrafficData(arg0: string, arg1: number, arg2: number, arg3: Metadata): TrafficData;
	getTrafficData(arg0: AdminPlace, arg1: number, arg2: number, arg3: Metadata): TrafficData;
	getTrafficData(arg0: AdminPlace, arg1: number, arg2: number, arg3: Domain): TrafficData;
	getTrafficData(arg0: string, arg1: number, arg2: number): TrafficData;
	getTrafficData(arg0: AdminPlace, arg1: number, arg2: number): TrafficData;
	getPositiveTrafficData(arg0: TrafficData): TrafficData;
	getNegativeTrafficData(arg0: TrafficData): TrafficData;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TrafficInfo:
{
	new (value?: any): TrafficInfo;
	(): any;
	(value: any): any;
	prototype: TrafficInfo;
}
interface PhoneticDataManager
{
	equals(arg0: any): boolean;
	toString(): string;
	storeNamedFeatureId(arg0: number, arg1: number, arg2: string, arg3: string, arg4: boolean): void;
	storeDomainValueId(arg0: number, arg1: number, arg2: string, arg3: boolean): void;
	storeDomainValueExonymId(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string): void;
	storeDomainValueExoTransId(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: string): void;
	storeRoadNameId(arg0: number, arg1: string, arg2: string): void;
	storeSignTextId(arg0: number, arg1: number, arg2: string, arg3: string): void;
	storeStreetTypeId(arg0: string, arg1: string, arg2: string, arg3: string): void;
	getLanguageCodeByISOCode(arg0: string): Set;
	getISOCodeByLanguageCode(arg0: string): Set;
	getPhoneticInfoForNgPreferredName(arg0: string, arg1: string, arg2: string): List;
	getMetadataLangCodes(arg0: string): Set;
	getPoiFlavours(arg0: number): Set;
	getPoiFlavour(arg0: number, arg1: string): PoiFlavour;
	addPhoneticData(arg0: PhoneticData): void;
	addPoiFlavour(arg0: PoiFlavour): void;
	getPoiFlavourMap(): Map;
	addLangConv(arg0: LangConv): void;
	getPhoneticInfoForNamedFeature(arg0: number, arg1: number, arg2: string, arg3: string, arg4: boolean): List;
	getPhoneticInfoForNamedFeature(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: boolean): List;
	getPronunciationPhoneticInfoForNamedFeature(arg0: number, arg1: number, arg2: string, arg3: string, arg4: boolean): Set;
	getPhoneticInfoForRoadName(arg0: number, arg1: string, arg2: string, arg3: string): List;
	getPhoneticInfoForRoadName(arg0: number, arg1: string, arg2: string): List;
	getPhoneticInfoForSign(arg0: number, arg1: number, arg2: string, arg3: string): List;
	getPhoneticInfoForSign(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string): List;
	getFullPhoneticInfoForSign(arg0: number, arg1: number, arg2: string): List;
	getPhoneticInfoForStreetType(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string): List;
	getPhoneticInfoForStreetType(arg0: string, arg1: string, arg2: string, arg3: string): List;
	getPhoneticInfoForDomainValue(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: boolean): List;
	getPhoneticInfoForDomainValue(arg0: number, arg1: number, arg2: string, arg3: string, arg4: boolean): List;
	getPhoneticInfoForDomainValueExonym(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string): List;
	getPhoneticInfoForDomainValueExonym(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: string): List;
	getPhoneticInfoForDomainValueExoTrans(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: string, arg6: string): List;
	getPhoneticInfoForDomainValueExoTrans(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: string): List;
	getPhoneticInfoForPreposition(arg0: Preposition, arg1: string): List;
	getPhoneticInfoForPreposition(arg0: Preposition): List;
	setUppercaseMode(arg0: boolean): void;
	setPrepositionManager(arg0: PrepositionManager): void;
	getLangConvDataForCountry(arg0: string): Set;
	getLangConvDataValues(): Iterator;
	addVoiceCode(arg0: VoiceCode): void;
	getVoiceCodeDataForLang(arg0: string): Set;
	getVoiceCodeDataIterator(): Iterator;
	addGeoQualifier(arg0: GeoQualifier): void;
	getGeoQualifier(arg0: number): List;
	getClass(): Class;
}
declare var PhoneticDataManager:
{
	new (value?: any): PhoneticDataManager;
	(): any;
	(value: any): any;
	prototype: PhoneticDataManager;
}
interface HistoryDataManager
{
	addLinkHistoryData(arg0: FlatLinkHistory): void;
	addRoadLinkHistoryData(arg0: FlatRoadLinkHistory): void;
	addCartoLinkHistoryData(arg0: FlatCartoLinkHistory): void;
	addFaceLinkHistoryData(arg0: FlatFaceLinkHistory): void;
	addChangeSequenceObjectData(arg0: FlatChangeSequenceObject): void;
	addChangeReplacementData(arg0: FlatChangeReplacement): void;
	addNavLinkHistoryData(arg0: FlatNavLinkHistory): void;
	getLinkHistoryData(): List;
	getRoadLinkHistoryData(): List;
	getCartoLinkHistoryData(): List;
	getFaceLinkHistoryData(): List;
	getNavLinkHistoryData(): List;
	getChangeSequenceObjectData(): List;
	getChangeReplacementData(): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var HistoryDataManager:
{
	new (value?: any): HistoryDataManager;
	(): any;
	(value: any): any;
	prototype: HistoryDataManager;
}
interface DegradationValidationContext
{
	cartoFeatures(): Map;
	carto(): Map;
	coverageIndicator(): Map;
	poiOnIpdNo(): Set;
	namedPlacePoiCapitalIndicator(): Map;
	namedPlacePoiPopulation(): Map;
	cartoAdmin(): Map;
	oceanArea(): Map;
	oceanAdmin(): Map;
	poiLocation(): Map;
	zLevelsAtPoint(arg0: number, arg1: number): number;
	disputedFeature(): Map;
	disputedFeatureAdmin(): Map;
	bridgeTunnelEILink(): Map;
	navLinkRCFC(): Map;
	landmarks(): Map;
	poiCarto3DLMFiles(): Map;
	featureNames(): Map;
	rdmCondition(): Map;
	moAssocGPData(): Map;
	ltcConditions(): Map;
	navLinkAttribute(): Map;
	alignedLinks(): Map;
	alignedNodes(): Map;
	rampedNavLinkSpeedCategory(): Map;
}
declare var DegradationValidationContext:
{
	new (value?: any): DegradationValidationContext;
	(): any;
	(value: any): any;
	prototype: DegradationValidationContext;
}
interface Scope
{
	equals(arg0: any): boolean;
	isEmpty(): boolean;
	accept(arg0: PacketVisitor): void;
	elements(): Set;
	setState(arg0: Scope): void;
	isUniversal(): boolean;
	getMobQueryExtents(): Set;
	recomputeBoundingScopeRectangles(arg0: MapContext): void;
	addScope(arg0: Collection): void;
	isAdmin(): boolean;
	isHybrid(): boolean;
	isSpatial(): boolean;
	spatialScopeElements(): Set;
	nonSpatialScopeElements(): Set;
	unprocessedScopeElements(): Set;
	boundingScopeRectangles(): Set;
	addBoundingScopeRectangles(arg0: Set): void;
	adminScopeElements(): Set;
	universalScopeElement(): UniversalScopeElement;
	getDataPacketType(): DataPacketType;
	addMobQueryExtent(arg0: CoverageDescriptor): void;
	mobQueryExtentsToString(): string;
	computeNewBoundingRectangles(arg0: MapContext): void;
	toString(): string;
	getClass(): Class;
}
declare var Scope:
{
	new (value?: any): Scope;
	(): any;
	(value: any): any;
	prototype: Scope;
}
interface MapObject
{
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var MapObject:
{
	new (value?: any): MapObject;
	(): any;
	(value: any): any;
	prototype: MapObject;
}
interface CartoFace
{
	face(): Face;
	cartoFeature(): CartoFeature;
	isLongHaul(): boolean;
	getHeight(): number;
	getGroundClearance(): number;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	getFaceId(): number;
	getCartoId(): number;
	kernelType(): Class;
	makeFlat(): FlatCartoFace;
	getBuildingPatternCode(): string;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CartoFace:
{
	new (value?: any): CartoFace;
	(): any;
	(value: any): any;
	prototype: CartoFace;
}
interface RoadPoint
{
	parent(): RoadPoint;
	addressedRoadLink(): RoadLink;
	children(): Set;
	hasChildren(): boolean;
	routingNavLink(): NavLink;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getLanguage(): string;
	getRoutingSide(): string;
	getRoutingPoint(): GeoPoint;
	getAddressFormat(): string;
	getRoadPointPvid(): number;
	getAddressedRoadLinkId(): number;
	getAddressedSide(): string;
	getAddressType(): number;
	getDataSource(): string;
	getHouseNumber(): string;
	getBuildingUnitName(): string;
	getUnitName(): string;
	getLevelName(): string;
	getParentRoadPointId(): number;
	getTransliterations(): Set;
	getRoutingNavLinkId(): number;
	getDisplayPoint(): GeoPoint;
	getSourceType(): number;
	makeFlat(): FlatRoadPoint;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var RoadPoint:
{
	new (value?: any): RoadPoint;
	(): any;
	(value: any): any;
	prototype: RoadPoint;
}
interface PostalAreaAdminPlace
{
	getPostalAreaId(): number;
	getAdminPlaceId(): number;
	postalArea(): PostalArea;
	adminPlace(): AdminPlace;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PostalAreaAdminPlace:
{
	new (value?: any): PostalAreaAdminPlace;
	(): any;
	(value: any): any;
	prototype: PostalAreaAdminPlace;
}
interface PostalAreaZone
{
	getPostalAreaId(): number;
	getZoneId(): number;
	getZone(): Zone;
	getPostalArea(): PostalArea;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PostalAreaZone:
{
	new (value?: any): PostalAreaZone;
	(): any;
	(value: any): any;
	prototype: PostalAreaZone;
}
interface ZoneAdminPlace
{
	getAdminPlace(): AdminPlace;
	getAdminPlaceId(): number;
	getZoneId(): number;
	getZone(): Zone;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ZoneAdminPlace:
{
	new (value?: any): ZoneAdminPlace;
	(): any;
	(value: any): any;
	prototype: ZoneAdminPlace;
}
interface LaneStrand
{
	condition(): Condition;
	navLanes(): List;
	navLane(arg0: number): NavLane;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionId(): number;
	getLaneStrandPvid(): number;
	getLaneStrandElements(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var LaneStrand:
{
	new (value?: any): LaneStrand;
	(): any;
	(value: any): any;
	prototype: LaneStrand;
}
interface PrepositionManager
{
	getPrepositions(arg0: string): Set;
	getUnreferencedPrepositions(arg0: string): Set;
	getPrepositionalPhrases(arg0: ManeuverPointFeaturePoint): Set;
	getPrepositionalPhrases(arg0: ManeuverPointFeaturePointKernel, arg1: number): Set;
	getSortedPrepositions(arg0: string): ArrayList;
	getPreposition(arg0: string): Preposition;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PrepositionManager:
{
	new (value?: any): PrepositionManager;
	(): any;
	(value: any): any;
	prototype: PrepositionManager;
}
interface NaturalGuidanceNameManager
{
	getDerivedManeuverNames(arg0: number): Set;
	getSupportedLanguageCodes(arg0: number): Set;
	getDerivedAssociationNames(arg0: number): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NaturalGuidanceNameManager:
{
	new (value?: any): NaturalGuidanceNameManager;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceNameManager;
}
interface PremiumContentInfo
{
	getPackages(): List;
	getIdSets(): List;
	getIdSet(arg0: number): PremiumContentIdSet;
	writeIdSets(arg0: JdbcConnection, arg1: string): void;
	deleteIds(arg0: JdbcConnection, arg1: string): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PremiumContentInfo:
{
	new (value?: any): PremiumContentInfo;
	(): any;
	(value: any): any;
	prototype: PremiumContentInfo;
}
interface ViaAreaPoiLink
{
	association(): ViaAreaToPoiAssociation;
	link(): Link;
	getLinkId(): number;
	getAssociationId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ViaAreaPoiLink:
{
	new (value?: any): ViaAreaPoiLink;
	(): any;
	(value: any): any;
	prototype: ViaAreaPoiLink;
}
interface ViaAreaRLLink
{
	association(): ViaAreaToRoadLinkAssociation;
	link(): Link;
	getLinkId(): number;
	getAssociationId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ViaAreaRLLink:
{
	new (value?: any): ViaAreaRLLink;
	(): any;
	(value: any): any;
	prototype: ViaAreaRLLink;
}
interface TopologySegment
{
	firstNavNode(): NavNode;
	lastNavNode(): NavNode;
	getOrientedTopologySegNavLinks(): List;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getNavLinkIds(): Set;
	getTopologySegmentPvid(): number;
	getFirstNavNodeId(): number;
	getLastNavNodeId(): number;
	getTopologySegmentNavLinks(): List;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var TopologySegment:
{
	new (value?: any): TopologySegment;
	(): any;
	(value: any): any;
	prototype: TopologySegment;
}
interface ViaArea
{
	getViaAreaType(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var ViaArea:
{
	new (value?: any): ViaArea;
	(): any;
	(value: any): any;
	prototype: ViaArea;
}
interface NavLane
{
	navLink(): NavLink;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): LaneType;
	getNavLinkId(): number;
	getHeight(): number;
	getNavLanePvid(): number;
	getCenterDividerMarker(): DividerMarkerType;
	getLaneDirection(): LaneDirectionType;
	getLaneNumber(): number;
	makeFlat(): FlatNavLane;
	getAccessBits(): number;
	getDirectionCategoryMarker(): EnumSet;
	getWidth(): number;
	getSpeed(): number;
	getLaneDividerMarker(): DividerMarkerType;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	getLaneFormingEnding(): LaneFormingEnding;
	isAccessMotorcycles(): boolean;
	getLaneCrossingRestrictionType(): LaneCrossingRestrictionType;
	getLaneDirectionOverrideType(): LaneDirectionOverrideType;
}
declare var NavLane:
{
	new (value?: any): NavLane;
	(): any;
	(value: any): any;
	prototype: NavLane;
}
interface Condition
{
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var Condition:
{
	new (value?: any): Condition;
	(): any;
	(value: any): any;
	prototype: Condition;
}
interface Annotation
{
	getAdminPlace(): AdminPlace;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getAttachedFiles(): Set;
	getAdminPlaceId(): number;
	getGeoPoint(): GeoPoint;
	getDisplayClass(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
}
declare var Annotation:
{
	new (value?: any): Annotation;
	(): any;
	(value: any): any;
	prototype: Annotation;
}
interface Zone
{
	applicableAdmins(): Set;
	adminPlace(): AdminPlace;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	getUserCode(): string;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getAdminPlaceId(): number;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	getIncludedRegions(): Set;
	getExcludedRegions(): Set;
	getZoneDetails(): Set;
	getUserCode(): string;
	kernelType(): Class;
	makeFlat(): FlatZone;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
}
declare var Zone:
{
	new (value?: any): Zone;
	(): any;
	(value: any): any;
	prototype: Zone;
}
interface Metadata
{
	get(arg0: string, arg1: number): Element;
	get(arg0: string, arg1: string): Element;
	get(arg0: string, arg1: any): Element;
	equals(arg0: any): boolean;
	isEmpty(): boolean;
	addCombo(arg0: Combo): void;
	addDomain(arg0: Domain): void;
	addDomainCombo(arg0: DomainCombo): void;
	setState(arg0: Metadata): void;
	domainAndDomainComboIterator(): Iterator;
	comboIterator(): Iterator;
	validationSelector(): ValidationSelector;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getCombo(arg0: number): Combo;
	updateComboId(arg0: number, arg1: number): void;
	updateDomainId(arg0: number, arg1: number): void;
	updateDomainComboId(arg0: number, arg1: number): void;
	streetTypeFactory(): StreetTypeFactory;
	removeDomain(arg0: Domain): void;
	removeCombo(arg0: Combo): void;
	removeDomainCombo(arg0: DomainCombo): void;
	getDomainCombo(arg0: string): DomainCombo;
	getDomainCombo(arg0: number): DomainCombo;
	getDbValue(arg0: string): any;
	getDomain(arg0: string): Domain;
	getDomain(arg0: number): Domain;
	getPublishedValue(arg0: string): any;
	setTrafficInfo(arg0: TrafficInfo): void;
	setStreetTypeFactory(arg0: StreetTypeFactory): void;
	tpegInfo(): TpegInfo;
	setTpegInfo(arg0: TpegInfo): void;
	findDomain(arg0: number): DomainX;
	getElement(arg0: number, arg1: number): Element;
	domainIterator(): Iterator;
	getDomainComboValues(arg0: string, arg1: string, arg2: any, arg3: string): List;
}
declare var Metadata:
{
	new (value?: any): Metadata;
	(): any;
	(value: any): any;
	prototype: Metadata;
}
interface VirtualConnection
{
	refNode(): Node;
	nrefNode(): Node;
	adminPlace(): AdminPlace;
	getDataSource(): number;
	getAdminPlaceId(): number;
	getRefNodeId(): number;
	getNRefNodeId(): number;
	getTimeOverride(): number;
	getConnectionType(): number;
	getStairsTraversal(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var VirtualConnection:
{
	new (value?: any): VirtualConnection;
	(): any;
	(value: any): any;
	prototype: VirtualConnection;
}
interface NamedPlace
{
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	getUserCode(): string;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var NamedPlace:
{
	new (value?: any): NamedPlace;
	(): any;
	(value: any): any;
	prototype: NamedPlace;
}
interface KernelVisitor
{
	visitMapObjectAssociationKernel(arg0: MapObjectAssociationKernel): void;
	visitConditionKernel(arg0: ConditionKernel): void;
	visitNavStrandKernel(arg0: NavStrandKernel): void;
	visitNavLinkKernel(arg0: NavLinkKernel): void;
	visitLinkKernel(arg0: LinkKernel): void;
	visitNodeKernel(arg0: NodeKernel): void;
	visitFaceKernel(arg0: FaceKernel): void;
	visitPoiCartoKernel(arg0: PoiCartoKernel): void;
	visitFaceLinkKernel(arg0: FaceLinkKernel): void;
	visitAdminPlaceKernel(arg0: AdminPlaceKernel): void;
	visitCartoFeatureKernel(arg0: CartoFeatureKernel): void;
	visitCountryKernel(arg0: CountryKernel): void;
	visitSignKernel(arg0: SignKernel): void;
	visitNavNodeKernel(arg0: NavNodeKernel): void;
	visitRoadLinkKernel(arg0: RoadLinkKernel): void;
	visitPointOfInterestKernel(arg0: PointOfInterestKernel): void;
	visitCompositeRoadFeatureKernel(arg0: CompositeRoadFeatureKernel): void;
	visitStreetTypeKernel(arg0: StreetTypeKernel): void;
	visitRuleInfoKernel(arg0: RuleInfoKernel): void;
	visitPostalAreaKernel(arg0: PostalAreaKernel): void;
	visitZoneKernel(arg0: ZoneKernel): void;
	visitValidationExceptionKernel(arg0: ValidationExceptionKernel): void;
	visitComboKernel(arg0: ComboKernel): void;
	visitDomainKernel(arg0: DomainKernel): void;
	visitDomainComboKernel(arg0: DomainComboKernel): void;
	visitRoadNameKernel(arg0: RoadNameKernel): void;
	visitCartoLinkKernel(arg0: CartoLinkKernel): void;
	visitCartoFaceKernel(arg0: CartoFaceKernel): void;
	visitRoadPointKernel(arg0: RoadPointKernel): void;
	visitPostalAreaAdminPlaceKernel(arg0: PostalAreaAdminPlaceKernel): void;
	visitPostalAreaZoneKernel(arg0: PostalAreaZoneKernel): void;
	visitZoneAdminPlaceKernel(arg0: ZoneAdminPlaceKernel): void;
	visitPoiAssocKernel(arg0: PoiAssocKernel): void;
	visitFeaturePointKernel(arg0: FeaturePointKernel): void;
	visitAnnotationKernel(arg0: AnnotationKernel): void;
	visitNavLaneKernel(arg0: NavLaneKernel): void;
	visitLaneStrandKernel(arg0: LaneStrandKernel): void;
	visitUVCKernel(arg0: UnvalidatedChangeKernel): void;
	visitViaAreaKernel(arg0: ViaAreaKernel): void;
	visitVirtualConnectionKernel(arg0: VirtualConnectionKernel): void;
	visitViaAreaPoiLinkKernel(arg0: ViaAreaPoiLinkKernel): void;
	visitViaAreaRLLinkKernel(arg0: ViaAreaRLLinkKernel): void;
	visitTopologySegmentKernel(arg0: TopologySegmentKernel): void;
}
declare var KernelVisitor:
{
	new (value?: any): KernelVisitor;
	(): any;
	(value: any): any;
	prototype: KernelVisitor;
}
interface FlatKernel
{
	isRichObjectPartialCapable(): boolean;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	cleared(): boolean;
	clearState(): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var FlatKernel:
{
	new (value?: any): FlatKernel;
	(): any;
	(value: any): any;
	prototype: FlatKernel;
}
interface MapObjectAssociationTypeVisitor
{
	visitGuidancePointToCartoAssociation(arg0: GuidancePointToCartoAssociationKernel): void;
	visitDistanceMarkerToRoadLinkAssociation(arg0: DistanceMarkerToRoadLinkAssociationKernel): void;
	visitGuidancePointToPoiAssociation(arg0: GuidancePointToPoiAssociationKernel): void;
	visitGuidancePointToMOAssociation(arg0: GuidancePointToMOAssociationKernel): void;
	visitNaturalGuidanceLinkToMOAssociation(arg0: NaturalGuidanceLinkToMOAssociationKernel): void;
	visitViaAreaToRoadLinkAssociation(arg0: ViaAreaToRoadLinkAssociationKernel): void;
	visitNaturalGuidanceLinkToPoiAssociation(arg0: NaturalGuidanceLinkToPoiAssociationKernel): void;
	visitViaAreaToPoiAssociation(arg0: ViaAreaToPoiAssociationKernel): void;
	visitNaturalGuidanceLinkToCartoAssociation(arg0: NaturalGuidanceLinkToCartoAssociationKernel): void;
}
declare var MapObjectAssociationTypeVisitor:
{
	new (value?: any): MapObjectAssociationTypeVisitor;
	(): any;
	(value: any): any;
	prototype: MapObjectAssociationTypeVisitor;
}
interface MapObjectType
{
	get(arg0: string): MapObjectType;
	values(): MapObjectType;
	valueOf(arg0: string): MapObjectType;
	getType(): string;
	getMapObjectType(arg0: Kernel): MapObjectType;
	getClassType(): Class;
	hasTypeForClass(arg0: Class): boolean;
	typeFromClass(arg0: Class): MapObjectType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var MapObjectType:
{
	new (value?: any): MapObjectType;
	(): any;
	(value: any): any;
	prototype: MapObjectType;
}
interface FeaturePointTypeVisitor
{
	visitManeuverPoint(arg0: ManeuverPointFeaturePointKernel): void;
	visitGuidancePoint(arg0: GuidancePointFeaturePointKernel): void;
	visitDistanceMarker(arg0: DistanceMarkerFeaturePointKernel): void;
	visitRailwayCrossing(arg0: RailwayCrossingFeaturePointKernel): void;
}
declare var FeaturePointTypeVisitor:
{
	new (value?: any): FeaturePointTypeVisitor;
	(): any;
	(value: any): any;
	prototype: FeaturePointTypeVisitor;
}
interface LinkSide
{
	values(): LinkSide;
	valueOf(arg0: string): LinkSide;
	valueForDbValue(arg0: string): LinkSide;
	invertedValue(arg0: LinkSide): LinkSide;
	getDbValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LinkSide:
{
	new (value?: any): LinkSide;
	(): any;
	(value: any): any;
	prototype: LinkSide;
}
interface MapFeatureVisitor
{
	visit(arg0: CompositeRoadFeature): void;
	visit(arg0: Condition): void;
	visit(arg0: NavStrand): void;
	visit(arg0: PostalArea): void;
	visit(arg0: RoadLink): void;
	visit(arg0: VirtualConnection): void;
	visit(arg0: ViaArea): void;
	visit(arg0: Annotation): void;
	visit(arg0: FeaturePoint): void;
	visit(arg0: PointOfInterest): void;
	visit(arg0: NavLink): void;
	visit(arg0: CartoFeature): void;
	visit(arg0: AdminPlace): void;
	visit(arg0: Sign): void;
	visit(arg0: NavNode): void;
	visit(arg0: Zone): void;
	visit(arg0: RoadPoint): void;
}
declare var MapFeatureVisitor:
{
	new (value?: any): MapFeatureVisitor;
	(): any;
	(value: any): any;
	prototype: MapFeatureVisitor;
}
interface FeatureName
{
	type(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getType(): string;
	id(): number;
	basename(): string;
	getBasename(): string;
	getLanguageCode(): string;
	sequenceNumber(): number;
	getShortName(): string;
	isExonym(): boolean;
	getTransliterations(): Set;
	languageCode(): string;
	cleared(): boolean;
	getNamePvid(): number;
	getPoiKeyword(): string;
	isRoadName(): boolean;
	getRefSequenceNumber(): number;
}
declare var FeatureName:
{
	new (value?: any): FeatureName;
	(): any;
	(value: any): any;
	prototype: FeatureName;
}
interface FlatRoadName
{
	equals(arg0: any): boolean;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	setValue(arg0: RoadNameKernel): void;
	isRichObjectPartialCapable(): boolean;
	setDirectionOnSign(arg0: string): void;
	setPrecedes(arg0: boolean): void;
	setRouteType(arg0: number): void;
	setSuffix(arg0: string): void;
	setAttached(arg0: boolean): void;
	makeValueCopy(arg0: RoadNameKernel): FlatRoadName;
	setSequenceNumber(arg0: number): void;
	setNamePvid(arg0: number): void;
	setState(arg0: Kernel): void;
	setBasename(arg0: string): void;
	setStreetType(arg0: string): void;
	setPrefix(arg0: string): void;
	setId(arg0: number): void;
	setLanguageCode(arg0: string): void;
	setExonym(arg0: boolean): void;
	setTransliterations(arg0: Set): void;
	setType(arg0: string): void;
	setIds(arg0: RoadNameKernel): void;
	getDataPacketType(): DataPacketType;
	type(): string;
	toString(): string;
	clone(): any;
	getType(): string;
	id(): number;
	isAttached(): boolean;
	basename(): string;
	equivalent(arg0: RoadNameKernel, arg1: RoadNameKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	getBasename(): string;
	getSuffix(): string;
	getStreetType(): string;
	getLanguageCode(): string;
	isPrecedes(): boolean;
	valueEquivalent(arg0: RoadNameKernel): boolean;
	valueEquivalent(arg0: RoadNameKernel, arg1: RoadNameKernel): boolean;
	sequenceNumber(): number;
	getShortName(): string;
	getPrefix(): string;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	isExonym(): boolean;
	getTransliterations(): Set;
	languageCode(): string;
	cleared(): boolean;
	formattedName(): string;
	getNamePvid(): number;
	getDirectionOnSign(): string;
	getRouteType(): number;
	makeFlat(): FlatKernel;
	makeFlat(): FlatRoadName;
	clearState(): void;
	getPoiKeyword(): string;
	isRoadName(): boolean;
	getRefSequenceNumber(): number;
	getClass(): Class;
}
declare var FlatRoadName:
{
	new (value?: any): FlatRoadName;
	(): any;
	(value: any): any;
	prototype: FlatRoadName;
}
interface AddressRange
{
	equals(arg0: any): boolean;
	format(): number;
	isUnresearchedAddress(): boolean;
	equivalent(arg0: AddressRange): boolean;
	setInterpolation(arg0: number): void;
	firstAddr(): string;
	lastAddr(): string;
	isValidAddressed(): boolean;
	setScheme(arg0: number): void;
	setFirstAddr(arg0: string): void;
	setLastAddr(arg0: string): void;
	interpolation(): number;
	isValidUnaddressed(): boolean;
	setAddressRangeSource(arg0: number): void;
	setFormat(arg0: number): void;
	invert(): void;
	addressRangeSource(): number;
	scheme(): number;
}
declare var AddressRange:
{
	new (value?: any): AddressRange;
	(): any;
	(value: any): any;
	prototype: AddressRange;
}
interface KernelMergeResult
{
	isTrivial(): boolean;
	setConflict(arg0: Conflict): void;
	getConflict(): Conflict;
	setResultDelta(arg0: Delta): void;
	getResultDelta(): Delta;
	setIsTrivial(arg0: boolean): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var KernelMergeResult:
{
	new (value?: any): KernelMergeResult;
	(): any;
	(value: any): any;
	prototype: KernelMergeResult;
}
interface FlatPointOfInterestText
{
	type(): string;
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	setSequenceNumber(arg0: number): void;
	sequenceNumber(): number;
	setText(arg0: string): void;
	text(): string;
	setLanguageCode(arg0: string): void;
	getTransliterations(): Set;
	setTransliterations(arg0: Set): void;
	languageCode(): string;
	setType(arg0: string): void;
	getClass(): Class;
}
declare var FlatPointOfInterestText:
{
	new (value?: any): FlatPointOfInterestText;
	(): any;
	(value: any): any;
	prototype: FlatPointOfInterestText;
}
interface FlatPOIParsedAddress
{
	setText(arg0: string): void;
	setText(): void;
	houseNumber(): string;
	setHouseNumber(arg0: string): void;
	street(): string;
	setStreet(arg0: string): void;
	setAdmin(arg0: string): void;
	setPostalCode(arg0: string): void;
	text(): string;
	isValid(): boolean;
	postalCode(): string;
	admin(): string;
	type(): string;
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	setSequenceNumber(arg0: number): void;
	sequenceNumber(): number;
	setLanguageCode(arg0: string): void;
	getTransliterations(): Set;
	setTransliterations(arg0: Set): void;
	languageCode(): string;
	setType(arg0: string): void;
	getClass(): Class;
}
declare var FlatPOIParsedAddress:
{
	new (value?: any): FlatPOIParsedAddress;
	(): any;
	(value: any): any;
	prototype: FlatPOIParsedAddress;
}
interface FlatPointOfInterest
{
	toString(): string;
	getAddress(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isPrivate(): boolean;
	getAttributes(): Set;
	getStreetSide(): string;
	equivalent(arg0: PointOfInterestKernel, arg1: PointOfInterestKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setRoadLinkId(arg0: number): void;
	setNGValChangeMessage(arg0: string): void;
	setNGValMoveMessage(arg0: string): void;
	setChangeStatus(arg0: boolean): void;
	getPoiPvid(): number;
	setPoiPvid(arg0: number): void;
	getLinkPoint(): GeoPoint;
	getPercentFromRef(): number;
	getAddressFormat(): string;
	setLinkPoint(arg0: GeoPoint): void;
	setStreetSide(arg0: string): void;
	setPercentFromRef(arg0: number): void;
	setState(arg0: Kernel): void;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getAttachedFiles(): Set;
	setAttributes(arg0: Set): void;
	getAllActualAddress(): Set;
	getAllFullHouseNumber(): Set;
	getAllParsedActualAddress(): Set;
	setNamedPlaceId(arg0: number): void;
	isLongHaul(): boolean;
	isChanged(): boolean;
	setLongHaul(arg0: boolean): void;
	setAttachedFiles(arg0: Set): void;
	getNGValChangeMessage(): string;
	getNGValMoveMessage(): string;
	isChangeStatus(): boolean;
	kernelType(): Class;
	cleared(): boolean;
	setFlatParents(arg0: Set): void;
	setFlatChildren(arg0: Set): void;
	getDisplayPoint(): GeoPoint;
	getChainId(): number;
	setLocationScore(arg0: number): void;
	getLocationScore(): number;
	getPlaceScore(): number;
	setPlaceScore(arg0: number): void;
	getCalculatedLevel(): number;
	setCalculatedLevel(arg0: number): void;
	setChainId(arg0: number): void;
	setAddressFormat(arg0: string): void;
	getNextReviewDate(): number;
	setNextReviewDate(arg0: number): void;
	getPhoneNumber(): string;
	setPhoneNumber(arg0: string): void;
	setDisplayPoint(arg0: GeoPoint): void;
	isNationalImportance(): boolean;
	isInVicinity(): boolean;
	setNationalImportance(arg0: boolean): void;
	setInVicinity(arg0: boolean): void;
	setChanged(arg0: boolean): void;
	isLongHaulBatch(): boolean;
	getLongHaulManual(): string;
	setLongHaulManual(arg0: string): void;
	getActualAddress(): FlatPointOfInterestText;
	setActualAddress(arg0: FlatPointOfInterestText): void;
	getThirdPartyData(): Set;
	getNotes(): List;
	setNotes(arg0: List): void;
	getParsedActualAddress(): FlatPOIParsedAddress;
	setParsedActualAddress(arg0: FlatPOIParsedAddress): void;
	setActualAddressTransliterations(arg0: Set): void;
	getActualAddressTransliterations(): Set;
	getContacts(): Set;
	setProtectedId(arg0: string): void;
	getProtectedId(): string;
	setFullHouseNumber(arg0: FlatPointOfInterestText): void;
	getFullHouseNumber(): FlatPointOfInterestText;
	setTexts(arg0: List): void;
	setAllActualAddress(arg0: Set): void;
	setAllParsedActualAddress(arg0: Set): void;
	setNamedPlaceType(arg0: string): void;
	setThirdPartyData(arg0: Set): void;
	setVanityCityIds(arg0: Set): void;
	setAllFullHouseNumber(arg0: Set): void;
	setContacts(arg0: Set): void;
	invert(): void;
	setPrivate(arg0: boolean): void;
	setLongHaulBatch(arg0: boolean): void;
	makeFlat(): FlatPointOfInterest;
	makeFlat(): FlatKernel;
	getFlatParents(): Set;
	getFlatChildren(): Set;
	getRoadLinkId(): number;
	getVanityCityIds(): Set;
	getNamedPlaceId(): number;
	getNamedPlaceType(): string;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	setAddress(arg0: string): void;
	id(): number;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	setNames(arg0: Set): void;
	collectionToString(arg0: Collection): string;
	intArrayToString(arg0: Array<number>): string;
	stringArrayToString(arg0: Array<string>): string;
	setId(arg0: number): void;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatPointOfInterest:
{
	new (value?: any): FlatPointOfInterest;
	(): any;
	(value: any): any;
	prototype: FlatPointOfInterest;
}
interface OrientedStrand
{
	index(arg0: GeoPoint): number;
	add(arg0: LinearElement): void;
	length(): double;
	concat(arg0: Strand): void;
	replace(arg0: GeoPoint, arg1: GeoPoint, arg2: Strand): void;
	elementAt(arg0: GeoPoint): LinearElement;
	elements(): List;
	pointAt(arg0: double): GeoPoint;
	points(): GeoPoint;
	strand(): Strand;
	isClosed(): boolean;
	edge(): GeoEdge;
	offsetAt(arg0: GeoPoint): double;
	substrand(arg0: GeoPoint, arg1: GeoPoint): Strand;
	discardBefore(arg0: GeoPoint): Strand;
	sameEndPoints(arg0: Strand): boolean;
	discardAfter(arg0: GeoPoint): Strand;
	isValidPoint(arg0: GeoPoint): boolean;
	isEndPoint(arg0: GeoPoint): boolean;
	isAddable(arg0: LinearElement): boolean;
	isConcatable(arg0: Strand): boolean;
	strandPointIndex(arg0: GeoPoint): number;
	elementIndexAt(arg0: GeoPoint): number;
	sameOrientation(arg0: LinearElement): boolean;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OrientedStrand:
{
	new (value?: any): OrientedStrand;
	(): any;
	(value: any): any;
	prototype: OrientedStrand;
}
interface GeoEdge
{
	length(): double;
	split(arg0: GeoPoint): GeoEdge;
	merge(arg0: GeoEdge): GeoEdge;
	closed(): boolean;
	segments(): List;
	pointAt(arg0: double): GeoPoint;
	bisectionPoint(arg0: GeoPoint): GeoPoint;
	bisectionPoint(arg0: GeoPoint, arg1: GeoPoint): double;
	shape(): List;
	offsetAt(arg0: GeoPoint): double;
	nearestPoint(arg0: GeoPoint): GeoPoint;
	canMerge(arg0: GeoEdge, arg1: StringBuffer): boolean;
	canSplit(arg0: GeoPoint, arg1: StringBuffer): boolean;
	contains(arg0: GeoShape): boolean;
	intersects(arg0: GeoShape): boolean;
	touches(arg0: GeoShape): boolean;
	sameShape(arg0: GeoShape): boolean;
	geodeticSystem(): string;
	intersection(arg0: GeoShape): Set;
	connected(): boolean;
	mbr(): GeoRectangle;
	distance(arg0: GeoShape): double;
	center(): GeoPoint;
	edge(): GeoEdge;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
}
declare var GeoEdge:
{
	new (value?: any): GeoEdge;
	(): any;
	(value: any): any;
	prototype: GeoEdge;
}
interface MapComponentVisitor
{
	visit(arg0: CartoFace): void;
	visit(arg0: CartoLink): void;
	visit(arg0: ViaAreaPoiLink): void;
	visit(arg0: ViaAreaRLLink): void;
	visit(arg0: Node): void;
	visit(arg0: Link): void;
	visit(arg0: Face): void;
	visit(arg0: FaceLink): void;
}
declare var MapComponentVisitor:
{
	new (value?: any): MapComponentVisitor;
	(): any;
	(value: any): any;
	prototype: MapComponentVisitor;
}
interface GeoShape
{
	contains(arg0: GeoShape): boolean;
	intersects(arg0: GeoShape): boolean;
	touches(arg0: GeoShape): boolean;
	sameShape(arg0: GeoShape): boolean;
	geodeticSystem(): string;
	intersection(arg0: GeoShape): Set;
	connected(): boolean;
	mbr(): GeoRectangle;
	distance(arg0: GeoShape): double;
	center(): GeoPoint;
}
declare var GeoShape:
{
	new (value?: any): GeoShape;
	(): any;
	(value: any): any;
	prototype: GeoShape;
}
interface MapEdgeSide
{
	toString(): string;
	values(): MapEdgeSide;
	valueOf(arg0: string): MapEdgeSide;
	encode(arg0: string): MapEdgeSide;
	code(): string;
	name(): string;
	equals(arg0: any): boolean;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var MapEdgeSide:
{
	new (value?: any): MapEdgeSide;
	(): any;
	(value: any): any;
	prototype: MapEdgeSide;
}
interface FlatLink
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isBridge(): boolean;
	id(): number;
	setLinkPvid(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: LinkKernel, arg1: LinkKernel): boolean;
	setRefNodeId(arg0: number): void;
	setNrefNodeId(arg0: number): void;
	setRightAdminPlaceId(arg0: number): void;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	setLeftAdminPlaceId(arg0: number): void;
	isUrban(): boolean;
	getLinkProductBoundaryOverrides(): Set;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	setMapEdgeId(arg0: number): void;
	setLeftPostalAreaId(arg0: number): void;
	setRightPostalAreaId(arg0: number): void;
	setDetailedCity(arg0: boolean): void;
	getGeometrySource(): number;
	setUrban(arg0: boolean): void;
	setMapEdgeSide(arg0: MapEdgeSide): void;
	setState(arg0: Kernel): void;
	setGeometrySource(arg0: number): void;
	setId(arg0: number): void;
	isDetailedCity(): boolean;
	getShape(): List;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	setShape(arg0: List): void;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	kernelType(): Class;
	cleared(): boolean;
	setLinkProductBoundaryOverrides(arg0: Set): void;
	setAdasHeight(arg0: boolean): void;
	addLinkProductBoundaryOverrides(arg0: FlatLinkProductBoundaryOverride): void;
	setAligned(arg0: boolean): void;
	appendCollection(arg0: StringBuffer, arg1: string, arg2: number, arg3: Iterator): void;
	computeMergedRefNref(arg0: FlatLink, arg1: FlatLink, arg2: FlatLink): Map;
	setLinkStats(arg0: LinkStats): void;
	getRightAlternateNamedPlaceIds(): Set;
	setRightAlternateNamedPlaceIds(arg0: Set): void;
	getLeftAlternateNamedPlaceIds(): Set;
	setLeftAlternateNamedPlaceIds(arg0: Set): void;
	invert(): void;
	getLinkPvid(): number;
	getExtendedAttributes(): Set;
	setExtendedAttributes(arg0: Set): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatLink;
	isAligned(): boolean;
	getMapEdgeId(): number;
	clearState(): void;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	hasAdasHeight(): boolean;
	getLinkStats(): LinkStats;
	mergeLink(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatLink:
{
	new (value?: any): FlatLink;
	(): any;
	(value: any): any;
	prototype: FlatLink;
}
interface LinkStats
{
	equals(arg0: any): boolean;
	toString(): string;
	getLinkId(): number;
	getMinElevation(): number;
	getAvgElevation(): number;
	getMaxElevation(): number;
	getClass(): Class;
}
declare var LinkStats:
{
	new (value?: any): LinkStats;
	(): any;
	(value: any): any;
	prototype: LinkStats;
}
interface FlatCartoFeature
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: CartoFeatureKernel, arg1: CartoFeatureKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: Kernel): void;
	getAttachedFiles(): Set;
	getRegions(): Set;
	setNamedPlaceId(arg0: number): void;
	setId(arg0: number): void;
	setAttachedFiles(arg0: Set): void;
	kernelType(): Class;
	cleared(): boolean;
	setNamedPlaceType(arg0: string): void;
	getExtendedAttributes(): Set;
	setExtendedAttributes(arg0: Set): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCartoFeature;
	getNamedPlaceId(): number;
	setDisplayClass(arg0: string): void;
	getDisplayClass(): string;
	getCartoPvid(): number;
	getValidUnnamedSource(): number;
	setCartoPvid(arg0: number): void;
	setValidUnnamedSource(arg0: number): void;
	getNamedPlaceType(): string;
	isGroupedStructure(): boolean;
	isSpecialCaseProtected(): boolean;
	getTmcCodes(): Set;
	getEnteredCartoFeatureSubTypes(): Set;
	clearState(): void;
	setGroupedStructure(arg0: boolean): void;
	getDataPacketType(): DataPacketType;
	setSpecialCaseProtected(arg0: boolean): void;
	setRegions(arg0: Set): void;
	setTmcCodes(arg0: Set): void;
	setEnteredCartoFeatureSubTypes(arg0: Set): void;
	id(): number;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	setNames(arg0: Set): void;
	collectionToString(arg0: Collection): string;
	intArrayToString(arg0: Array<number>): string;
	stringArrayToString(arg0: Array<string>): string;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatCartoFeature:
{
	new (value?: any): FlatCartoFeature;
	(): any;
	(value: any): any;
	prototype: FlatCartoFeature;
}
interface GeoPolygon
{
	equals(arg0: any): boolean;
	toString(): string;
	contains(arg0: GeoShape): boolean;
	intersects(arg0: GeoShape): boolean;
	area(): double;
	enclaves(): number;
	exteriorBoundary(): List;
	enclaveBoundary(arg0: number): List;
	levels(): number;
	getSimplePolygonsAtLevel(arg0: number): List;
	exteriorPolygon(): GeoSimplePolygon;
	enclavePolygons(): List;
	exteriorPoint(arg0: GeoPoint): boolean;
	interiorPoint(arg0: GeoPoint): boolean;
	points(): List;
	invariant(): boolean;
	boundaryAsPoints(): List;
	perimeter(): double;
	touches(arg0: GeoShape): boolean;
	sameShape(arg0: GeoShape): boolean;
	geodeticSystem(): string;
	intersection(arg0: GeoShape): Set;
	connected(): boolean;
	edges(): List;
	mbr(): GeoRectangle;
	boundary(): List;
	distance(arg0: GeoShape): double;
	center(): GeoPoint;
	getClass(): Class;
}
declare var GeoPolygon:
{
	new (value?: any): GeoPolygon;
	(): any;
	(value: any): any;
	prototype: GeoPolygon;
}
interface NavLinkKernel
{
	getPriority(): number;
	isPrivate(): boolean;
	getOffset(): number;
	isPoiAccess(): boolean;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getToRefPhysicalLanes(): number;
	getToRefNumberLanes(): number;
	getFromRefPhysicalLanes(): number;
	getFromRefNumberLanes(): number;
	isStubLink(): boolean;
	getNRefNavNodeId(): number;
	getRefNavNodeId(): number;
	getLinkId(): number;
	getSupplementalGeoBits(): number;
	getFunctionalClass(): number;
	isInProcessData(): boolean;
	kernelType(): Class;
	getDivider(): string;
	isReversible(): boolean;
	getProductAdminId(): number;
	getConfidenceScore(): number;
	getDirectionOfTravel(): number;
	isRamp(): boolean;
	isPaved(): boolean;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): number;
	getLaneCategory(): number;
	getDirOfTravelSource(): number;
	getDividerSource(): number;
	getNumberLanesSource(): number;
	getSpeedLimitSource(): number;
	getFuncClassSource(): number;
	getSpeedCategorySource(): number;
	isTollway(): boolean;
	isDividerLegal(): boolean;
	isFourWheelDrive(): boolean;
	isHistoricalUSFourWheelDrive(): boolean;
	isControlledAccess(): boolean;
	isBoatFerry(): boolean;
	isRailFerry(): boolean;
	isMultiDig(): boolean;
	getDividerGaps(): List;
	isFrontageRoad(): boolean;
	getAdasPrecisionCategory(): string;
	getAdasGeometrySource(): number;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getIntersectionCategory(): string;
	isMotorway(): boolean;
	isScenicRoute(): boolean;
	getLaneAttributes(): Set;
	isExpressLanes(): boolean;
	isCarpoolRoad(): boolean;
	isParkingLotRoad(): boolean;
	isTransportVerified(): boolean;
	isPublicAccess(): boolean;
	getLowMobility(): number;
	getPrioritySource(): number;
	getGradeCategory(): number;
	getCTlastUpdated(): Date;
	getRoadClass(): number;
	getOverUnderPassIndicator(): number;
	isDeliveryRoad(): boolean;
	getPedestrianPreferred(): number;
	isLimitedAccessRoad(): boolean;
	getBUARoad(): string;
	makeFlat(): FlatNavLink;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	isAccessMotorcycles(): boolean;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getExtendedAttributes(): Set;
}
declare var NavLinkKernel:
{
	new (value?: any): NavLinkKernel;
	(): any;
	(value: any): any;
	prototype: NavLinkKernel;
}
interface DividerMarkerType
{
	values(): DividerMarkerType;
	valueOf(arg0: string): DividerMarkerType;
	getValue(): number;
	toDividerMarkerType(arg0: number): DividerMarkerType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var DividerMarkerType:
{
	new (value?: any): DividerMarkerType;
	(): any;
	(value: any): any;
	prototype: DividerMarkerType;
}
interface FlatNavLink
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	setPriority(arg0: number): void;
	getPriority(): number;
	isPrivate(): boolean;
	getOffset(): number;
	setOffset(arg0: number): void;
	id(): number;
	setSupplementalGeoBits(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: NavLinkKernel, arg1: NavLinkKernel): boolean;
	isPoiAccess(): boolean;
	hasContiguousDividers(arg0: NavLinkKernel, arg1: NavLinkKernel): boolean;
	hasContiguousDirectionOfTravel(arg0: NavLinkKernel, arg1: NavLinkKernel): boolean;
	setRefNavNodeId(arg0: number): void;
	setNRefNavNodeId(arg0: number): void;
	setConfidenceScore(arg0: number): void;
	setCTlastUpdated(arg0: Date): void;
	setPedestrianPreferred(arg0: number): void;
	setBUARoad(arg0: string): void;
	setGradeCategory(arg0: number): void;
	setTransportVerified(arg0: boolean): void;
	setState(arg0: Kernel): void;
	setCoverageIndicator(arg0: string): void;
	setCoverageIndicatorSource(arg0: number): void;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	getToRefPhysicalLanes(): number;
	getToRefNumberLanes(): number;
	getFromRefPhysicalLanes(): number;
	getFromRefNumberLanes(): number;
	setFromRefPhysicalLanes(arg0: number): void;
	setToRefPhysicalLanes(arg0: number): void;
	isStubLink(): boolean;
	setLongHaul(arg0: boolean): void;
	setStubLink(arg0: boolean): void;
	getNRefNavNodeId(): number;
	getRefNavNodeId(): number;
	getLinkId(): number;
	getSupplementalGeoBits(): number;
	getFunctionalClass(): number;
	isInProcessData(): boolean;
	addLaneAttribute(arg0: LaneAttribute): void;
	removeLaneAttribute(arg0: LaneAttribute): void;
	setProductAdminId(arg0: number): void;
	setLaneAttributes(arg0: Set): void;
	setAccessBit(arg0: number, arg1: boolean): void;
	setDisplayBits(arg0: number, arg1: boolean): void;
	setDisplayBits(arg0: number): void;
	setSpecialAttrBit(arg0: string, arg1: boolean): void;
	setDividerGaps(arg0: List): void;
	setAccessAutomobiles(arg0: boolean): void;
	setAccessBuses(arg0: boolean): void;
	setAccessTaxis(arg0: boolean): void;
	setAccessCarpools(arg0: boolean): void;
	setAccessPedestrians(arg0: boolean): void;
	setAccessTrucks(arg0: boolean): void;
	setAccessThroughTraffic(arg0: boolean): void;
	setAccessDelivery(arg0: boolean): void;
	setAccessEmergencyVehicles(arg0: boolean): void;
	setAccessBits(arg0: number, arg1: boolean): void;
	setAccessBits(arg0: number): void;
	hasContiguousAttributes(arg0: NavLinkKernel, arg1: NavLinkKernel): boolean;
	hasContiguousAttributes(arg0: NavLinkKernel, arg1: NavLinkKernel, arg2: boolean): boolean;
	getSpecialAttributeBits(): number;
	getDisplayBits(): number;
	setSpecialAttributeBits(arg0: number): void;
	setSupplementalGeoBit(arg0: number): void;
	clearSupplementalGeoBit(arg0: number): void;
	kernelType(): Class;
	cleared(): boolean;
	setScenicRoute(arg0: boolean): void;
	setSpeedCategorySource(arg0: number): void;
	setOverUnderPassIndicator(arg0: number): void;
	setRoadClass(arg0: number): void;
	hasSameAttributes(arg0: NavLinkKernel, arg1: NavLinkKernel): boolean;
	invert(): void;
	hasBits(arg0: number, arg1: number): boolean;
	getDivider(): string;
	isReversible(): boolean;
	getProductAdminId(): number;
	getConfidenceScore(): number;
	getExtendedAttributes(): Set;
	setExtendedAttributes(arg0: Set): void;
	setTollway(arg0: boolean): void;
	getDirectionOfTravel(): number;
	isRamp(): boolean;
	isPaved(): boolean;
	setDividerLegal(arg0: boolean): void;
	setInProcessData(arg0: boolean): void;
	setPaved(arg0: boolean): void;
	setPrivate(arg0: boolean): void;
	setRamp(arg0: boolean): void;
	setPoiAccess(arg0: boolean): void;
	setControlledAccess(arg0: boolean): void;
	setBoatFerry(arg0: boolean): void;
	setRailFerry(arg0: boolean): void;
	setMultiDig(arg0: boolean): void;
	setFunctionalClass(arg0: number): void;
	setDirectionOfTravel(arg0: number): void;
	setFromRefSpeedLimit(arg0: number): void;
	setToRefSpeedLimit(arg0: number): void;
	setSpeedCategory(arg0: number): void;
	setLaneCategory(arg0: number): void;
	setFromRefNumberLanes(arg0: number): void;
	setToRefNumberLanes(arg0: number): void;
	setFuncClassSource(arg0: number): void;
	setDirOfTravelSource(arg0: number): void;
	setSpeedLimitSource(arg0: number): void;
	setSpeedLimitDate(arg0: number): void;
	setNumberLanesSource(arg0: number): void;
	setDividerSource(arg0: number): void;
	setFrontageRoad(arg0: boolean): void;
	setAdasPrecisionCategory(arg0: string): void;
	setAdasGeometrySource(arg0: number): void;
	setAdasGeometryDate(arg0: number): void;
	setDivider(arg0: string): void;
	setIntersectionCategory(arg0: string): void;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): number;
	getLaneCategory(): number;
	getDirOfTravelSource(): number;
	getDividerSource(): number;
	getNumberLanesSource(): number;
	getSpeedLimitSource(): number;
	getFuncClassSource(): number;
	getSpeedCategorySource(): number;
	isTollway(): boolean;
	isDividerLegal(): boolean;
	isFourWheelDrive(): boolean;
	isHistoricalUSFourWheelDrive(): boolean;
	isControlledAccess(): boolean;
	isBoatFerry(): boolean;
	isRailFerry(): boolean;
	isMultiDig(): boolean;
	getDividerGaps(): List;
	isFrontageRoad(): boolean;
	getAdasPrecisionCategory(): string;
	getAdasGeometrySource(): number;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getIntersectionCategory(): string;
	isMotorway(): boolean;
	isScenicRoute(): boolean;
	getLaneAttributes(): Set;
	isExpressLanes(): boolean;
	isCarpoolRoad(): boolean;
	isParkingLotRoad(): boolean;
	isTransportVerified(): boolean;
	isPublicAccess(): boolean;
	getLowMobility(): number;
	getPrioritySource(): number;
	getGradeCategory(): number;
	getCTlastUpdated(): Date;
	getRoadClass(): number;
	getOverUnderPassIndicator(): number;
	isDeliveryRoad(): boolean;
	getPedestrianPreferred(): number;
	isLimitedAccessRoad(): boolean;
	getBUARoad(): string;
	makeFlat(): FlatNavLink;
	makeFlat(): FlatKernel;
	getAccessBits(): number;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	isAccessMotorcycles(): boolean;
	clearState(): void;
	setReversible(arg0: boolean): void;
	setCarpoolRoad(arg0: boolean): void;
	setExpressLanes(arg0: boolean): void;
	setPrivateRoad(arg0: boolean): void;
	setParkingLotRoad(arg0: boolean): void;
	setPublicAccess(arg0: boolean): void;
	setDeliveryRoad(arg0: boolean): void;
	setLimitedAccessRoad(arg0: boolean): void;
	setFourWheelDrive(arg0: boolean): void;
	setHistoricalUSFourWheelDrive(arg0: boolean): void;
	setCarpoolAccess(arg0: boolean): void;
	setAutoAccess(arg0: boolean): void;
	setEmergencyVehiclesAccess(arg0: boolean): void;
	setBusAccess(arg0: boolean): void;
	setTaxiAccess(arg0: boolean): void;
	setDelVehiclesAccess(arg0: boolean): void;
	setTruckAccess(arg0: boolean): void;
	setThruAccess(arg0: boolean): void;
	setPedestriansAccess(arg0: boolean): void;
	setAccessMotorcycles(arg0: boolean): void;
	setMotorway(arg0: boolean): void;
	setLowMobility(arg0: number): void;
	setPrioritySource(arg0: number): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatNavLink:
{
	new (value?: any): FlatNavLink;
	(): any;
	(value: any): any;
	prototype: FlatNavLink;
}
interface FlatCompositeRoadFeature
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	getType(): string;
	setLandmarkPoint(arg0: GeoPoint): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: CompositeRoadFeatureKernel, arg1: CompositeRoadFeatureKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	isValidUnnamed(): boolean;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	setValidUnnamed(arg0: boolean): void;
	setState(arg0: Kernel): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getAttachedFiles(): Set;
	getFeatureType(): number;
	getRefCrfIntersectionId(): number;
	setRefCrfIntersectionId(arg0: number): void;
	getNRefCrfIntersectionId(): number;
	setNRefCrfIntersectionId(arg0: number): void;
	getNavLinkIds(): Set;
	setNavLinkIds(arg0: Set): void;
	setAttachedFiles(arg0: Set): void;
	kernelType(): Class;
	cleared(): boolean;
	getExtendedAttributes(): Set;
	setExtendedAttributes(arg0: Set): void;
	setType(arg0: string): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCompositeRoadFeature;
	clearState(): void;
	setNavNodeIds(arg0: Set): void;
	getDataPacketType(): DataPacketType;
	id(): number;
	setNames(arg0: Set): void;
	collectionToString(arg0: Collection): string;
	intArrayToString(arg0: Array<number>): string;
	stringArrayToString(arg0: Array<string>): string;
	setId(arg0: number): void;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatCompositeRoadFeature:
{
	new (value?: any): FlatCompositeRoadFeature;
	(): any;
	(value: any): any;
	prototype: FlatCompositeRoadFeature;
}
interface FlatNode
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: NodeKernel, arg1: NodeKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setPoint(arg0: GeoPoint): void;
	setMapEdgeId(arg0: number): void;
	setState(arg0: Kernel): void;
	setState(arg0: NodeKernel): void;
	setId(arg0: number): void;
	kernelType(): Class;
	cleared(): boolean;
	setAligned(arg0: boolean): void;
	getExtendedAttributes(): Set;
	setExtendedAttributes(arg0: Set): void;
	setGeoPoint(arg0: GeoPoint): void;
	setNodeElevation(arg0: NodeElevation): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatNode;
	getPoint(): GeoPoint;
	setNodePvid(arg0: number): void;
	isAligned(): boolean;
	getNodePvid(): number;
	getMapEdgeId(): number;
	getNodeElevation(): NodeElevation;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatNode:
{
	new (value?: any): FlatNode;
	(): any;
	(value: any): any;
	prototype: FlatNode;
}
interface NodeElevation
{
	equals(arg0: any): boolean;
	toString(): string;
	getNodeId(): number;
	getElevation(): number;
	getClass(): Class;
}
declare var NodeElevation:
{
	new (value?: any): NodeElevation;
	(): any;
	(value: any): any;
	prototype: NodeElevation;
}
interface FlatCartoLink
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: CartoLinkKernel, arg1: CartoLinkKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setState(arg0: Kernel): void;
	setLineOfControl(arg0: boolean): void;
	setCoverageIndicator(arg0: string): void;
	setCoverageIndicatorSource(arg0: number): void;
	setClaimedBy(arg0: string): void;
	setControlledBy(arg0: string): void;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	setCartoId(arg0: number): void;
	setLongHaul(arg0: boolean): void;
	getLinkId(): number;
	isLineOfControl(): boolean;
	setProductAdminId(arg0: number): void;
	getCartoId(): number;
	kernelType(): Class;
	cleared(): boolean;
	getProductAdminId(): number;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCartoLink;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatCartoLink:
{
	new (value?: any): FlatCartoLink;
	(): any;
	(value: any): any;
	prototype: FlatCartoLink;
}
interface CartoFeatureSubTypePublishValue
{
	values(): CartoFeatureSubTypePublishValue;
	valueOf(arg0: string): CartoFeatureSubTypePublishValue;
	getValue(): string;
	isMarkedMain(): boolean;
	getObjectForDbValue(arg0: string): CartoFeatureSubTypePublishValue;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var CartoFeatureSubTypePublishValue:
{
	new (value?: any): CartoFeatureSubTypePublishValue;
	(): any;
	(value: any): any;
	prototype: CartoFeatureSubTypePublishValue;
}
interface MapContextExtender
{
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	mapContext(): MapContext;
}
declare var MapContextExtender:
{
	new (value?: any): MapContextExtender;
	(): any;
	(value: any): any;
	prototype: MapContextExtender;
}
interface RuleInfoKernel
{
	getRuleCode(): string;
	getStatus(): string;
	getRuleDescription(): string;
	getRuleName(): string;
	getSeverity(): string;
	getRepairNote(): string;
	getDocLink(): string;
	getLeEnabled(): boolean;
	getRuleClassName(): string;
	getBatchClassName(): string;
	getAccessorName(): string;
	getTargetClassName(): string;
	getMetadataKey(): string;
	getDeltaValidations(): Set;
	getVersion(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var RuleInfoKernel:
{
	new (value?: any): RuleInfoKernel;
	(): any;
	(value: any): any;
	prototype: RuleInfoKernel;
}
interface Delta
{
	type(): Type;
	removed(): boolean;
	currentObject(): FlatKernel;
	created(): boolean;
	kernelId(): number;
	previousObject(): FlatKernel;
	inverse(): Delta;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	hasSameIdentity(arg0: Delta): boolean;
	updated(): boolean;
	replacementIds(): Set;
	setReplacementIds(arg0: Set): void;
	makeCopy(): Delta;
	replaced(): boolean;
	deepCopy(): Delta;
}
declare var Delta:
{
	new (value?: any): Delta;
	(): any;
	(value: any): any;
	prototype: Delta;
}
interface Rule
{
	name(): string;
	apply(arg0: any): RuleResult;
	status(): string;
	id(): number;
	description(): string;
	getRuleInfo(): RuleInfo;
	setMetadata(arg0: Metadata): void;
	ruleCode(): string;
	setTrafficInfo(arg0: TrafficInfo): void;
	setStreetTypeFactory(arg0: StreetTypeFactory): void;
	setTpegInfo(arg0: TpegInfo): void;
	getMetadata(): Metadata;
	repairNote(): string;
	severity(): string;
	docLink(): string;
	leEnabled(): boolean;
	isMessageSignificant(): boolean;
	accessorName(): string;
	targetClassName(): string;
	metadataKey(): string;
	getLastErrorMsg(): string;
	setRuleInfo(arg0: RuleInfoKernel): void;
	isRuleValid(arg0: number): boolean;
	skipCountryOverride(): boolean;
	getMapContextProxy(): MapContextProxy;
	requiresGeometricScope(): boolean;
}
declare var Rule:
{
	new (value?: any): Rule;
	(): any;
	(value: any): any;
	prototype: Rule;
}
interface BatchValidation
{
	run(arg0: Set, arg1: MapContext): ValidationResult;
	getValParameterNames(): List;
	IsKernelOrderImportant(): boolean;
	needOKResult(): boolean;
}
declare var BatchValidation:
{
	new (value?: any): BatchValidation;
	(): any;
	(value: any): any;
	prototype: BatchValidation;
}
interface MultiMap
{
	remove(arg0: any, arg1: any): void;
	get(arg0: any): Collection;
	put(arg0: any, arg1: any): void;
	values(): Collection;
	contains(arg0: any, arg1: any): boolean;
	putAll(arg0: any, arg1: Collection): void;
	keySet(): Set;
	removeAll(arg0: any): void;
	asMap(): Map;
}
declare var MultiMap:
{
	new (value?: any): MultiMap;
	(): any;
	(value: any): any;
	prototype: MultiMap;
}
interface UnvalidatedChangeKernelVisitor
{
	visitDeltaUvc(arg0: UnvalidatedChangeKernel): void;
	visitRuleSigUvc(arg0: UnvalidatedChangeKernel): void;
	visitRuleDeltaUvc(arg0: UnvalidatedChangeKernel): void;
	visitAdminUvc(arg0: UnvalidatedChangeKernel): void;
}
declare var UnvalidatedChangeKernelVisitor:
{
	new (value?: any): UnvalidatedChangeKernelVisitor;
	(): any;
	(value: any): any;
	prototype: UnvalidatedChangeKernelVisitor;
}
interface UnvalidatedChangeType
{
	values(): UnvalidatedChangeType;
	valueOf(arg0: string): UnvalidatedChangeType;
	getKey(): number;
	getKey(): any;
	accept(arg0: UnvalidatedChangeKernelVisitor, arg1: UnvalidatedChangeKernel): void;
	getTypeFromValue(arg0: number): UnvalidatedChangeType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var UnvalidatedChangeType:
{
	new (value?: any): UnvalidatedChangeType;
	(): any;
	(value: any): any;
	prototype: UnvalidatedChangeType;
}
interface UnvalidatedChangeStatus
{
	values(): UnvalidatedChangeStatus;
	valueOf(arg0: string): UnvalidatedChangeStatus;
	getKey(): any;
	getKey(): number;
	getTypeFromValue(arg0: number): UnvalidatedChangeStatus;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var UnvalidatedChangeStatus:
{
	new (value?: any): UnvalidatedChangeStatus;
	(): any;
	(value: any): any;
	prototype: UnvalidatedChangeStatus;
}
interface ExternalPostalInfo
{
	equals(arg0: any): boolean;
	toString(): string;
	format(): string;
	accept(arg0: PacketVisitor): void;
	setReadOnly(): void;
	prefix(): string;
	id(): string;
	transactionId(): string;
	setSuffix(arg0: string): void;
	firstAddr(): string;
	lastAddr(): string;
	setScheme(arg0: string): void;
	setFirstAddr(arg0: string): void;
	setLastAddr(arg0: string): void;
	originalStreetName(): string;
	originalStreetType(): string;
	isWritable(): boolean;
	setCountryUserCode(arg0: string): void;
	setTransactionId(arg0: string): void;
	setStreetName(arg0: string): void;
	setOriginalStreetName(arg0: string): void;
	setOriginalStreetType(arg0: string): void;
	setState(arg0: ExternalPostalInfo): void;
	setAdmin(arg0: string): void;
	setPostalCode(arg0: string): void;
	setStreetType(arg0: string): void;
	streetType(): string;
	setPrefix(arg0: string): void;
	setFormat(arg0: string): void;
	setId(arg0: string): void;
	postalCode(): string;
	admin(): string;
	streetName(): string;
	cleared(): boolean;
	clearState(): void;
	suffix(): string;
	countryUserCode(): string;
	getDataPacketType(): DataPacketType;
	scheme(): string;
	getClass(): Class;
}
declare var ExternalPostalInfo:
{
	new (value?: any): ExternalPostalInfo;
	(): any;
	(value: any): any;
	prototype: ExternalPostalInfo;
}
interface ExternalZipCityInfo
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	setReadOnly(): void;
	id(): string;
	isWritable(): boolean;
	setCountryUserCode(arg0: string): void;
	setState(arg0: ExternalZipCityInfo): void;
	setAdmin(arg0: string): void;
	setPostalCode(arg0: string): void;
	setId(arg0: string): void;
	postalCode(): string;
	admin(): string;
	cleared(): boolean;
	actualName(): string;
	llCityName(): string;
	oldllCityName(): string;
	facilityCode(): string;
	nameIndicator(): string;
	countyName(): string;
	stateAbbreviation(): string;
	zipClassificationCode(): string;
	setActualName(arg0: string): void;
	setFacilityCode(arg0: string): void;
	setNameIndicator(arg0: string): void;
	setLLCityName(arg0: string): void;
	setOldLLCityName(arg0: string): void;
	setStateAbbreviation(arg0: string): void;
	setCountyName(arg0: string): void;
	setZipClassificationCode(arg0: string): void;
	clearState(): void;
	countryUserCode(): string;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var ExternalZipCityInfo:
{
	new (value?: any): ExternalZipCityInfo;
	(): any;
	(value: any): any;
	prototype: ExternalZipCityInfo;
}
interface TrafficReference
{
	accept(arg0: PacketVisitor): void;
	setCountryUserCode(arg0: string): void;
	setAdminLevel(arg0: number): void;
	setAreaReferenceUserCode(arg0: string): void;
	setTableId(arg0: number): void;
	setBsaId(arg0: number): void;
	setBsaName(arg0: string): void;
	setAreaReferenceName(arg0: string): void;
	getBsaId(): number;
	getBsaName(): string;
	getAreaReferenceName(): string;
	getAdminLevel(): number;
	clearState(): void;
	getCountryUserCode(): string;
	getAreaReferenceUserCode(): string;
	getTableId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TrafficReference:
{
	new (value?: any): TrafficReference;
	(): any;
	(value: any): any;
	prototype: TrafficReference;
}
interface TrafficData
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	setRoadName(arg0: string): void;
	setCountryUserCode(arg0: string): void;
	setTableId(arg0: number): void;
	setBsaId(arg0: number): void;
	getBsaId(): number;
	setCountryAdminPlaceId(arg0: number): void;
	setLocationId(arg0: number): void;
	setLocationType(arg0: string): void;
	setRoadNumber(arg0: string): void;
	setFirstName(arg0: string): void;
	setSecondName(arg0: string): void;
	setLinearId(arg0: number): void;
	setNegativeOffset(arg0: number): void;
	setPositiveOffset(arg0: number): void;
	setLatitude(arg0: number): void;
	setLongitude(arg0: number): void;
	getCountryAdminPlaceId(): number;
	getLocationType(): string;
	getRoadNumber(): string;
	getRoadName(): string;
	getFirstName(): string;
	getSecondName(): string;
	getLinearId(): number;
	getLatitude(): number;
	getLongitude(): number;
	getLocationId(): number;
	clearState(): void;
	getCountryUserCode(): string;
	getTableId(): number;
	getPositiveOffset(): number;
	getNegativeOffset(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var TrafficData:
{
	new (value?: any): TrafficData;
	(): any;
	(value: any): any;
	prototype: TrafficData;
}
interface Domain
{
	get(arg0: string): Element;
	get(arg0: any): Element;
	get(arg0: number): Element;
	getName(): string;
	contains(arg0: string): boolean;
	contains(arg0: any): boolean;
	contains(arg0: number): boolean;
	addElement(arg0: Element): void;
	accept(arg0: KernelVisitor): void;
	setName(arg0: string): void;
	removeElement(arg0: Element): void;
	equivalent(arg0: Kernel): boolean;
	setElementType(arg0: string): void;
	getElementType(): string;
	setPublishedName(arg0: string): void;
	setDomainType(arg0: string): void;
	getPublishedName(): string;
	getDomainType(): string;
	getValueType(): DomainValueType;
	setValueType(arg0: DomainValueType): void;
	setPublishedValueType(arg0: DomainValueType): void;
	getPublishedValueType(): DomainValueType;
	setState(arg0: Kernel): void;
	setState(arg0: DomainKernel): void;
	getShortName(): string;
	setShortName(arg0: string): void;
	setLongName(arg0: string): void;
	setElements(arg0: List): void;
	dependents(): Set;
	getLongName(): string;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getElements(): List;
	makeFlat(): FlatKernel;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var Domain:
{
	new (value?: any): Domain;
	(): any;
	(value: any): any;
	prototype: Domain;
}
interface PoiFlavour
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	setPoiId(arg0: number): void;
	getPoiId(): number;
	getPhonLang(): string;
	getDataPacketType(): DataPacketType;
	setPhonLang(arg0: string): void;
	getFlavour(): string;
	setFlavour(arg0: string): void;
	getClass(): Class;
}
declare var PoiFlavour:
{
	new (value?: any): PoiFlavour;
	(): any;
	(value: any): any;
	prototype: PoiFlavour;
}
interface PhoneticData
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	getPhonetics(): List;
	getPlainPhoneticText(): PlainText;
	setPhonetics(arg0: List): void;
	getDataPacketType(): DataPacketType;
	addPhoneticText(arg0: PhoneticText): PhoneticTextData;
	filterPhonetics(): number;
	getClass(): Class;
}
declare var PhoneticData:
{
	new (value?: any): PhoneticData;
	(): any;
	(value: any): any;
	prototype: PhoneticData;
}
interface LangConv
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	getCountry(): string;
	getPhonLang(): string;
	getDataPacketType(): DataPacketType;
	setPhonLang(arg0: string): void;
	setLcid(arg0: number): void;
	getLcid(): number;
	setCountry(arg0: string): void;
	setDndcLang(arg0: string): void;
	getDndcLang(): string;
	setGovtCode(arg0: number): void;
	getGovtCode(): number;
	getClass(): Class;
}
declare var LangConv:
{
	new (value?: any): LangConv;
	(): any;
	(value: any): any;
	prototype: LangConv;
}
interface Preposition
{
	equals(arg0: any): boolean;
	toString(): string;
	setCode(arg0: string): void;
	getLanguageCode(): string;
	setText(arg0: string): void;
	getText(): string;
	setLanguageCode(arg0: string): void;
	setPosition(arg0: number): void;
	setArticle(arg0: string): void;
	getCode(): string;
	getFullText(): string;
	getPosition(): number;
	getArticle(): string;
	getClass(): Class;
}
declare var Preposition:
{
	new (value?: any): Preposition;
	(): any;
	(value: any): any;
	prototype: Preposition;
}
interface VoiceCode
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	setCodeType(arg0: string): void;
	getCodeType(): string;
	setCode(arg0: string): void;
	getDescription(): string;
	setDescription(arg0: string): void;
	getCode(): string;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var VoiceCode:
{
	new (value?: any): VoiceCode;
	(): any;
	(value: any): any;
	prototype: VoiceCode;
}
interface GeoQualifier
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	setFid(arg0: number): void;
	getGid(): number;
	setGid(arg0: number): void;
	getNamedPlacePvid(): number;
	setNamedPlacePvid(arg0: number): void;
	getFid(): number;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var GeoQualifier:
{
	new (value?: any): GeoQualifier;
	(): any;
	(value: any): any;
	prototype: GeoQualifier;
}
interface FlatLinkHistory
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	isBridge(): boolean;
	id(): number;
	setLinkPvid(arg0: number): void;
	setRefNodeId(arg0: number): void;
	setNrefNodeId(arg0: number): void;
	setRightAdminPlaceId(arg0: number): void;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	setLeftAdminPlaceId(arg0: number): void;
	isUrban(): boolean;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	setMapEdgeId(arg0: number): void;
	setLeftPostalAreaId(arg0: number): void;
	setRightPostalAreaId(arg0: number): void;
	setDetailedCity(arg0: boolean): void;
	getGeometrySource(): number;
	setUrban(arg0: boolean): void;
	setMapEdgeSide(arg0: MapEdgeSide): void;
	setGeometrySource(arg0: number): void;
	getOperation(): string;
	setOperation(arg0: string): void;
	getCurrentChangeId(): number;
	getCreateChangeId(): number;
	setCreateChangeId(arg0: number): void;
	getReplacementChangeId(): number;
	setReplacementChangeId(arg0: number): void;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	isDetailedCity(): boolean;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	setAligned(arg0: boolean): void;
	getLinkPvid(): number;
	makeFlat(): FlatLinkHistory;
	isAligned(): boolean;
	getMapEdgeId(): number;
	clearState(): void;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var FlatLinkHistory:
{
	new (value?: any): FlatLinkHistory;
	(): any;
	(value: any): any;
	prototype: FlatLinkHistory;
}
interface FlatRoadLinkHistory
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	id(): number;
	setExplicatable(arg0: boolean): void;
	setCommonName(arg0: boolean): void;
	setPostalName(arg0: boolean): void;
	setStaleName(arg0: boolean): void;
	setVanityName(arg0: boolean): void;
	setJunctionName(arg0: boolean): void;
	setExitName(arg0: boolean): void;
	setBicycleRouteName(arg0: boolean): void;
	setAttrNameStatus(arg0: number): void;
	equivalent(arg0: RoadLinkKernel, arg1: RoadLinkKernel): boolean;
	getNavLinkId(): number;
	isValidUnnamed(): boolean;
	setRoadLinkPvid(arg0: number): void;
	setRefRoadLinkId(arg0: number): void;
	setRoadNameId(arg0: number): void;
	setValidUnnamed(arg0: boolean): void;
	getAddressRangeType(): number;
	getLeftAddressRange(): AddressRange;
	getRightAddressRange(): AddressRange;
	getRoadNameId(): number;
	getRefRoadLinkId(): number;
	setState(arg0: FlatRoadLinkHistory): void;
	getOperation(): string;
	setOperation(arg0: string): void;
	getCurrentChangeId(): number;
	getCreateChangeId(): number;
	setCreateChangeId(arg0: number): void;
	getReplacementChangeId(): number;
	setReplacementChangeId(arg0: number): void;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	setScenicName(arg0: boolean): void;
	setNavLinkId(arg0: number): void;
	getRoadLinkPvid(): number;
	getNameSource(): number;
	setLeftAddressRange(arg0: AddressRange): void;
	setRightAddressRange(arg0: AddressRange): void;
	setAddressRangeType(arg0: number): void;
	setNameSource(arg0: number): void;
	isExitName(): boolean;
	isExplicatable(): boolean;
	isJunctionName(): boolean;
	isPostalName(): boolean;
	isCommonName(): boolean;
	isScenicName(): boolean;
	isStaleName(): boolean;
	isVanityName(): boolean;
	isBicycleRouteName(): boolean;
	getAttrNameStatus(): number;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var FlatRoadLinkHistory:
{
	new (value?: any): FlatRoadLinkHistory;
	(): any;
	(value: any): any;
	prototype: FlatRoadLinkHistory;
}
interface FlatCartoLinkHistory
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: FlatCartoLinkHistory): boolean;
	equivalent(arg0: FlatCartoLinkHistory, arg1: FlatCartoLinkHistory): boolean;
	isRichObjectPartialCapable(): boolean;
	setState(arg0: FlatCartoLinkHistory): void;
	setLineOfControl(arg0: boolean): void;
	getOperation(): string;
	setOperation(arg0: string): void;
	getCurrentChangeId(): number;
	getCreateChangeId(): number;
	setCreateChangeId(arg0: number): void;
	getReplacementChangeId(): number;
	setReplacementChangeId(arg0: number): void;
	setCoverageIndicator(arg0: string): void;
	setCoverageIndicatorSource(arg0: number): void;
	setClaimedBy(arg0: string): void;
	setControlledBy(arg0: string): void;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	setCartoId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	setLongHaul(arg0: boolean): void;
	getLinkId(): number;
	isLineOfControl(): boolean;
	setProductAdminId(arg0: number): void;
	getCartoId(): number;
	getProductAdminId(): number;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var FlatCartoLinkHistory:
{
	new (value?: any): FlatCartoLinkHistory;
	(): any;
	(value: any): any;
	prototype: FlatCartoLinkHistory;
}
interface FlatFaceLinkHistory
{
	toString(arg0: FlatFaceLinkHistory): string;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: FlatFaceLinkHistory, arg1: FlatFaceLinkHistory): boolean;
	equivalent(arg0: FlatFaceLinkHistory): boolean;
	isRichObjectPartialCapable(): boolean;
	setState(arg0: FlatFaceLinkHistory): void;
	getOperation(): string;
	setOperation(arg0: string): void;
	getCurrentChangeId(): number;
	getCreateChangeId(): number;
	setCreateChangeId(arg0: number): void;
	getReplacementChangeId(): number;
	setReplacementChangeId(arg0: number): void;
	setId(arg0: number): void;
	setFaceId(arg0: number): void;
	setLinkId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	getFaceId(): number;
	getLinkId(): number;
	cleared(): boolean;
	invert(): void;
	isInverted(): boolean;
	setInverted(arg0: boolean): void;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var FlatFaceLinkHistory:
{
	new (value?: any): FlatFaceLinkHistory;
	(): any;
	(value: any): any;
	prototype: FlatFaceLinkHistory;
}
interface FlatChangeSequenceObject
{
	accept(arg0: PacketVisitor): void;
	set(arg0: number, arg1: number, arg2: string, arg3: string): void;
	clusterId(): number;
	mapObjectType(): string;
	mapObjectId(): number;
	operation(): string;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FlatChangeSequenceObject:
{
	new (value?: any): FlatChangeSequenceObject;
	(): any;
	(value: any): any;
	prototype: FlatChangeSequenceObject;
}
interface FlatChangeReplacement
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	set(arg0: number, arg1: number, arg2: number, arg3: number, arg4: Class): void;
	set(arg0: number, arg1: number, arg2: number, arg3: number, arg4: string): void;
	isSplit(arg0: FlatChangeReplacement): boolean;
	getChangeId(): number;
	getClusterId(): number;
	getDeletedMapObjectId(): number;
	getReplacementMapObjectId(): number;
	getMapObjectType(): string;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var FlatChangeReplacement:
{
	new (value?: any): FlatChangeReplacement;
	(): any;
	(value: any): any;
	prototype: FlatChangeReplacement;
}
interface FlatNavLinkHistory
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	setPriority(arg0: number): void;
	getPriority(): number;
	isPrivate(): boolean;
	getOffset(): number;
	setOffset(arg0: number): void;
	id(): number;
	setSupplementalGeoBits(arg0: number): void;
	equivalent(arg0: FlatNavLinkHistory, arg1: FlatNavLinkHistory): boolean;
	equivalent(arg0: FlatNavLinkHistory): boolean;
	isPoiAccess(): boolean;
	setRefNavNodeId(arg0: number): void;
	setNRefNavNodeId(arg0: number): void;
	setConfidenceScore(arg0: number): void;
	setCTlastUpdated(arg0: Date): void;
	setPedestrianPreferred(arg0: number): void;
	setBUARoad(arg0: string): void;
	setGradeCategory(arg0: number): void;
	setTransportVerified(arg0: boolean): void;
	setState(arg0: FlatNavLinkHistory): void;
	getOperation(): string;
	setOperation(arg0: string): void;
	getCurrentChangeId(): number;
	getCreateChangeId(): number;
	setCreateChangeId(arg0: number): void;
	getReplacementChangeId(): number;
	setReplacementChangeId(arg0: number): void;
	setCoverageIndicator(arg0: string): void;
	setCoverageIndicatorSource(arg0: number): void;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	getToRefPhysicalLanes(): number;
	getToRefNumberLanes(): number;
	getFromRefPhysicalLanes(): number;
	getFromRefNumberLanes(): number;
	setFromRefPhysicalLanes(arg0: number): void;
	setToRefPhysicalLanes(arg0: number): void;
	isStubLink(): boolean;
	setLongHaul(arg0: boolean): void;
	setStubLink(arg0: boolean): void;
	getNRefNavNodeId(): number;
	getRefNavNodeId(): number;
	getLinkId(): number;
	getSupplementalGeoBits(): number;
	getFunctionalClass(): number;
	isInProcessData(): boolean;
	setProductAdminId(arg0: number): void;
	setAccessBit(arg0: number, arg1: boolean): void;
	setDisplayBits(arg0: number, arg1: boolean): void;
	setDisplayBits(arg0: number): void;
	setSpecialAttrBit(arg0: string, arg1: boolean): void;
	setAccessAutomobiles(arg0: boolean): void;
	setAccessBuses(arg0: boolean): void;
	setAccessTaxis(arg0: boolean): void;
	setAccessCarpools(arg0: boolean): void;
	setAccessPedestrians(arg0: boolean): void;
	setAccessTrucks(arg0: boolean): void;
	setAccessThroughTraffic(arg0: boolean): void;
	setAccessDelivery(arg0: boolean): void;
	setAccessEmergencyVehicles(arg0: boolean): void;
	setAccessBits(arg0: number): void;
	setAccessBits(arg0: number, arg1: boolean): void;
	getSpecialAttributeBits(): number;
	getDisplayBits(): number;
	setSpecialAttributeBits(arg0: number): void;
	setSupplementalGeoBit(arg0: number): void;
	clearSupplementalGeoBit(arg0: number): void;
	cleared(): boolean;
	setScenicRoute(arg0: boolean): void;
	setSpeedCategorySource(arg0: number): void;
	setOverUnderPassIndicator(arg0: number): void;
	setRoadClass(arg0: number): void;
	hasBits(arg0: number, arg1: number): boolean;
	getDivider(): string;
	isReversible(): boolean;
	getProductAdminId(): number;
	getConfidenceScore(): number;
	setTollway(arg0: boolean): void;
	getDirectionOfTravel(): number;
	isRamp(): boolean;
	isPaved(): boolean;
	setDividerLegal(arg0: boolean): void;
	setInProcessData(arg0: boolean): void;
	setPaved(arg0: boolean): void;
	setPrivate(arg0: boolean): void;
	setRamp(arg0: boolean): void;
	setPoiAccess(arg0: boolean): void;
	setControlledAccess(arg0: boolean): void;
	setBoatFerry(arg0: boolean): void;
	setRailFerry(arg0: boolean): void;
	setMultiDig(arg0: boolean): void;
	setFunctionalClass(arg0: number): void;
	setDirectionOfTravel(arg0: number): void;
	setFromRefSpeedLimit(arg0: number): void;
	setToRefSpeedLimit(arg0: number): void;
	setSpeedCategory(arg0: number): void;
	setLaneCategory(arg0: number): void;
	setFromRefNumberLanes(arg0: number): void;
	setToRefNumberLanes(arg0: number): void;
	setFuncClassSource(arg0: number): void;
	setDirOfTravelSource(arg0: number): void;
	setSpeedLimitSource(arg0: number): void;
	setSpeedLimitDate(arg0: number): void;
	setNumberLanesSource(arg0: number): void;
	setDividerSource(arg0: number): void;
	setFrontageRoad(arg0: boolean): void;
	setAdasPrecisionCategory(arg0: string): void;
	setAdasGeometrySource(arg0: number): void;
	setAdasGeometryDate(arg0: number): void;
	setDivider(arg0: string): void;
	setIntersectionCategory(arg0: string): void;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): number;
	getLaneCategory(): number;
	getDirOfTravelSource(): number;
	getDividerSource(): number;
	getNumberLanesSource(): number;
	getSpeedLimitSource(): number;
	getFuncClassSource(): number;
	getSpeedCategorySource(): number;
	isTollway(): boolean;
	isDividerLegal(): boolean;
	isFourWheelDrive(): boolean;
	isHistoricalUSFourWheelDrive(): boolean;
	isControlledAccess(): boolean;
	isBoatFerry(): boolean;
	isRailFerry(): boolean;
	isMultiDig(): boolean;
	isFrontageRoad(): boolean;
	getAdasPrecisionCategory(): string;
	getAdasGeometrySource(): number;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getIntersectionCategory(): string;
	isMotorway(): boolean;
	isScenicRoute(): boolean;
	isExpressLanes(): boolean;
	isCarpoolRoad(): boolean;
	isParkingLotRoad(): boolean;
	isTransportVerified(): boolean;
	isPublicAccess(): boolean;
	getLowMobility(): number;
	getPrioritySource(): number;
	getGradeCategory(): number;
	getCTlastUpdated(): Date;
	getRoadClass(): number;
	getOverUnderPassIndicator(): number;
	isDeliveryRoad(): boolean;
	getPedestrianPreferred(): number;
	isLimitedAccessRoad(): boolean;
	getBUARoad(): string;
	makeFlat(): FlatNavLinkHistory;
	getAccessBits(): number;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	isAccessMotorcycles(): boolean;
	clearState(): void;
	setReversible(arg0: boolean): void;
	setCarpoolRoad(arg0: boolean): void;
	setExpressLanes(arg0: boolean): void;
	setPrivateRoad(arg0: boolean): void;
	setParkingLotRoad(arg0: boolean): void;
	setPublicAccess(arg0: boolean): void;
	setDeliveryRoad(arg0: boolean): void;
	setLimitedAccessRoad(arg0: boolean): void;
	setFourWheelDrive(arg0: boolean): void;
	setHistoricalUSFourWheelDrive(arg0: boolean): void;
	setCarpoolAccess(arg0: boolean): void;
	setAutoAccess(arg0: boolean): void;
	setEmergencyVehiclesAccess(arg0: boolean): void;
	setBusAccess(arg0: boolean): void;
	setTaxiAccess(arg0: boolean): void;
	setDelVehiclesAccess(arg0: boolean): void;
	setTruckAccess(arg0: boolean): void;
	setThruAccess(arg0: boolean): void;
	setPedestriansAccess(arg0: boolean): void;
	setAccessMotorcycles(arg0: boolean): void;
	setMotorway(arg0: boolean): void;
	setLowMobility(arg0: number): void;
	setPrioritySource(arg0: number): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var FlatNavLinkHistory:
{
	new (value?: any): FlatNavLinkHistory;
	(): any;
	(value: any): any;
	prototype: FlatNavLinkHistory;
}
interface PacketVisitor
{
	visitVoiceCode(arg0: VoiceCode): void;
	visitGeoOverride(arg0: GeoQualifier): void;
	visitFlatRoadLinkHistory(arg0: FlatRoadLinkHistory): void;
	visitFlatCartoLinkHistory(arg0: FlatCartoLinkHistory): void;
	visitFlatFaceLinkHistory(arg0: FlatFaceLinkHistory): void;
	visitFlatChangeSequenceObject(arg0: FlatChangeSequenceObject): void;
	visitCompositeRoadFeature(arg0: FlatCompositeRoadFeature): void;
	visitFlatRoadName(arg0: FlatRoadName): void;
	visitFlatLink(arg0: FlatLink): void;
	visitFlatChangeReplacement(arg0: FlatChangeReplacement): void;
	visitFlatNavLinkHistory(arg0: FlatNavLinkHistory): void;
	visitExternalPostalInfo(arg0: ExternalPostalInfo): void;
	visitTrafficReference(arg0: TrafficReference): void;
	visitTrafficData(arg0: TrafficData): void;
	visitFlatCartoLink(arg0: FlatCartoLink): void;
	visitFlatLinkHistory(arg0: FlatLinkHistory): void;
	visitFlatNavLink(arg0: FlatNavLink): void;
	visitFlatPointOfInterest(arg0: FlatPointOfInterest): void;
	visitCountry(arg0: CountryPacket): void;
	visitFlatCountry(arg0: FlatCountry): void;
	visitArea(arg0: AreaPacket): void;
	visitFlatAdminPlace(arg0: FlatAdminPlace): void;
	visitCartoPath(arg0: CartoPathPacket): void;
	visitFlatCartoFace(arg0: FlatCartoFace): void;
	visitFlatPoiCarto(arg0: FlatPoiCarto): void;
	visitEstimates(arg0: EstimatesPacket): void;
	visitPartialLink(arg0: PartialLinkPacket): void;
	visitExonym(arg0: ExonymPacket): void;
	visitFlatNavNode(arg0: FlatNavNode): void;
	visitPolygon(arg0: PolygonPacket): void;
	visitLinkAdminPostal(arg0: LinkAdminPostalPacket): void;
	visitLinkZones(arg0: LinkZonesPacket): void;
	visitLinkState(arg0: LinkStatePacket): void;
	visitPoi(arg0: PoiPacket): void;
	visitFaceFeature(arg0: FaceFeaturePacket): void;
	visitSign(arg0: FlatSign): void;
	visitIncompleteNode(arg0: IncompleteNodePacket): void;
	visitFlatNavStrand(arg0: FlatNavStrand): void;
	visitFlatCondition(arg0: FlatCondition): void;
	visitFlatFace(arg0: FlatFace): void;
	visitFlatFaceLink(arg0: FlatFaceLink): void;
	visitFlatRoadLink(arg0: FlatRoadLink): void;
	visitLongHaulData(arg0: LongHaulData): void;
	visitCrfNodeCompletion(arg0: CrfNodeCompletionPacket): void;
	visitRuleInfo(arg0: FlatRuleInfo): void;
	visitStreetType(arg0: StreetType): void;
	visitFlatZone(arg0: FlatZone): void;
	visitFlatPostalArea(arg0: FlatPostalArea): void;
	visitLinkPostalArea(arg0: LinkPostalAreaPacket): void;
	visitSchemaVersion(arg0: SchemaVersionPacket): void;
	visitFlatDomain(arg0: FlatDomain): void;
	visitFlatCombo(arg0: FlatCombo): void;
	visitFlatDomainCombo(arg0: FlatDomainCombo): void;
	visitFlatValidationException(arg0: FlatValidationException): void;
	visitFlatUnvalidatedChange(arg0: FlatUnvalidatedChange): void;
	visitNameSource(arg0: NameSourcePacket): void;
	visitPartialDelta(arg0: PartialDelta): void;
	visitPartialDeltaPrevVersion(arg0: PartialDeltaPrevVersion): void;
	visitUpdateName(arg0: UpdateNamePacket): void;
	visitNamedPlaceBoundary(arg0: NamedPlaceBoundaryPacket): void;
	visitPolygonalCartoComponent(arg0: PolygonalCartoComponentPacket): void;
	visitTpegReference(arg0: TpegReference): void;
	visitProperties(arg0: PropertiesPacket): void;
	visitAdditionalDataPacket(arg0: AdditionalDataPacket): void;
	visitFringePacket(arg0: FringePacket): void;
	visitIncompleteAdmin(arg0: IncompleteAdminPacket): void;
	visitDegradationValidationReferenceData(arg0: DegradationValidationReferenceData): void;
	visitRoadPoint(arg0: FlatRoadPoint): void;
	visitFlatPostalAreaAdminPlace(arg0: FlatPostalAreaAdminPlace): void;
	visitFlatPostalAreaZone(arg0: FlatPostalAreaZone): void;
	visitFlatZoneAdminPlace(arg0: FlatZoneAdminPlace): void;
	visitFlatPoiAssoc(arg0: FlatPoiAssoc): void;
	visitFlatFeaturePoint(arg0: FlatFeaturePointAbstr): void;
	visitFlatMapObjectAssociation(arg0: FlatMapObjectAssociationAbstr): void;
	visitFlatAnnotation(arg0: FlatAnnotation): void;
	visitFlatNavLane(arg0: FlatNavLane): void;
	visitFlatLaneStrand(arg0: FlatLaneStrand): void;
	visitFlatViaArea(arg0: FlatViaArea): void;
	visitFlatVirtualConnection(arg0: FlatVirtualConnection): void;
	visitFlatViaAreaPoiLink(arg0: FlatViaAreaPoiLink): void;
	visitFlatViaAreaRLLink(arg0: FlatViaAreaRLLink): void;
	visitFlatTopologySegment(arg0: FlatTopologySegment): void;
	visitNode(arg0: FlatNode): void;
	visitExternalZipCityInfo(arg0: ExternalZipCityInfo): void;
	visitScope(arg0: Scope): void;
	visitFlatCartoFeature(arg0: FlatCartoFeature): void;
	visitPoiFlavour(arg0: PoiFlavour): void;
	visitPhoneticData(arg0: PhoneticData): void;
	visitLangConv(arg0: LangConv): void;
}
declare var PacketVisitor:
{
	new (value?: any): PacketVisitor;
	(): any;
	(value: any): any;
	prototype: PacketVisitor;
}
interface UniversalScopeElement
{
	equals(arg0: any): boolean;
	accept(arg0: ScopeElementVisitor): void;
	id(): number;
	mbr(): GeoRectangle;
	multiMbr(): Set;
	hasApplicationScope(): boolean;
	scopeType(): string;
	isUniversalScope(): boolean;
	isMapObjectScope(): boolean;
	isSpatialScope(): boolean;
	createTime(): Date;
	toString(): string;
	getClass(): Class;
}
declare var UniversalScopeElement:
{
	new (value?: any): UniversalScopeElement;
	(): any;
	(value: any): any;
	prototype: UniversalScopeElement;
}
interface DataPacketType
{
	values(): DataPacketType;
	valueOf(arg0: string): DataPacketType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var DataPacketType:
{
	new (value?: any): DataPacketType;
	(): any;
	(value: any): any;
	prototype: DataPacketType;
}
interface CoverageDescriptor
{
	toString(): string;
	getCrfIds(): Set;
	getMapObjectType(): Class;
	getRoadName(): string;
	parseRectangleCoordinates(arg0: string): GeoRectangle;
	getExecutableQuery(): ExecutableQuery;
	queryRectangle(): GeoRectangle;
	unrestrictedReadAllQuery(): boolean;
	queryAdminCartoOnly(): boolean;
	queryExternalPostalData(): boolean;
	queryTrafficData(): boolean;
	queryTpegData(): boolean;
	queryExternalZipCityData(): boolean;
	isPropagationDeltaEnabled(): boolean;
	isbufferedRectAdminQuery(): boolean;
	isDegradationValidationDataEnabled(): boolean;
	setDegradationValidationData(arg0: boolean): void;
	loadAllMetadata(): boolean;
	setLoadAllMetadata(arg0: boolean): void;
	setLoadDeltaData(arg0: boolean): void;
	loadDeltaData(): boolean;
	setLoadUnintegratedDeltasOnly(arg0: boolean): void;
	loadUnintegratedDeltasOnly(): boolean;
	setDatabaseVersion(arg0: number): void;
	databaseVersion(): number;
	setTaskCode(arg0: number): void;
	taskCode(): number;
	setExtent(arg0: Extent): void;
	addExtent(arg0: Extent): void;
	setBorderQuery(arg0: boolean): void;
	isBorderQuery(): boolean;
	isRegionalQuery(): boolean;
	isDeltaPrevVersionQuery(): boolean;
	setDeltaPrevVersionQuery(arg0: number): void;
	setFromReferencesLinkQuery(arg0: Set): void;
	isFromReferencesLinkQuery(): boolean;
	getMapObjectRefIds(): Set;
	setMapObjectRefIds(arg0: Set): void;
	setComponentAdminIds(arg0: Set): void;
	componentAdminIds(): Set;
	getExceptionConstraintType(): number;
	getRuleCodes(): List;
	getRuleSeverityLevels(): List;
	getUsersRules(): List;
	getProjectNames(): List;
	getIsRegionToAdminQuery(): boolean;
	getIncludedZoneIds(): List;
	getExcludedZoneIds(): List;
	getIncludedZoneUserCodes(): List;
	getExcludedZoneUserCodes(): List;
	getIsSpatialQuery(): boolean;
	getIsExceptionQuery(): boolean;
	getIsPvidQuery(): boolean;
	setQueryRectangle(arg0: GeoRectangle): void;
	setCountryStateQuery(arg0: boolean): void;
	isCountryStateQuery(): boolean;
	setPartialPolygonalIds(arg0: Set): void;
	getPartialPolygonalIds(): Set;
	setAllCartoIds(arg0: Set): void;
	getAllCartoIds(): Set;
	setAllRoadNameIds(arg0: Set): void;
	getAllRoadNameIds(): Set;
	setAllReparseRoadNameAdminIds(arg0: Set): void;
	getAllReparseRoadNameAdminIds(): Set;
	loadExternalDataOnly(): boolean;
	isTransliterationDataQuery(): boolean;
	isReparseRoadNameDataQuery(): boolean;
	setLoadAdminHierarchy(arg0: boolean): void;
	setCrfIds(arg0: Set): void;
	getMapObjectIds(): Set;
	getMapObjectPvids(): Set;
	getPostalCodes(): Set;
	getExternalPostalCodes(): Set;
	getExternalUserCodes(): Set;
	getNumericPortionOfAddress(): number;
	getRoadNameExtent(): RoadNameExtent;
	isTransBasename(): boolean;
	isCaseSensitive(): boolean;
	getBuildingName(): string;
	isAdminZonePostalAreaQuery(): boolean;
	isPostalByAdminQuery(): boolean;
	getRoadNamePrefix(): string;
	getRoadNameSuffix(): string;
	getZoneNameByAdminArea(): string;
	getAdminIds(): Set;
	isSynchronizeQuery(): boolean;
	setSynchronizeQuery(arg0: boolean): void;
	isUnintegratedDeltaQuery(): boolean;
	setUnintegratedDeltaQuery(arg0: boolean): void;
	isSyncPrevVersionQuery(): boolean;
	setSyncPrevVersionQuery(arg0: boolean): void;
	isSyncPrevPSVersionQuery(): boolean;
	setSyncPrevPSVersionQuery(arg0: boolean): void;
	isUnintegratedDeltasPrevVersionQuery(): boolean;
	setUnintegratedDeltasPrevVersionQuery(arg0: boolean): void;
	isCurrentVersionQuery(): boolean;
	setCurrentVersionQuery(arg0: boolean): void;
	isPreviousVersionQuery(): boolean;
	setPreviousVersionQuery(arg0: boolean): void;
	setQueryMetadataOnly(arg0: boolean): void;
	setUnrestrictedReadAllQuery(arg0: boolean): void;
	setQueryAdminCartoOnly(arg0: boolean): void;
	setQueryExternalDataOnly(arg0: boolean): void;
	setQueryTransliterationData(arg0: boolean): void;
	setQueryReparseRoadNameData(arg0: boolean): void;
	loadLocalMetadata(): boolean;
	setLoadLocalMetadata(arg0: boolean): void;
	loadGlobalMetadata(): boolean;
	loadTrafficData(): boolean;
	loadTpegData(): boolean;
	setLoadGlobalMetadata(arg0: boolean): void;
	setLoadTrafficData(arg0: boolean): void;
	setLoadTpegData(arg0: boolean): void;
	loadNamedPlacedPOI(): boolean;
	setLoadNamedPlacedPOI(arg0: boolean): void;
	setLoadPremiumPois(arg0: boolean): void;
	loadPremiumPois(): boolean;
	setIncludeChildrenInAdminHierarchy(arg0: boolean): void;
	includeChildrenInAdminHierarchy(): boolean;
	getChangeSequenceIds(): Set;
	setChangeSequenceIds(arg0: Set): void;
	setLoadGlobalDataOnly(arg0: boolean): void;
	setQueryAllLinks(arg0: boolean): void;
	setQueryLinkLimit(arg0: number): void;
	getQueryLinkLimit(): number;
	getQueryAllLinks(): boolean;
	loadGlobalDataOnly(): boolean;
	setQueryOrphanNodesInRectangle(arg0: boolean): void;
	queryOrphanNodesInRectangle(): boolean;
	getVersionToIgnoreForSync(): number;
	setVersionToIgnoreForSync(arg0: number): void;
	setLoadAdminDeltaData(arg0: boolean): void;
	getLoadAdminDeltaData(): boolean;
	getScopeRectangles(): Set;
	setScopeRectangles(arg0: Set): void;
	isLoadPhoneticData(): boolean;
	setLoadPhoneticData(arg0: boolean): void;
	setLoadHistoryData(arg0: boolean): void;
	loadHistoryData(): boolean;
	isLoadGeoOverrideData(): boolean;
	setLoadGeoOverrideData(arg0: boolean): void;
	isTopologySegmentData(): boolean;
	setTopologySegmentData(arg0: boolean): void;
	getPhoneticConfig(): PhoneticConfig;
	setPhoneticConfig(arg0: PhoneticConfig): void;
	setSyncType(arg0: string): void;
	setSyncType(arg0: SyncType): void;
	getSyncType(): string;
	setMaxSyncSize(arg0: number): void;
	getMaxSyncSize(): number;
	getUnPropagated_deltaIds(): List;
	setUnPropagated_deltaIds(arg0: List): void;
	getUnPropagated_changeIds(): List;
	setUnPropagated_changeIds(arg0: List): void;
	isloadBulkQuery(): boolean;
	getBulkQuery(): ExecutableQuery;
	setBulkQuery(arg0: ExecutableQuery): void;
	isLoadStatisticalAreas(): boolean;
	setLoadStatisticalAreas(arg0: boolean): void;
	getViaAreaName(): string;
	setSyncDescriptor(arg0: SyncDescriptor): void;
	getSyncDescriptor(): SyncDescriptor;
	completeNodes(): boolean;
	isCustomQuery(): boolean;
	getCustomQuery(): Class;
	setBasicHeightData(arg0: boolean): void;
	isBasicHeightData(): boolean;
	getFilterLevel(): FilterLevel;
	setFilterLevel(arg0: FilterLevel): void;
	getSizeOfDataPacket(): number;
	setSizeOfDataPacket(arg0: number): void;
	setDatabaseType(arg0: string): void;
	getDatabaseType(): string;
	loadFromPMOB(): boolean;
	getStreetType(): string;
	getLanguageCode(): string;
	setState(arg0: CoverageDescriptor): void;
	isLongHaul(): boolean;
	setLongHaul(arg0: boolean): void;
	getRegionCode(): string;
	getCartoName(): string;
	getPoiName(): string;
	adminUserCodes(): Set;
	loadAdminHierarchyOnly(): boolean;
	queryMetadataOnly(): boolean;
	getExtent(): Extent;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CoverageDescriptor:
{
	new (value?: any): CoverageDescriptor;
	(): any;
	(value: any): any;
	prototype: CoverageDescriptor;
}
interface FlatCartoFace
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: CartoFaceKernel, arg1: CartoFaceKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setHeight(arg0: number): void;
	setGroundClearance(arg0: number): void;
	setState(arg0: Kernel): void;
	setCoverageIndicator(arg0: string): void;
	setCoverageIndicatorSource(arg0: number): void;
	setClaimedBy(arg0: string): void;
	setControlledBy(arg0: string): void;
	isLongHaul(): boolean;
	getHeight(): number;
	getGroundClearance(): number;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	setId(arg0: number): void;
	setFaceId(arg0: number): void;
	setCartoId(arg0: number): void;
	getFaceId(): number;
	setLongHaul(arg0: boolean): void;
	setBuildingPatternCode(arg0: string): void;
	getCartoId(): number;
	kernelType(): Class;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCartoFace;
	getBuildingPatternCode(): string;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatCartoFace:
{
	new (value?: any): FlatCartoFace;
	(): any;
	(value: any): any;
	prototype: FlatCartoFace;
}
interface FlatRoadPoint
{
	toString(): string;
	getLanguage(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	setParentRoadPointId(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: RoadPointKernel, arg1: RoadPointKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setAddressedRoadLinkId(arg0: number): void;
	getRoutingSide(): string;
	getRoutingPoint(): GeoPoint;
	getAddressFormat(): string;
	getRoadPointPvid(): number;
	getAddressedRoadLinkId(): number;
	getAddressedSide(): string;
	getAddressType(): number;
	setRoutingNavLinkId(arg0: number): void;
	setAddressedSide(arg0: string): void;
	setRoutingSide(arg0: string): void;
	setSourceType(arg0: number): void;
	setAddressType(arg0: number): void;
	setLanguage(arg0: string): void;
	setState(arg0: Kernel): void;
	getDataSource(): string;
	setDataSource(arg0: string): void;
	setHouseNumber(arg0: string): void;
	getHouseNumber(): string;
	getBuildingUnitName(): string;
	setBuildingUnitName(arg0: string): void;
	getUnitName(): string;
	setUnitName(arg0: string): void;
	getLevelName(): string;
	setLevelName(arg0: string): void;
	getParentRoadPointId(): number;
	invertAddressedRoadLink(): void;
	kernelType(): Class;
	getTransliterations(): Set;
	setTransliterations(arg0: Set): void;
	cleared(): boolean;
	setRoadPointPvid(arg0: number): void;
	getRoutingNavLinkId(): number;
	getDisplayPoint(): GeoPoint;
	setAddressFormat(arg0: string): void;
	setDisplayPoint(arg0: GeoPoint): void;
	getSourceType(): number;
	makeFlat(): FlatKernel;
	makeFlat(): FlatRoadPoint;
	clearState(): void;
	setRoutingPoint(arg0: GeoPoint): void;
	invertRoutingNavLink(): void;
	getDataPacketType(): DataPacketType;
	id(): number;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	setNames(arg0: Set): void;
	collectionToString(arg0: Collection): string;
	intArrayToString(arg0: Array<number>): string;
	stringArrayToString(arg0: Array<string>): string;
	setId(arg0: number): void;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatRoadPoint:
{
	new (value?: any): FlatRoadPoint;
	(): any;
	(value: any): any;
	prototype: FlatRoadPoint;
}
interface ManeuverPointFeaturePoint
{
	makeFlat(): FlatManeuverPointFeaturePoint;
	isAutoGenerated(): boolean;
	getPrepositionCodes(): Set;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	directionOfTravel(): DirectionOfTravel;
	calcPercentFromRef(): double;
	link(): Link;
}
declare var ManeuverPointFeaturePoint:
{
	new (value?: any): ManeuverPointFeaturePoint;
	(): any;
	(value: any): any;
	prototype: ManeuverPointFeaturePoint;
}
interface ManeuverPointFeaturePointKernel
{
	isAutoGenerated(): boolean;
	getPrepositionCodes(): Set;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
}
declare var ManeuverPointFeaturePointKernel:
{
	new (value?: any): ManeuverPointFeaturePointKernel;
	(): any;
	(value: any): any;
	prototype: ManeuverPointFeaturePointKernel;
}
interface PremiumContentIdSet
{
	equals(arg0: any): boolean;
	toString(): string;
	set(arg0: number, arg1: string): void;
	getIds(): List;
	getSetId(): number;
	getIdSetName(): string;
	addId(arg0: number, arg1: string): void;
	setSetId(arg0: number): void;
	setIdSetName(arg0: string): void;
	getClass(): Class;
}
declare var PremiumContentIdSet:
{
	new (value?: any): PremiumContentIdSet;
	(): any;
	(value: any): any;
	prototype: PremiumContentIdSet;
}
interface JdbcConnection
{
	close(): void;
	open(): boolean;
	setFetchSize(arg0: number): void;
	querySQL(arg0: string): ResultSet;
	querySQL(arg0: string, arg1: number, arg2: number): ResultSet;
	isConnected(): boolean;
	prepareStatement(arg0: string): PreparedStatement;
	executeQuery(arg0: CallableStatement): ResultSet;
	commit(): void;
	addBatch(arg0: string): void;
	executeBatch(): number;
	executeSQL(arg0: string): number;
	descriptor(): JdbcDatasetDescriptor;
	beginTransaction(): void;
	beginTransaction(arg0: number): void;
	endTransaction(): void;
	newConnection(): DatasetConnection;
	newJdbcConnection(): JdbcConnection;
	session(): Connection;
	setDefaultFetchSize(arg0: number): void;
	beginSerializableTransaction(): void;
	transactionStarted(): boolean;
	rollback(): void;
	countObjects(arg0: Class): number;
	countObjects(arg0: Class, arg1: string): number;
	prepareBatch(): void;
	readObjects(arg0: Class): DatasetCursor;
	readObjects(arg0: List, arg1: string): DatasetCursor;
	readObjects(arg0: Class, arg1: string): DatasetCursor;
	prepareOracle(arg0: OracleData): PreparedStatement;
	callBoolFunc(arg0: string): boolean;
	reportSql(arg0: string): void;
	logDiagnostic(arg0: string): void;
	setTimeout(arg0: number): void;
	prepareCall(arg0: string): CallableStatement;
	cancel(): void;
	executeUpdate(arg0: CallableStatement): void;
	getSid(): number;
	getSessionNumber(): number;
	getTimeout(): number;
	executeAllSQL(arg0: List): number;
	nextObject(arg0: DatasetCursor): OracleData;
	formatTimeStamp(arg0: Timestamp): string;
	setQuiet(arg0: boolean): void;
	readAllObjects(arg0: Class, arg1: string): List;
	readAllObjects(arg0: Class): List;
	nextObjects(arg0: DatasetCursor): List;
	printSQLException(arg0: SQLException): void;
	executeSQL(arg0: string, arg1: number): boolean;
	checkForWarning(arg0: SQLWarning): boolean;
	formatString(arg0: string): string;
	baseTables(): List;
	historyTables(): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var JdbcConnection:
{
	new (value?: any): JdbcConnection;
	(): any;
	(value: any): any;
	prototype: JdbcConnection;
}
interface ViaAreaToPoiAssociation
{
	poi(): PointOfInterest;
	roadLinkAssociations(): Set;
	getPoiId(): number;
	getViaAreaId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	viaArea(): ViaArea;
	associationLinks(): Set;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ViaAreaToPoiAssociation:
{
	new (value?: any): ViaAreaToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: ViaAreaToPoiAssociation;
}
interface ViaAreaToRoadLinkAssociation
{
	roadLink(): RoadLink;
	getRoadLinkId(): number;
	getViaAreaId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	viaArea(): ViaArea;
	associationLinks(): Set;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ViaAreaToRoadLinkAssociation:
{
	new (value?: any): ViaAreaToRoadLinkAssociation;
	(): any;
	(value: any): any;
	prototype: ViaAreaToRoadLinkAssociation;
}
interface LaneType
{
	values(): LaneType;
	valueOf(arg0: string): LaneType;
	contains(arg0: LaneType): boolean;
	getValue(): number;
	toLaneType(arg0: number): LaneType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LaneType:
{
	new (value?: any): LaneType;
	(): any;
	(value: any): any;
	prototype: LaneType;
}
interface LaneDirectionType
{
	values(): LaneDirectionType;
	valueOf(arg0: string): LaneDirectionType;
	getValue(): string;
	toLaneDirectionType(arg0: string): LaneDirectionType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LaneDirectionType:
{
	new (value?: any): LaneDirectionType;
	(): any;
	(value: any): any;
	prototype: LaneDirectionType;
}
interface FlatNavLane
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	getType(): LaneType;
	id(): number;
	setSpeed(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: NavLaneKernel, arg1: NavLaneKernel): boolean;
	getNavLinkId(): number;
	setHeight(arg0: number): void;
	setLaneDividerMarker(arg0: DividerMarkerType): void;
	setDirectionCategoryMarker(arg0: EnumSet): void;
	setState(arg0: Kernel): void;
	setLaneFormingEnding(arg0: LaneFormingEnding): void;
	getHeight(): number;
	setId(arg0: number): void;
	setNavLanePvid(arg0: number): void;
	getNavLanePvid(): number;
	setWidth(arg0: number): void;
	setAccessBit(arg0: number, arg1: boolean): void;
	setAccessAutomobiles(arg0: boolean): void;
	setAccessBuses(arg0: boolean): void;
	setAccessTaxis(arg0: boolean): void;
	setAccessCarpools(arg0: boolean): void;
	setAccessPedestrians(arg0: boolean): void;
	setAccessTrucks(arg0: boolean): void;
	setAccessThroughTraffic(arg0: boolean): void;
	setAccessDelivery(arg0: boolean): void;
	setAccessEmergencyVehicles(arg0: boolean): void;
	setAccessBits(arg0: number): void;
	setLaneCrossingRestrictionType(arg0: LaneCrossingRestrictionType): void;
	setLaneDirectionOverrideType(arg0: LaneDirectionOverrideType): void;
	kernelType(): Class;
	cleared(): boolean;
	invert(): void;
	getCenterDividerMarker(): DividerMarkerType;
	getLaneDirection(): LaneDirectionType;
	getLaneNumber(): number;
	setNavLinkId(arg0: number): void;
	setType(arg0: LaneType): void;
	setLaneDirection(arg0: LaneDirectionType): void;
	setLaneNumber(arg0: number): void;
	setCenterDividerMarker(arg0: DividerMarkerType): void;
	makeFlat(): FlatNavLane;
	makeFlat(): FlatKernel;
	getAccessBits(): number;
	getDirectionCategoryMarker(): EnumSet;
	getWidth(): number;
	getSpeed(): number;
	getLaneDividerMarker(): DividerMarkerType;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	getLaneFormingEnding(): LaneFormingEnding;
	isAccessMotorcycles(): boolean;
	getLaneCrossingRestrictionType(): LaneCrossingRestrictionType;
	getLaneDirectionOverrideType(): LaneDirectionOverrideType;
	clearState(): void;
	setAccessMotorcycles(arg0: boolean): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatNavLane:
{
	new (value?: any): FlatNavLane;
	(): any;
	(value: any): any;
	prototype: FlatNavLane;
}
interface LaneFormingEnding
{
	values(): LaneFormingEnding;
	valueOf(arg0: string): LaneFormingEnding;
	getValue(): string;
	toLaneFormingEnding(arg0: string): LaneFormingEnding;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LaneFormingEnding:
{
	new (value?: any): LaneFormingEnding;
	(): any;
	(value: any): any;
	prototype: LaneFormingEnding;
}
interface LaneCrossingRestrictionType
{
	values(): LaneCrossingRestrictionType;
	valueOf(arg0: string): LaneCrossingRestrictionType;
	getValue(): string;
	toLaneCrossingRestrictionType(arg0: string): LaneCrossingRestrictionType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LaneCrossingRestrictionType:
{
	new (value?: any): LaneCrossingRestrictionType;
	(): any;
	(value: any): any;
	prototype: LaneCrossingRestrictionType;
}
interface LaneDirectionOverrideType
{
	values(): LaneDirectionOverrideType;
	valueOf(arg0: string): LaneDirectionOverrideType;
	getValue(): string;
	toLaneDirOverrideType(arg0: string): LaneDirectionOverrideType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LaneDirectionOverrideType:
{
	new (value?: any): LaneDirectionOverrideType;
	(): any;
	(value: any): any;
	prototype: LaneDirectionOverrideType;
}
interface FlatZone
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	getType(): string;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: ZoneKernel, arg1: ZoneKernel): boolean;
	isValidUnnamed(): boolean;
	setUserCode(arg0: string): void;
	setGovernmentCode(arg0: number): void;
	setValidUnnamed(arg0: boolean): void;
	setState(arg0: Kernel): void;
	getAdminPlaceId(): number;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	getIncludedRegions(): Set;
	getExcludedRegions(): Set;
	getZoneDetails(): Set;
	setNamedPlacePvid(arg0: number): void;
	getUserCode(): string;
	setIncludedRegions(arg0: Set): void;
	setExcludedRegions(arg0: Set): void;
	setZoneDetails(arg0: Set): void;
	kernelType(): Class;
	cleared(): boolean;
	setAdminPlaceId(arg0: number): void;
	setType(arg0: string): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatZone;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	id(): number;
	setNames(arg0: Set): void;
	collectionToString(arg0: Collection): string;
	intArrayToString(arg0: Array<number>): string;
	stringArrayToString(arg0: Array<string>): string;
	setId(arg0: number): void;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatZone:
{
	new (value?: any): FlatZone;
	(): any;
	(value: any): any;
	prototype: FlatZone;
}
interface Element
{
	clone(): any;
	id(): number;
	setId(arg0: number): void;
}
declare var Element:
{
	new (value?: any): Element;
	(): any;
	(value: any): any;
	prototype: Element;
}
interface Combo
{
	clone(): any;
	accept(arg0: KernelVisitor): void;
	elements(): List;
	getFlatComboValues(): List;
	setDomainComboId(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: Metadata, arg1: ComboKernel): void;
	getDomainComboId(): number;
	setElements(arg0: List): void;
	setRuleResult(arg0: RuleResult): void;
	getRuleResult(): RuleResult;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getElements(): List;
	makeFlat(): FlatKernel;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var Combo:
{
	new (value?: any): Combo;
	(): any;
	(value: any): any;
	prototype: Combo;
}
interface DomainCombo
{
	get(arg0: List): Combo;
	getName(): string;
	accept(arg0: KernelVisitor): void;
	setName(arg0: string): void;
	ruleResult(arg0: Combo): RuleResult;
	equivalent(arg0: Kernel): boolean;
	getValues(arg0: number, arg1: any, arg2: number): List;
	getValues(arg0: number): List;
	setState(arg0: Kernel): void;
	setState(arg0: DomainComboKernel): void;
	getShortName(): string;
	setShortName(arg0: string): void;
	getDomainTemplates(): List;
	setLongName(arg0: string): void;
	setCombos(arg0: Set): void;
	getLongName(): string;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getCombo(arg0: List): Combo;
	cleared(): boolean;
	getCombos(): Set;
	getCombos(arg0: number, arg1: any): Set;
	setDefaultRuleResult(arg0: RuleResult): void;
	setDomainTemplates(arg0: List): void;
	getDefaultRuleResult(): RuleResult;
	getDomainTemplateIndex(arg0: number): number;
	makeFlat(): FlatKernel;
	clearState(): void;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var DomainCombo:
{
	new (value?: any): DomainCombo;
	(): any;
	(value: any): any;
	prototype: DomainCombo;
}
interface StreetTypeFactory
{
	add(arg0: StreetType): void;
	remove(arg0: StreetType): void;
	count(): number;
	equals(arg0: any): boolean;
	update(arg0: StreetType): void;
	clear(): void;
	contains(arg0: StreetType): boolean;
	addUpper(arg0: StreetType): void;
	streetType(arg0: number): StreetType;
	findStreetType(arg0: string, arg1: string): StreetType;
	findOfficialStreetType(arg0: string, arg1: string): StreetType;
	findUpperStreetType(arg0: string, arg1: string): StreetType;
	clearUpper(): void;
	allStreetTypes(): Iterator;
	updateId(arg0: number, arg1: number): void;
	toString(): string;
	getClass(): Class;
}
declare var StreetTypeFactory:
{
	new (value?: any): StreetTypeFactory;
	(): any;
	(value: any): any;
	prototype: StreetTypeFactory;
}
interface TpegInfo
{
	addTpegReference(arg0: TpegReference): void;
	getTpegReference(arg0: number): TpegReference;
	allTpegReferences(): Iterator;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TpegInfo:
{
	new (value?: any): TpegInfo;
	(): any;
	(value: any): any;
	prototype: TpegInfo;
}
interface DomainX
{
	getName(): string;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var DomainX:
{
	new (value?: any): DomainX;
	(): any;
	(value: any): any;
	prototype: DomainX;
}
interface MapObjectAssociationKernel
{
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var MapObjectAssociationKernel:
{
	new (value?: any): MapObjectAssociationKernel;
	(): any;
	(value: any): any;
	prototype: MapObjectAssociationKernel;
}
interface ConditionKernel
{
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var ConditionKernel:
{
	new (value?: any): ConditionKernel;
	(): any;
	(value: any): any;
	prototype: ConditionKernel;
}
interface NavStrandKernel
{
	getNavLinkIds(): List;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var NavStrandKernel:
{
	new (value?: any): NavStrandKernel;
	(): any;
	(value: any): any;
	prototype: NavStrandKernel;
}
interface LinkKernel
{
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isBridge(): boolean;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	isUrban(): boolean;
	getLinkProductBoundaryOverrides(): Set;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	getGeometrySource(): number;
	isDetailedCity(): boolean;
	getShape(): List;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	getRightAlternateNamedPlaceIds(): Set;
	getLeftAlternateNamedPlaceIds(): Set;
	getLinkPvid(): number;
	makeFlat(): FlatLink;
	isAligned(): boolean;
	getMapEdgeId(): number;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	hasAdasHeight(): boolean;
	getLinkStats(): LinkStats;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getExtendedAttributes(): Set;
}
declare var LinkKernel:
{
	new (value?: any): LinkKernel;
	(): any;
	(value: any): any;
	prototype: LinkKernel;
}
interface NodeKernel
{
	makeFlat(): FlatNode;
	getPoint(): GeoPoint;
	isAligned(): boolean;
	getNodePvid(): number;
	getMapEdgeId(): number;
	getNodeElevation(): NodeElevation;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getExtendedAttributes(): Set;
}
declare var NodeKernel:
{
	new (value?: any): NodeKernel;
	(): any;
	(value: any): any;
	prototype: NodeKernel;
}
interface FaceKernel
{
	getFacePvid(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var FaceKernel:
{
	new (value?: any): FaceKernel;
	(): any;
	(value: any): any;
	prototype: FaceKernel;
}
interface PoiCartoKernel
{
	getCartoId(): number;
	getPoiId(): number;
	getPoiIsBuilding(): boolean;
	getCartoFeatureSubTypePublishCode(): CartoFeatureSubTypePublishValue;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var PoiCartoKernel:
{
	new (value?: any): PoiCartoKernel;
	(): any;
	(value: any): any;
	prototype: PoiCartoKernel;
}
interface FaceLinkKernel
{
	getFaceId(): number;
	getLinkId(): number;
	isInverted(): boolean;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var FaceLinkKernel:
{
	new (value?: any): FaceLinkKernel;
	(): any;
	(value: any): any;
	prototype: FaceLinkKernel;
}
interface AdminPlaceKernel
{
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getParentId(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	getTimeZone(): string;
	getAdminLevel(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var AdminPlaceKernel:
{
	new (value?: any): AdminPlaceKernel;
	(): any;
	(value: any): any;
	prototype: AdminPlaceKernel;
}
interface CartoFeatureKernel
{
	getAttachedFiles(): Set;
	getRegions(): Set;
	makeFlat(): FlatCartoFeature;
	getNamedPlaceId(): number;
	getDisplayClass(): string;
	getCartoPvid(): number;
	getValidUnnamedSource(): number;
	getNamedPlaceType(): string;
	isGroupedStructure(): boolean;
	isSpecialCaseProtected(): boolean;
	getTmcCodes(): Set;
	getEnteredCartoFeatureSubTypes(): Set;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getExtendedAttributes(): Set;
}
declare var CartoFeatureKernel:
{
	new (value?: any): CartoFeatureKernel;
	(): any;
	(value: any): any;
	prototype: CartoFeatureKernel;
}
interface CountryKernel
{
	getIsoCode(): string;
	getAltSpanningLevel(): number;
	getEbuCode(): string;
	getNppoiAtMaxMinus1(): boolean;
	isFullGeometry(): boolean;
	getPhonePrefix(): string;
	getClipAdminLevel(): number;
	getLanguageCode(): string;
	getDescription(): string;
	getUnitOfMeasure(): string;
	getMaxAdminLevel(): number;
	getAdminLevelFeatureType(): number;
	getCurrencyPrecision(): number;
	getCurrencyType(): string;
	getHouseNumberFormat(): string;
	getPhoneCountryCode(): string;
	getSpeedLimitUnit(): string;
	getDrivingSide(): string;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getParentId(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	getTimeZone(): string;
	getAdminLevel(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var CountryKernel:
{
	new (value?: any): CountryKernel;
	(): any;
	(value: any): any;
	prototype: CountryKernel;
}
interface SignKernel
{
	getDataSource(): number;
	getMultiNavPvid(): number;
	getFlatDestinations(): List;
	getOriginatingNavLinkId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var SignKernel:
{
	new (value?: any): SignKernel;
	(): any;
	(value: any): any;
	prototype: SignKernel;
}
interface NavNodeKernel
{
	getNodeId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var NavNodeKernel:
{
	new (value?: any): NavNodeKernel;
	(): any;
	(value: any): any;
	prototype: NavNodeKernel;
}
interface RoadLinkKernel
{
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	getNavLinkId(): number;
	isValidUnnamed(): boolean;
	getAddressRangeType(): number;
	getLeftAddressRange(): AddressRange;
	getRightAddressRange(): AddressRange;
	getRoadNameId(): number;
	getRefRoadLinkId(): number;
	getRoadLinkPvid(): number;
	getNameSource(): number;
	isExitName(): boolean;
	isExplicatable(): boolean;
	isJunctionName(): boolean;
	isPostalName(): boolean;
	isCommonName(): boolean;
	isScenicName(): boolean;
	isStaleName(): boolean;
	isVanityName(): boolean;
	isBicycleRouteName(): boolean;
	getAttrNameStatus(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var RoadLinkKernel:
{
	new (value?: any): RoadLinkKernel;
	(): any;
	(value: any): any;
	prototype: RoadLinkKernel;
}
interface PointOfInterestKernel
{
	getAddress(): string;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isPrivate(): boolean;
	getAttributes(): Set;
	getStreetSide(): string;
	getPoiPvid(): number;
	getLinkPoint(): GeoPoint;
	getPercentFromRef(): number;
	getAddressFormat(): string;
	getDataSource(): number;
	getAttachedFiles(): Set;
	getAllActualAddress(): Set;
	getAllFullHouseNumber(): Set;
	getAllParsedActualAddress(): Set;
	isLongHaul(): boolean;
	isChanged(): boolean;
	getNGValChangeMessage(): string;
	getNGValMoveMessage(): string;
	isChangeStatus(): boolean;
	getDisplayPoint(): GeoPoint;
	getChainId(): number;
	getLocationScore(): number;
	getPlaceScore(): number;
	getCalculatedLevel(): number;
	getNextReviewDate(): number;
	getPhoneNumber(): string;
	isNationalImportance(): boolean;
	isInVicinity(): boolean;
	isLongHaulBatch(): boolean;
	getLongHaulManual(): string;
	getActualAddress(): FlatPointOfInterestText;
	getThirdPartyData(): Set;
	getNotes(): List;
	getParsedActualAddress(): FlatPOIParsedAddress;
	getActualAddressTransliterations(): Set;
	getContacts(): Set;
	getProtectedId(): string;
	getFullHouseNumber(): FlatPointOfInterestText;
	makeFlat(): FlatPointOfInterest;
	getFlatParents(): Set;
	getFlatChildren(): Set;
	getRoadLinkId(): number;
	getVanityCityIds(): Set;
	getNamedPlaceId(): number;
	getNamedPlaceType(): string;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var PointOfInterestKernel:
{
	new (value?: any): PointOfInterestKernel;
	(): any;
	(value: any): any;
	prototype: PointOfInterestKernel;
}
interface CompositeRoadFeatureKernel
{
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
}
declare var CompositeRoadFeatureKernel:
{
	new (value?: any): CompositeRoadFeatureKernel;
	(): any;
	(value: any): any;
	prototype: CompositeRoadFeatureKernel;
}
interface StreetTypeKernel
{
	getLanguageCode(): string;
	getOfficialStreetType(): string;
	getFullSpelling(): string;
	getUsages(): Set;
	getAbbreviation(): string;
	getTransliterations(): Set;
	usageBasedOnAttachmentAndSyntax(arg0: boolean, arg1: boolean): StreetTypeUsage;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var StreetTypeKernel:
{
	new (value?: any): StreetTypeKernel;
	(): any;
	(value: any): any;
	prototype: StreetTypeKernel;
}
interface PostalAreaKernel
{
	getNamedPlacePvid(): number;
	getPostalCode(): string;
	getCountryId(): number;
	getNamedPlaceId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var PostalAreaKernel:
{
	new (value?: any): PostalAreaKernel;
	(): any;
	(value: any): any;
	prototype: PostalAreaKernel;
}
interface ZoneKernel
{
	getType(): string;
	getAdminPlaceId(): number;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	getIncludedRegions(): Set;
	getExcludedRegions(): Set;
	getZoneDetails(): Set;
	getUserCode(): string;
	kernelType(): Class;
	makeFlat(): FlatZone;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var ZoneKernel:
{
	new (value?: any): ZoneKernel;
	(): any;
	(value: any): any;
	prototype: ZoneKernel;
}
interface ComboKernel
{
	getFlatComboValues(): List;
	getDomainComboId(): number;
	getRuleResult(): RuleResult;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var ComboKernel:
{
	new (value?: any): ComboKernel;
	(): any;
	(value: any): any;
	prototype: ComboKernel;
}
interface DomainKernel
{
	get(arg0: number): Element;
	get(arg0: any): Element;
	get(arg0: string): Element;
	getName(): string;
	contains(arg0: any): boolean;
	contains(arg0: number): boolean;
	contains(arg0: string): boolean;
	getElementType(): string;
	getPublishedName(): string;
	getDomainType(): string;
	getValueType(): DomainValueType;
	getPublishedValueType(): DomainValueType;
	getShortName(): string;
	getLongName(): string;
	getElements(): List;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var DomainKernel:
{
	new (value?: any): DomainKernel;
	(): any;
	(value: any): any;
	prototype: DomainKernel;
}
interface DomainComboKernel
{
	getName(): string;
	getShortName(): string;
	getDomainTemplates(): List;
	getLongName(): string;
	getDefaultRuleResult(): RuleResult;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var DomainComboKernel:
{
	new (value?: any): DomainComboKernel;
	(): any;
	(value: any): any;
	prototype: DomainComboKernel;
}
interface CartoLinkKernel
{
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	getLinkId(): number;
	isLineOfControl(): boolean;
	getCartoId(): number;
	kernelType(): Class;
	getProductAdminId(): number;
	makeFlat(): FlatCartoLink;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var CartoLinkKernel:
{
	new (value?: any): CartoLinkKernel;
	(): any;
	(value: any): any;
	prototype: CartoLinkKernel;
}
interface CartoFaceKernel
{
	isLongHaul(): boolean;
	getHeight(): number;
	getGroundClearance(): number;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	getFaceId(): number;
	getCartoId(): number;
	kernelType(): Class;
	makeFlat(): FlatCartoFace;
	getBuildingPatternCode(): string;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var CartoFaceKernel:
{
	new (value?: any): CartoFaceKernel;
	(): any;
	(value: any): any;
	prototype: CartoFaceKernel;
}
interface RoadPointKernel
{
	getLanguage(): string;
	getRoutingSide(): string;
	getRoutingPoint(): GeoPoint;
	getAddressFormat(): string;
	getRoadPointPvid(): number;
	getAddressedRoadLinkId(): number;
	getAddressedSide(): string;
	getAddressType(): number;
	getDataSource(): string;
	getHouseNumber(): string;
	getBuildingUnitName(): string;
	getUnitName(): string;
	getLevelName(): string;
	getParentRoadPointId(): number;
	getTransliterations(): Set;
	getRoutingNavLinkId(): number;
	getDisplayPoint(): GeoPoint;
	getSourceType(): number;
	makeFlat(): FlatRoadPoint;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var RoadPointKernel:
{
	new (value?: any): RoadPointKernel;
	(): any;
	(value: any): any;
	prototype: RoadPointKernel;
}
interface PostalAreaAdminPlaceKernel
{
	getPostalAreaId(): number;
	getAdminPlaceId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var PostalAreaAdminPlaceKernel:
{
	new (value?: any): PostalAreaAdminPlaceKernel;
	(): any;
	(value: any): any;
	prototype: PostalAreaAdminPlaceKernel;
}
interface PostalAreaZoneKernel
{
	getPostalAreaId(): number;
	getZoneId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var PostalAreaZoneKernel:
{
	new (value?: any): PostalAreaZoneKernel;
	(): any;
	(value: any): any;
	prototype: PostalAreaZoneKernel;
}
interface ZoneAdminPlaceKernel
{
	getAdminPlaceId(): number;
	getZoneId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var ZoneAdminPlaceKernel:
{
	new (value?: any): ZoneAdminPlaceKernel;
	(): any;
	(value: any): any;
	prototype: ZoneAdminPlaceKernel;
}
interface PoiAssocKernel
{
	getPoiAssocDetails(): Set;
	getAssocPvid(): number;
	getAssocType(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var PoiAssocKernel:
{
	new (value?: any): PoiAssocKernel;
	(): any;
	(value: any): any;
	prototype: PoiAssocKernel;
}
interface FeaturePointKernel
{
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var FeaturePointKernel:
{
	new (value?: any): FeaturePointKernel;
	(): any;
	(value: any): any;
	prototype: FeaturePointKernel;
}
interface AnnotationKernel
{
	getAttachedFiles(): Set;
	getAdminPlaceId(): number;
	getGeoPoint(): GeoPoint;
	getDisplayClass(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var AnnotationKernel:
{
	new (value?: any): AnnotationKernel;
	(): any;
	(value: any): any;
	prototype: AnnotationKernel;
}
interface NavLaneKernel
{
	getType(): LaneType;
	getNavLinkId(): number;
	getHeight(): number;
	getNavLanePvid(): number;
	getCenterDividerMarker(): DividerMarkerType;
	getLaneDirection(): LaneDirectionType;
	getLaneNumber(): number;
	makeFlat(): FlatNavLane;
	getAccessBits(): number;
	getDirectionCategoryMarker(): EnumSet;
	getWidth(): number;
	getSpeed(): number;
	getLaneDividerMarker(): DividerMarkerType;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	getLaneFormingEnding(): LaneFormingEnding;
	isAccessMotorcycles(): boolean;
	getLaneCrossingRestrictionType(): LaneCrossingRestrictionType;
	getLaneDirectionOverrideType(): LaneDirectionOverrideType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var NavLaneKernel:
{
	new (value?: any): NavLaneKernel;
	(): any;
	(value: any): any;
	prototype: NavLaneKernel;
}
interface LaneStrandKernel
{
	getConditionId(): number;
	getLaneStrandPvid(): number;
	getLaneStrandElements(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var LaneStrandKernel:
{
	new (value?: any): LaneStrandKernel;
	(): any;
	(value: any): any;
	prototype: LaneStrandKernel;
}
interface UnvalidatedChangeKernel
{
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUser(): string;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var UnvalidatedChangeKernel:
{
	new (value?: any): UnvalidatedChangeKernel;
	(): any;
	(value: any): any;
	prototype: UnvalidatedChangeKernel;
}
interface ViaAreaKernel
{
	getViaAreaType(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var ViaAreaKernel:
{
	new (value?: any): ViaAreaKernel;
	(): any;
	(value: any): any;
	prototype: ViaAreaKernel;
}
interface VirtualConnectionKernel
{
	getDataSource(): number;
	getAdminPlaceId(): number;
	getRefNodeId(): number;
	getNRefNodeId(): number;
	getTimeOverride(): number;
	getConnectionType(): number;
	getStairsTraversal(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var VirtualConnectionKernel:
{
	new (value?: any): VirtualConnectionKernel;
	(): any;
	(value: any): any;
	prototype: VirtualConnectionKernel;
}
interface ViaAreaPoiLinkKernel
{
	getLinkId(): number;
	getAssociationId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var ViaAreaPoiLinkKernel:
{
	new (value?: any): ViaAreaPoiLinkKernel;
	(): any;
	(value: any): any;
	prototype: ViaAreaPoiLinkKernel;
}
interface ViaAreaRLLinkKernel
{
	getLinkId(): number;
	getAssociationId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var ViaAreaRLLinkKernel:
{
	new (value?: any): ViaAreaRLLinkKernel;
	(): any;
	(value: any): any;
	prototype: ViaAreaRLLinkKernel;
}
interface TopologySegmentKernel
{
	getNavLinkIds(): Set;
	getTopologySegmentPvid(): number;
	getFirstNavNodeId(): number;
	getLastNavNodeId(): number;
	getTopologySegmentNavLinks(): List;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var TopologySegmentKernel:
{
	new (value?: any): TopologySegmentKernel;
	(): any;
	(value: any): any;
	prototype: TopologySegmentKernel;
}
interface GuidancePointToCartoAssociationKernel
{
	guidancePointId(): number;
	cartoId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var GuidancePointToCartoAssociationKernel:
{
	new (value?: any): GuidancePointToCartoAssociationKernel;
	(): any;
	(value: any): any;
	prototype: GuidancePointToCartoAssociationKernel;
}
interface DistanceMarkerToRoadLinkAssociationKernel
{
	distanceMarkerId(): number;
	roadLinkId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var DistanceMarkerToRoadLinkAssociationKernel:
{
	new (value?: any): DistanceMarkerToRoadLinkAssociationKernel;
	(): any;
	(value: any): any;
	prototype: DistanceMarkerToRoadLinkAssociationKernel;
}
interface GuidancePointToPoiAssociationKernel
{
	guidancePointId(): number;
	poiId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var GuidancePointToPoiAssociationKernel:
{
	new (value?: any): GuidancePointToPoiAssociationKernel;
	(): any;
	(value: any): any;
	prototype: GuidancePointToPoiAssociationKernel;
}
interface GuidancePointToMOAssociationKernel
{
	guidancePointId(): number;
	moId(): number;
	getMapObjectType(): MapObjectType;
	getMapObjAttrType(): AttributeType;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var GuidancePointToMOAssociationKernel:
{
	new (value?: any): GuidancePointToMOAssociationKernel;
	(): any;
	(value: any): any;
	prototype: GuidancePointToMOAssociationKernel;
}
interface NaturalGuidanceLinkToMOAssociationKernel
{
	gpMOAssocId(): number;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
}
declare var NaturalGuidanceLinkToMOAssociationKernel:
{
	new (value?: any): NaturalGuidanceLinkToMOAssociationKernel;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkToMOAssociationKernel;
}
interface ViaAreaToRoadLinkAssociationKernel
{
	getRoadLinkId(): number;
	getViaAreaId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var ViaAreaToRoadLinkAssociationKernel:
{
	new (value?: any): ViaAreaToRoadLinkAssociationKernel;
	(): any;
	(value: any): any;
	prototype: ViaAreaToRoadLinkAssociationKernel;
}
interface NaturalGuidanceLinkToPoiAssociationKernel
{
	gpPoiAssocId(): number;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
}
declare var NaturalGuidanceLinkToPoiAssociationKernel:
{
	new (value?: any): NaturalGuidanceLinkToPoiAssociationKernel;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkToPoiAssociationKernel;
}
interface ViaAreaToPoiAssociationKernel
{
	getPoiId(): number;
	getViaAreaId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var ViaAreaToPoiAssociationKernel:
{
	new (value?: any): ViaAreaToPoiAssociationKernel;
	(): any;
	(value: any): any;
	prototype: ViaAreaToPoiAssociationKernel;
}
interface NaturalGuidanceLinkToCartoAssociationKernel
{
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	gpCartoAssocId(): number;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
}
declare var NaturalGuidanceLinkToCartoAssociationKernel:
{
	new (value?: any): NaturalGuidanceLinkToCartoAssociationKernel;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkToCartoAssociationKernel;
}
interface GuidancePointFeaturePointKernel
{
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var GuidancePointFeaturePointKernel:
{
	new (value?: any): GuidancePointFeaturePointKernel;
	(): any;
	(value: any): any;
	prototype: GuidancePointFeaturePointKernel;
}
interface DistanceMarkerFeaturePointKernel
{
	getLanguageCode(): string;
	getDistanceValue(): string;
	getVerified(): DmVerified;
	getUnitOfMeasure(): SystemOfMeasurement;
	getTransliterations(): Set;
	getDirectionOnSign(): DirectionOnSign;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var DistanceMarkerFeaturePointKernel:
{
	new (value?: any): DistanceMarkerFeaturePointKernel;
	(): any;
	(value: any): any;
	prototype: DistanceMarkerFeaturePointKernel;
}
interface RailwayCrossingFeaturePointKernel
{
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var RailwayCrossingFeaturePointKernel:
{
	new (value?: any): RailwayCrossingFeaturePointKernel;
	(): any;
	(value: any): any;
	prototype: RailwayCrossingFeaturePointKernel;
}
interface Conflict
{
	getChildKernel(): Kernel;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var Conflict:
{
	new (value?: any): Conflict;
	(): any;
	(value: any): any;
	prototype: Conflict;
}
interface LinearElement
{
	length(): double;
	edge(): GeoEdge;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
}
declare var LinearElement:
{
	new (value?: any): LinearElement;
	(): any;
	(value: any): any;
	prototype: LinearElement;
}
interface Strand
{
	index(arg0: GeoPoint): number;
	add(arg0: LinearElement): void;
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	length(): double;
	concat(arg0: Strand): void;
	replace(arg0: GeoPoint, arg1: GeoPoint, arg2: Strand): void;
	elementAt(arg0: GeoPoint): LinearElement;
	elements(): List;
	pointAt(arg0: double): GeoPoint;
	isStrand(arg0: List): boolean;
	makeOneStrand(arg0: Collection, arg1: LinearElement): Strand;
	makeOneStrand(arg0: Collection): Strand;
	points(): GeoPoint;
	isClosed(): boolean;
	edge(): GeoEdge;
	hasStrandProperties(arg0: Collection): boolean;
	makePreSortedStrand(arg0: List): Strand;
	isStrandMixed(arg0: List): boolean;
	isNodeAttachedWithAllElement(arg0: GeoPoint, arg1: List): boolean;
	offsetAt(arg0: GeoPoint): double;
	makeDirectedStrands(arg0: Collection): List;
	substrand(arg0: GeoPoint, arg1: GeoPoint): Strand;
	discardBefore(arg0: GeoPoint): Strand;
	sameEndPoints(arg0: Strand): boolean;
	discardAfter(arg0: GeoPoint): Strand;
	isValidPoint(arg0: GeoPoint): boolean;
	isEndPoint(arg0: GeoPoint): boolean;
	isAddable(arg0: LinearElement): boolean;
	isConcatable(arg0: Strand): boolean;
	elementIndexAt(arg0: GeoPoint): number;
	sameOrientation(arg0: LinearElement): boolean;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	makeStrands(arg0: Collection): List;
	getClass(): Class;
}
declare var Strand:
{
	new (value?: any): Strand;
	(): any;
	(value: any): any;
	prototype: Strand;
}
interface FlatLinkProductBoundaryOverride
{
	equals(arg0: any): boolean;
	toString(): string;
	isUrban(): boolean;
	setDetailedCity(arg0: boolean): void;
	setUrban(arg0: boolean): void;
	getAdminPlaceId(): number;
	isDetailedCity(): boolean;
	setAdminPlaceId(arg0: number): void;
	clearState(): void;
	getClass(): Class;
}
declare var FlatLinkProductBoundaryOverride:
{
	new (value?: any): FlatLinkProductBoundaryOverride;
	(): any;
	(value: any): any;
	prototype: FlatLinkProductBoundaryOverride;
}
interface GeoSimplePolygon
{
	equals(arg0: any): boolean;
	toString(): string;
	contains(arg0: GeoShape): boolean;
	reverse(): void;
	reversed(): boolean;
	intersects(arg0: GeoShape): boolean;
	area(): double;
	enclaves(): number;
	exteriorBoundary(): List;
	enclaveBoundary(arg0: number): List;
	minPoint(): GeoPoint;
	orientedArea(): double;
	interiorPoint(arg0: GeoPoint): boolean;
	points(): List;
	invariant(): boolean;
	boundaryAsPoints(): List;
	perimeter(): double;
	touches(arg0: GeoShape): boolean;
	sameShape(arg0: GeoShape): boolean;
	geodeticSystem(): string;
	intersection(arg0: GeoShape): Set;
	connected(): boolean;
	edges(): List;
	mbr(): GeoRectangle;
	boundary(): List;
	containsPoint(arg0: GeoPoint): boolean;
	distance(arg0: GeoShape): double;
	orientation(): number;
	center(): GeoPoint;
	onBoundary(arg0: GeoPoint): boolean;
	northMost(): GeoPoint;
	westMost(): GeoPoint;
	eastMost(): GeoPoint;
	southMost(): GeoPoint;
	getClass(): Class;
}
declare var GeoSimplePolygon:
{
	new (value?: any): GeoSimplePolygon;
	(): any;
	(value: any): any;
	prototype: GeoSimplePolygon;
}
interface LaneAttribute
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): LaneAttribute;
	clone(): any;
	getValue(): number;
	setValue(arg0: number): void;
	getType(): LaneAttributeType;
	getLaneSetType(): LaneSetType;
	getLaneMask(): LaneMask;
	setLaneSetType(arg0: LaneSetType): void;
	setLaneMask(arg0: number): void;
	setLaneMask(arg0: LaneMask): void;
	getLaneDirection(): LaneDirectionType;
	setType(arg0: LaneAttributeType): void;
	setLaneDirection(arg0: LaneDirectionType): void;
	getClass(): Class;
}
declare var LaneAttribute:
{
	new (value?: any): LaneAttribute;
	(): any;
	(value: any): any;
	prototype: LaneAttribute;
}
interface MapContextPartition
{
	removeNode(arg0: Node): void;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	addLaneStrand(arg0: LaneStrand): void;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	indexFace(arg0: Face): void;
	unindexFace(arg0: Face): void;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: Node): boolean;
	isIncompleteNode(arg0: NavNode): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	partialIterator(): Iterator;
	cartoFaceIterator(): Iterator;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	findRoadPoint(arg0: RoadLink): Set;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointIterator(): Iterator;
	featurePointSize(arg0: FeaturePointType): number;
	featurePointSize(): number;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	mapObjectAssociationSize(): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	addAnnotation(arg0: Annotation): void;
	removeNavLink(arg0: NavLink): void;
	addNavLink(arg0: NavLink): void;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	mapContext(): MapContext;
	addRoadLink(arg0: RoadLink): void;
	removeRoadLink(arg0: RoadLink): void;
	indexLink(arg0: Link): void;
	unindexLink(arg0: Link): void;
	addFace(arg0: Face): void;
	removeFace(arg0: Face): void;
	addFaceLink(arg0: FaceLink): void;
	removeFaceLink(arg0: FaceLink): void;
	indexFaceLink(arg0: FaceLink): void;
	unindexFaceLink(arg0: FaceLink): void;
	addNode(arg0: Node): void;
	indexNode(arg0: Node): void;
	unindexNode(arg0: Node): void;
	indexNavLink(arg0: NavLink): void;
	unindexNavLink(arg0: NavLink): void;
	addNavNode(arg0: NavNode): void;
	removeNavNode(arg0: NavNode): void;
	indexNavNode(arg0: NavNode): void;
	unindexNavNode(arg0: NavNode): void;
	addNavStrand(arg0: NavStrand): void;
	removeNavStrand(arg0: NavStrand): void;
	indexNavStrand(arg0: NavStrand): void;
	unindexNavStrand(arg0: NavStrand): void;
	indexRoadLink(arg0: RoadLink): void;
	unindexRoadLink(arg0: RoadLink): void;
	removeSign(arg0: Sign): void;
	indexSign(arg0: Sign): void;
	unindexSign(arg0: Sign): void;
	removeCartoFeature(arg0: CartoFeature): void;
	indexCartoFeature(arg0: CartoFeature): void;
	unindexCartoFeature(arg0: CartoFeature): void;
	addPoiCarto(arg0: PoiCarto): void;
	removePoiCarto(arg0: PoiCarto): void;
	unindexPoiCarto(arg0: PoiCarto): void;
	indexPoiCarto(arg0: PoiCarto): void;
	removePoi(arg0: PointOfInterest): void;
	indexPoi(arg0: PointOfInterest): void;
	unindexPoi(arg0: PointOfInterest): void;
	addPoiAssoc(arg0: PoiAssoc): void;
	removePoiAssoc(arg0: PoiAssoc): void;
	indexPoiAssoc(arg0: PoiAssoc): void;
	unindexPoiAssoc(arg0: PoiAssoc): void;
	addCondition(arg0: Condition): void;
	removeCondition(arg0: Condition): void;
	indexCondition(arg0: Condition): void;
	unindexCondition(arg0: Condition): void;
	addCrf(arg0: CompositeRoadFeature): void;
	removeCrf(arg0: CompositeRoadFeature): void;
	indexCrf(arg0: CompositeRoadFeature): void;
	unindexCrf(arg0: CompositeRoadFeature): void;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	removePostalArea(arg0: PostalArea): void;
	indexPostalArea(arg0: PostalArea): void;
	unindexPostalArea(arg0: PostalArea): void;
	removeZone(arg0: Zone): void;
	indexZone(arg0: Zone): void;
	unindexZone(arg0: Zone): void;
	addValidationException(arg0: ValidationException): void;
	removeValidationException(arg0: ValidationException): void;
	indexValidationException(arg0: ValidationException): void;
	unindexValidationException(arg0: ValidationException): void;
	findPartials(arg0: number): Set;
	addCartoLink(arg0: CartoLink): void;
	removeCartoLink(arg0: CartoLink): void;
	indexCartoLink(arg0: CartoLink): void;
	unindexCartoLink(arg0: CartoLink): void;
	addCartoFace(arg0: CartoFace): void;
	removeCartoFace(arg0: CartoFace): void;
	indexCartoFace(arg0: CartoFace): void;
	unindexCartoFace(arg0: CartoFace): void;
	addRoadPoint(arg0: RoadPoint): void;
	removeRoadPoint(arg0: RoadPoint): void;
	indexRoadPoint(arg0: RoadPoint): void;
	unindexRoadPoint(arg0: RoadPoint): void;
	addPostalAreaZone(arg0: PostalAreaZone): void;
	removePostalAreaZone(arg0: PostalAreaZone): void;
	indexPostalAreaZone(arg0: PostalAreaZone): void;
	unindexPostalAreaZone(arg0: PostalAreaZone): void;
	addPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	removePostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	indexPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	unindexPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	addZoneAdminPlace(arg0: ZoneAdminPlace): void;
	removeZoneAdminPlace(arg0: ZoneAdminPlace): void;
	indexZoneAdminPlace(arg0: ZoneAdminPlace): void;
	unindexZoneAdminPlace(arg0: ZoneAdminPlace): void;
	addFeaturePoint(arg0: FeaturePoint): void;
	removeFeaturePoint(arg0: FeaturePoint): void;
	indexFeaturePoint(arg0: FeaturePoint): void;
	unindexFeaturePoint(arg0: FeaturePoint): void;
	addMapObjectAssociation(arg0: MapObjectAssociation): void;
	removeMapObjectAssociation(arg0: MapObjectAssociation): void;
	indexMapObjectAssociation(arg0: MapObjectAssociation): void;
	unindexMapObjectAssociation(arg0: MapObjectAssociation): void;
	removeAnnotation(arg0: Annotation): void;
	indexAnnotation(arg0: Annotation): void;
	unindexAnnotation(arg0: Annotation): void;
	addNavLane(arg0: NavLane): void;
	removeNavLane(arg0: NavLane): void;
	indexNavLane(arg0: NavLane): void;
	unindexNavLane(arg0: NavLane): void;
	removeLaneStrand(arg0: LaneStrand): void;
	indexLaneStrand(arg0: LaneStrand): void;
	unindexLaneStrand(arg0: LaneStrand): void;
	addUnvalidatedChange(arg0: UnvalidatedChange): void;
	removeUnvalidatedChange(arg0: UnvalidatedChange): void;
	indexUnvalidatedChange(arg0: UnvalidatedChange): void;
	unindexUnvalidatedChange(arg0: UnvalidatedChange): void;
	updateAnnotation(arg0: Annotation): void;
	updateCartoFace(arg0: CartoFace): void;
	updateCartoFeature(arg0: CartoFeature): void;
	updateCartoLink(arg0: CartoLink): void;
	updateCompositeRoadFeature(arg0: CompositeRoadFeature): void;
	updateCondition(arg0: Condition): void;
	updateFace(arg0: Face): void;
	updateFaceLink(arg0: FaceLink): void;
	updateFeaturePoint(arg0: FeaturePoint): void;
	updateLaneStrand(arg0: LaneStrand): void;
	updateLink(arg0: Link): void;
	updateMapObjectAssociation(arg0: MapObjectAssociation): void;
	updateNavLane(arg0: NavLane): void;
	updateNavLink(arg0: NavLink): void;
	updateNavNode(arg0: NavNode): void;
	updateNavStrand(arg0: NavStrand): void;
	updateNode(arg0: Node): void;
	updatePoiAssoc(arg0: PoiAssoc): void;
	updatePoiCarto(arg0: PoiCarto): void;
	updatePointOfInterest(arg0: PointOfInterest): void;
	updatePostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	updatePostalArea(arg0: PostalArea): void;
	updatePostalAreaZone(arg0: PostalAreaZone): void;
	updateRoadLink(arg0: RoadLink): void;
	updateRoadPoint(arg0: RoadPoint): void;
	updateSign(arg0: Sign): void;
	updateValidationException(arg0: ValidationException): void;
	updateZoneAdminPlace(arg0: ZoneAdminPlace): void;
	updateZone(arg0: Zone): void;
	addViaArea(arg0: ViaArea): void;
	removeViaArea(arg0: ViaArea): void;
	updateViaArea(arg0: ViaArea): void;
	indexViaArea(arg0: ViaArea): void;
	unindexViaArea(arg0: ViaArea): void;
	addViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	removeViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	updateViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	indexViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	unindexViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	addViaAreaRLLink(arg0: ViaAreaRLLink): void;
	removeViaAreaRLLink(arg0: ViaAreaRLLink): void;
	updateViaAreaRLLink(arg0: ViaAreaRLLink): void;
	indexViaAreaRLLink(arg0: ViaAreaRLLink): void;
	unindexViaAreaRLLink(arg0: ViaAreaRLLink): void;
	addVirtualConnection(arg0: VirtualConnection): void;
	removeVirtualConnection(arg0: VirtualConnection): void;
	updateVirtualConnection(arg0: VirtualConnection): void;
	indexVirtualConnection(arg0: VirtualConnection): void;
	unindexVirtualConnection(arg0: VirtualConnection): void;
	addTopologySegment(arg0: TopologySegment): void;
	removeTopologySegment(arg0: TopologySegment): void;
	indexTopologySegment(arg0: TopologySegment): void;
	unindexTopologySegment(arg0: TopologySegment): void;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	addLink(arg0: Link): void;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	removeLink(arg0: Link): void;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
}
declare var MapContextPartition:
{
	new (value?: any): MapContextPartition;
	(): any;
	(value: any): any;
	prototype: MapContextPartition;
}
interface Type
{
	toString(): string;
	compareTo(arg0: any): number;
	code(): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var Type:
{
	new (value?: any): Type;
	(): any;
	(value: any): any;
	prototype: Type;
}
interface RuleResult
{
	toString(): string;
	valueOf(arg0: string): RuleResult;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RuleResult:
{
	new (value?: any): RuleResult;
	(): any;
	(value: any): any;
	prototype: RuleResult;
}
interface RuleInfo
{
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getRuleCode(): string;
	getStatus(): string;
	getRuleDescription(): string;
	getRuleName(): string;
	getSeverity(): string;
	getRepairNote(): string;
	getDocLink(): string;
	getLeEnabled(): boolean;
	getRuleClassName(): string;
	getBatchClassName(): string;
	getAccessorName(): string;
	getTargetClassName(): string;
	getMetadataKey(): string;
	getDeltaValidations(): Set;
	getVersion(): number;
}
declare var RuleInfo:
{
	new (value?: any): RuleInfo;
	(): any;
	(value: any): any;
	prototype: RuleInfo;
}
interface MapContextProxy
{
	isIncompleteAdminPlace(arg0: AdminPlace): boolean;
	getPVID(arg0: MapFeature): number;
	getSpatialIndex(): SpatialIndexExtension;
	getStackedComponents(arg0: GeoPoint): Collection;
	inScope(arg0: Kernel): boolean;
	getGovernmentCodes(arg0: MapFeature): Set;
	getCartoFeatureSubTypeHelper(): CartoFeatureSubTypeHelper;
	newRouter(arg0: LinkNavigator): NavLinkRouter;
	newRouter(): NavLinkRouter;
	newMapNavigator(): MapNavigator;
	newDefaultNavigator(): Navigator;
	mapNavigator(): MapNavigator;
	getDistanceGraph(arg0: GraphGenerator): DistanceGraph;
	getMapObjectFinder(): MapObjectFinder;
	getIsoCodeVsCountry(): Map;
	getNGNameManager(): NaturalGuidanceNameManager;
	isIncompleteNode(arg0: NavNode): boolean;
	isIncompleteNode(arg0: Node): boolean;
	getPrepositionManager(): PrepositionManager;
	mapContext(): MapContext;
	metadata(): Metadata;
	getComponent(arg0: Class): any;
	addComponent(arg0: Class, arg1: any): void;
	addComponent(arg0: Class): void;
	createComponent(arg0: Class): any;
}
declare var MapContextProxy:
{
	new (value?: any): MapContextProxy;
	(): any;
	(value: any): any;
	prototype: MapContextProxy;
}
interface ValidationResult
{
	toString(): string;
	exceptions(): Set;
	summary(): ValidationSummary;
	getOriginatingDelta(): Delta;
	setOriginatingDelta(arg0: Delta): void;
	loggedOkResult(): boolean;
	setLogOkResult(arg0: boolean): void;
	failedRules(): Set;
	addAppliedRule(arg0: Rule): void;
	addResult(arg0: Array<Kernel>, arg1: Rule, arg2: RuleResult, arg3: string, arg4: Calendar, arg5: string, arg6: string): RuleResult;
	addResult(arg0: Array<Kernel>, arg1: Rule, arg2: RuleResult, arg3: string, arg4: Calendar): RuleResult;
	addResult(arg0: RuleOutcome, arg1: ParameterizedRule, arg2: Calendar): void;
	addResultForRDS(arg0: Array<Kernel>, arg1: Rule, arg2: RuleResult, arg3: string, arg4: Calendar): RuleResult;
	addFailedRules(arg0: string): void;
	getOKResults(): Set;
	getUndecidableResults(): Set;
	cleanOKUndecidableResults(): void;
	getExceptionCounts(): Map;
	exceptionCount(arg0: Rule): number;
	logRuleFailure(arg0: Rule, arg1: any, arg2: RuntimeException, arg3: number, arg4: Logger): void;
	isGlobalPartialException(arg0: Array<Kernel>, arg1: Rule, arg2: RuleResult): boolean;
	isGlobalPartialExceptionForRDS(arg0: Array<Kernel>, arg1: Rule, arg2: RuleResult): boolean;
	extractAndAddResult(arg0: any, arg1: Rule, arg2: RuleResult, arg3: string, arg4: Calendar): RuleResult;
	numberOfRulesApplied(): number;
	getUnvalidatedChangeCandidates(): Set;
	getValidationExceptionsWithDecidableOutcomes(): Set;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var ValidationResult:
{
	new (value?: any): ValidationResult;
	(): any;
	(value: any): any;
	prototype: ValidationResult;
}
interface DomainValueType
{
	toString(): string;
	getValue(): string;
	getEnum(arg0: string): DomainValueType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DomainValueType:
{
	new (value?: any): DomainValueType;
	(): any;
	(value: any): any;
	prototype: DomainValueType;
}
interface PlainText
{
	equals(arg0: any): boolean;
	toString(): string;
	getIsoCode(): string;
	getIsArea(): string;
	setIsArea(arg0: string): void;
	getIsExit(): string;
	setIsExit(arg0: string): void;
	getIsMeta(): string;
	setIsMeta(arg0: string): void;
	setIsoCode(arg0: string): void;
	getIsPoi(): string;
	setIsPoi(arg0: string): void;
	getIsSign(): string;
	setIsSign(arg0: string): void;
	getIsStreet(): string;
	setIsStreet(arg0: string): void;
	setPid(arg0: number): void;
	setSuperCategoryText(arg0: string): void;
	getLanguageCode(): string;
	setText(arg0: string): void;
	getText(): string;
	setLanguageCode(arg0: string): void;
	getSuperCategoryText(): string;
	getPhonLang(): string;
	getPid(): number;
	setPhonLang(arg0: string): void;
	getClass(): Class;
}
declare var PlainText:
{
	new (value?: any): PlainText;
	(): any;
	(value: any): any;
	prototype: PlainText;
}
interface PhoneticTextData
{
	equals(arg0: any): boolean;
	toString(): string;
	addGeoQualifier(arg0: GeoQualifier): void;
	getPhoneticText(): PhoneticText;
	getGeoQualifiers(): List;
	getClass(): Class;
}
declare var PhoneticTextData:
{
	new (value?: any): PhoneticTextData;
	(): any;
	(value: any): any;
	prototype: PhoneticTextData;
}
interface PhoneticText
{
	equals(arg0: any): boolean;
	toString(): string;
	setFid(arg0: number): void;
	setPid(arg0: number): void;
	setPhoneticString(arg0: string): void;
	setPreferredFlag(arg0: string): void;
	setPhoneticType(arg0: string): void;
	getTranscriptionType(): string;
	setTranscriptionType(arg0: string): void;
	getFid(): number;
	getPid(): number;
	getPhoneticType(): string;
	getPreferredFlag(): string;
	getPhoneticString(): string;
	getClass(): Class;
}
declare var PhoneticText:
{
	new (value?: any): PhoneticText;
	(): any;
	(value: any): any;
	prototype: PhoneticText;
}
interface CountryPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	country(): CountryState;
	area(): AreaState;
	areaId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CountryPacket:
{
	new (value?: any): CountryPacket;
	(): any;
	(value: any): any;
	prototype: CountryPacket;
}
interface FlatCountry
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	getIsoCode(): string;
	equivalent(arg0: CountryKernel, arg1: CountryKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	getAltSpanningLevel(): number;
	setClipAdminLevel(arg0: number): void;
	getEbuCode(): string;
	getNppoiAtMaxMinus1(): boolean;
	isFullGeometry(): boolean;
	getPhonePrefix(): string;
	setIsoCode(arg0: string): void;
	setAdminLevelFeatureType(arg0: Array<number>): void;
	setUnitOfMeasure(arg0: string): void;
	setMaxAdminLevel(arg0: number): void;
	setCurrencyPrecision(arg0: number): void;
	setDrivingSide(arg0: string): void;
	setCurrencyType(arg0: string): void;
	setPhoneCountryCode(arg0: string): void;
	setEbuCode(arg0: string): void;
	setAltSpanningLevel(arg0: number): void;
	setSpeedLimitUnit(arg0: string): void;
	setHouseNumberFormat(arg0: string): void;
	setNppoiAtMaxMinus1(arg0: boolean): void;
	setFullGeometry(arg0: boolean): void;
	setPhonePrefix(arg0: string): void;
	getClipAdminLevel(): number;
	getLanguageCode(): string;
	setState(arg0: Kernel): void;
	getDescription(): string;
	setDescription(arg0: Array<string>): void;
	getUnitOfMeasure(): string;
	setLanguageCode(arg0: string): void;
	kernelType(): Class;
	cleared(): boolean;
	getMaxAdminLevel(): number;
	getAdminLevelFeatureType(): number;
	getCurrencyPrecision(): number;
	getCurrencyType(): string;
	getHouseNumberFormat(): string;
	getPhoneCountryCode(): string;
	getSpeedLimitUnit(): string;
	getDrivingSide(): string;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equivalent(arg0: AdminPlaceKernel, arg1: AdminPlaceKernel): boolean;
	isValidUnnamed(): boolean;
	setParentId(arg0: number): void;
	setAdminCode(arg0: string): void;
	setTmcAreaCodes(arg0: Map): void;
	setAdminPlaceDetails(arg0: Set): void;
	setGovernmentCode(arg0: number): void;
	setAdminLevel(arg0: number): void;
	setValidUnnamed(arg0: boolean): void;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getParentId(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	setDummyAdmin(arg0: boolean): void;
	setAdminShort(arg0: number): void;
	setNamedPlacePvid(arg0: number): void;
	setDstObserved(arg0: string): void;
	setDstStartDay(arg0: number): void;
	setDstStartWeekday(arg0: number): void;
	setDstStartMonth(arg0: number): void;
	setDstStartTime(arg0: number): void;
	setDstEndDay(arg0: number): void;
	setDstEndWeekday(arg0: number): void;
	setDstEndMonth(arg0: number): void;
	setDstEndTime(arg0: number): void;
	getTimeZone(): string;
	setTimeZone(arg0: string): void;
	getAdminLevel(): number;
	setRegions(arg0: Set): void;
	id(): number;
	setNames(arg0: Set): void;
	collectionToString(arg0: Collection): string;
	intArrayToString(arg0: Array<number>): string;
	stringArrayToString(arg0: Array<string>): string;
	setId(arg0: number): void;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatCountry:
{
	new (value?: any): FlatCountry;
	(): any;
	(value: any): any;
	prototype: FlatCountry;
}
interface AreaPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	area(): AreaState;
	areaCode(): number;
	featureType(): number;
	adminId(): number;
	parentId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AreaPacket:
{
	new (value?: any): AreaPacket;
	(): any;
	(value: any): any;
	prototype: AreaPacket;
}
interface FlatAdminPlace
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: AdminPlaceKernel, arg1: AdminPlaceKernel): boolean;
	isValidUnnamed(): boolean;
	setParentId(arg0: number): void;
	setAdminCode(arg0: string): void;
	setTmcAreaCodes(arg0: Map): void;
	setAdminPlaceDetails(arg0: Set): void;
	setGovernmentCode(arg0: number): void;
	setAdminLevel(arg0: number): void;
	setValidUnnamed(arg0: boolean): void;
	setState(arg0: Kernel): void;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getParentId(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	setDummyAdmin(arg0: boolean): void;
	setAdminShort(arg0: number): void;
	setNamedPlacePvid(arg0: number): void;
	setDstObserved(arg0: string): void;
	setDstStartDay(arg0: number): void;
	setDstStartWeekday(arg0: number): void;
	setDstStartMonth(arg0: number): void;
	setDstStartTime(arg0: number): void;
	setDstEndDay(arg0: number): void;
	setDstEndWeekday(arg0: number): void;
	setDstEndMonth(arg0: number): void;
	setDstEndTime(arg0: number): void;
	getTimeZone(): string;
	setTimeZone(arg0: string): void;
	getAdminLevel(): number;
	kernelType(): Class;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	setRegions(arg0: Set): void;
	id(): number;
	setNames(arg0: Set): void;
	collectionToString(arg0: Collection): string;
	intArrayToString(arg0: Array<number>): string;
	stringArrayToString(arg0: Array<string>): string;
	setId(arg0: number): void;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatAdminPlace:
{
	new (value?: any): FlatAdminPlace;
	(): any;
	(value: any): any;
	prototype: FlatAdminPlace;
}
interface CartoPathPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	baseNameState(): BaseNameState;
	cartoPvid(): number;
	cartoId(): number;
	featureType(): number;
	getDataPacketType(): DataPacketType;
	displayClass(): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CartoPathPacket:
{
	new (value?: any): CartoPathPacket;
	(): any;
	(value: any): any;
	prototype: CartoPathPacket;
}
interface FlatPoiCarto
{
	toString(arg0: PoiCartoKernel): string;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: PoiCartoKernel, arg1: PoiCartoKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setPoiId(arg0: number): void;
	setState(arg0: Kernel): void;
	setPoiIsBuilding(arg0: boolean): void;
	setCartoFeatureSubTypePublishCode(arg0: CartoFeatureSubTypePublishValue): void;
	setId(arg0: number): void;
	setCartoId(arg0: number): void;
	getCartoId(): number;
	kernelType(): Class;
	cleared(): boolean;
	getPoiId(): number;
	getPoiIsBuilding(): boolean;
	getCartoFeatureSubTypePublishCode(): CartoFeatureSubTypePublishValue;
	makeFlat(): FlatKernel;
	makeFlat(): FlatPoiCarto;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatPoiCarto:
{
	new (value?: any): FlatPoiCarto;
	(): any;
	(value: any): any;
	prototype: FlatPoiCarto;
}
interface EstimatesPacket
{
	accept(arg0: PacketVisitor): void;
	counts(): EstimatesState;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var EstimatesPacket:
{
	new (value?: any): EstimatesPacket;
	(): any;
	(value: any): any;
	prototype: EstimatesPacket;
}
interface PartialLinkPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	bridge(): boolean;
	tunnel(): boolean;
	urban(): boolean;
	detailedCity(): boolean;
	geometrySource(): number;
	d96LinkId(): number;
	refNodeId(): number;
	nrefNodeId(): number;
	points(): List;
	getLinkId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var PartialLinkPacket:
{
	new (value?: any): PartialLinkPacket;
	(): any;
	(value: any): any;
	prototype: PartialLinkPacket;
}
interface ExonymPacket
{
	name(): string;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	nameType(): string;
	langCode(): string;
	areaId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var ExonymPacket:
{
	new (value?: any): ExonymPacket;
	(): any;
	(value: any): any;
	prototype: ExonymPacket;
}
interface FlatNavNode
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: NavNodeKernel, arg1: NavNodeKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	kernelType(): Class;
	getNodeId(): number;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	clearState(): void;
	setNodeId(arg0: number): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatNavNode:
{
	new (value?: any): FlatNavNode;
	(): any;
	(value: any): any;
	prototype: FlatNavNode;
}
interface PolygonPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	facePvid(): number;
	polygonId(): number;
	compFeatureState(): CompFeatureState;
	links(): Set;
	featureId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var PolygonPacket:
{
	new (value?: any): PolygonPacket;
	(): any;
	(value: any): any;
	prototype: PolygonPacket;
}
interface LinkAdminPostalPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	leftAdmin(): number;
	rightAdmin(): number;
	getLinkId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var LinkAdminPostalPacket:
{
	new (value?: any): LinkAdminPostalPacket;
	(): any;
	(value: any): any;
	prototype: LinkAdminPostalPacket;
}
interface LinkZonesPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	leftZones(): Set;
	rightZones(): Set;
	getLinkId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var LinkZonesPacket:
{
	new (value?: any): LinkZonesPacket;
	(): any;
	(value: any): any;
	prototype: LinkZonesPacket;
}
interface LinkStatePacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	getDataPacketType(): DataPacketType;
	linkStateId(): number;
	linkState(): LinkState;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var LinkStatePacket:
{
	new (value?: any): LinkStatePacket;
	(): any;
	(value: any): any;
	prototype: LinkStatePacket;
}
interface PoiPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	flatPoi(): FlatPoiState;
	getDataPacketType(): DataPacketType;
	poiData(): PoiDataState;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var PoiPacket:
{
	new (value?: any): PoiPacket;
	(): any;
	(value: any): any;
	prototype: PoiPacket;
}
interface FaceFeaturePacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	polygonId(): number;
	compFeatureState(): CompFeatureState;
	pathId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var FaceFeaturePacket:
{
	new (value?: any): FaceFeaturePacket;
	(): any;
	(value: any): any;
	prototype: FaceFeaturePacket;
}
interface FlatSign
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: SignKernel, arg1: SignKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setOriginatingNavLinkId(arg0: number): void;
	setState(arg0: Kernel): void;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getFlatDestinations(): List;
	getOriginatingNavLinkId(): number;
	setFlatDestinations(arg0: List): void;
	setId(arg0: number): void;
	kernelType(): Class;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	makeFlat(): FlatSign;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatSign:
{
	new (value?: any): FlatSign;
	(): any;
	(value: any): any;
	prototype: FlatSign;
}
interface IncompleteNodePacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	getLinkIds(): Set;
	getNodeId(): number;
	setLinkIds(arg0: Set): void;
	addLinkId(arg0: number): void;
	setNodeId(arg0: number): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var IncompleteNodePacket:
{
	new (value?: any): IncompleteNodePacket;
	(): any;
	(value: any): any;
	prototype: IncompleteNodePacket;
}
interface FlatNavStrand
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: NavStrandKernel, arg1: NavStrandKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	getNavLinkIds(): List;
	setNavLinkIds(arg0: List): void;
	kernelType(): Class;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatNavStrand:
{
	new (value?: any): FlatNavStrand;
	(): any;
	(value: any): any;
	prototype: FlatNavStrand;
}
interface FlatCondition
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: ConditionKernel, arg1: ConditionKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	getConditionType(): number;
	setState(arg0: Kernel): void;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	setNavStrandId(arg0: number): void;
	setConditionModifiers(arg0: Set): void;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	setAttachedFiles(arg0: Set): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	cleared(): boolean;
	setDateTimeModifiers(arg0: List): void;
	invertConditionDirection(): void;
	setConditionType(arg0: number): void;
	invert(): void;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var FlatCondition:
{
	new (value?: any): FlatCondition;
	(): any;
	(value: any): any;
	prototype: FlatCondition;
}
interface FlatFace
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	getFacePvid(): number;
	equivalent(arg0: FaceKernel, arg1: FaceKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setFacePvid(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	cleared(): boolean;
	appendCollection(arg0: StringBuffer, arg1: string, arg2: number, arg3: Iterator): void;
	equalSets(arg0: Set, arg1: Set): boolean;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var FlatFace:
{
	new (value?: any): FlatFace;
	(): any;
	(value: any): any;
	prototype: FlatFace;
}
interface FlatFaceLink
{
	toString(arg0: FaceLinkKernel): string;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: FaceLinkKernel, arg1: FaceLinkKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setFaceId(arg0: number): void;
	setLinkId(arg0: number): void;
	getFaceId(): number;
	getLinkId(): number;
	kernelType(): Class;
	cleared(): boolean;
	invert(): void;
	isInverted(): boolean;
	makeFlat(): FlatKernel;
	setInverted(arg0: boolean): void;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatFaceLink:
{
	new (value?: any): FlatFaceLink;
	(): any;
	(value: any): any;
	prototype: FlatFaceLink;
}
interface FlatRoadLink
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	id(): number;
	setExplicatable(arg0: boolean): void;
	setCommonName(arg0: boolean): void;
	setPostalName(arg0: boolean): void;
	setStaleName(arg0: boolean): void;
	setVanityName(arg0: boolean): void;
	setJunctionName(arg0: boolean): void;
	setExitName(arg0: boolean): void;
	setBicycleRouteName(arg0: boolean): void;
	setAttrNameStatus(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: RoadLinkKernel, arg1: RoadLinkKernel): boolean;
	getNavLinkId(): number;
	isValidUnnamed(): boolean;
	setRoadLinkPvid(arg0: number): void;
	setRefRoadLinkId(arg0: number): void;
	setRoadNameId(arg0: number): void;
	setValidUnnamed(arg0: boolean): void;
	getAddressRangeType(): number;
	getLeftAddressRange(): AddressRange;
	getRightAddressRange(): AddressRange;
	valueEquivalent(arg0: RoadLinkKernel, arg1: RoadLinkKernel): boolean;
	getRoadNameId(): number;
	getRefRoadLinkId(): number;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	kernelType(): Class;
	cleared(): boolean;
	setScenicName(arg0: boolean): void;
	invert(): void;
	setNavLinkId(arg0: number): void;
	makeFlat(): FlatKernel;
	getRoadLinkPvid(): number;
	getNameSource(): number;
	setLeftAddressRange(arg0: AddressRange): void;
	setRightAddressRange(arg0: AddressRange): void;
	setAddressRangeType(arg0: number): void;
	setNameSource(arg0: number): void;
	isExitName(): boolean;
	isExplicatable(): boolean;
	isJunctionName(): boolean;
	isPostalName(): boolean;
	isCommonName(): boolean;
	isScenicName(): boolean;
	isStaleName(): boolean;
	isVanityName(): boolean;
	isBicycleRouteName(): boolean;
	getAttrNameStatus(): number;
	mergeAndFixupRoadLink(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatRoadLink:
{
	new (value?: any): FlatRoadLink;
	(): any;
	(value: any): any;
	prototype: FlatRoadLink;
}
interface LongHaulData
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	isLongHaul(): boolean;
	setLongHaul(arg0: boolean): void;
	isLongHaulBatch(): boolean;
	getLongHaulManual(): string;
	setLongHaulManual(arg0: string): void;
	setFeatureId(arg0: number): void;
	setLongHaulBatch(arg0: boolean): void;
	featureId(): number;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var LongHaulData:
{
	new (value?: any): LongHaulData;
	(): any;
	(value: any): any;
	prototype: LongHaulData;
}
interface CrfNodeCompletionPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	compositeRoadFeatureId(): number;
	landmarkLinkId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CrfNodeCompletionPacket:
{
	new (value?: any): CrfNodeCompletionPacket;
	(): any;
	(value: any): any;
	prototype: CrfNodeCompletionPacket;
}
interface FlatRuleInfo
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	getRuleCode(): string;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	dependents(): Set;
	getStatus(): string;
	getRuleDescription(): string;
	getRuleName(): string;
	getSeverity(): string;
	getRepairNote(): string;
	getDocLink(): string;
	getLeEnabled(): boolean;
	getRuleClassName(): string;
	getBatchClassName(): string;
	getAccessorName(): string;
	getTargetClassName(): string;
	getMetadataKey(): string;
	getDeltaValidations(): Set;
	getVersion(): number;
	setRuleName(arg0: string): void;
	setRuleDescription(arg0: string): void;
	setSeverity(arg0: string): void;
	setRepairNote(arg0: string): void;
	setDocLink(arg0: string): void;
	setStatus(arg0: string): void;
	setLeEnabled(arg0: boolean): void;
	setRuleClassName(arg0: string): void;
	setBatchClassName(arg0: string): void;
	setAccessorName(arg0: string): void;
	setTargetClassName(arg0: string): void;
	setMetadataKey(arg0: string): void;
	setRuleCode(arg0: string): void;
	setDeltaValidations(arg0: Set): void;
	setVersion(arg0: number): void;
	kernelType(): Class;
	cleared(): boolean;
	makeFlat(): FlatRuleInfo;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatRuleInfo:
{
	new (value?: any): FlatRuleInfo;
	(): any;
	(value: any): any;
	prototype: FlatRuleInfo;
}
interface StreetType
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	getLanguageCode(): string;
	setState(arg0: Kernel): void;
	getOfficialStreetType(): string;
	setOfficialStreetType(arg0: string): void;
	getFullSpelling(): string;
	getUsages(): Set;
	setFullSpelling(arg0: string): void;
	getAbbreviation(): string;
	setAbbreviation(arg0: string): void;
	setId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	setLanguageCode(arg0: string): void;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getTransliterations(): Set;
	setTransliterations(arg0: Set): void;
	cleared(): boolean;
	setUsages(arg0: Set): void;
	isStateEqual(arg0: StreetTypeKernel): boolean;
	usageBasedOnAttachmentAndSyntax(arg0: boolean, arg1: boolean): StreetTypeUsage;
	areUsageStatesEqual(arg0: Set): boolean;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var StreetType:
{
	new (value?: any): StreetType;
	(): any;
	(value: any): any;
	prototype: StreetType;
}
interface FlatPostalArea
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: PostalAreaKernel, arg1: PostalAreaKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setState(arg0: Kernel): void;
	setState(arg0: PostalAreaKernel): void;
	getNamedPlacePvid(): number;
	setNamedPlacePvid(arg0: number): void;
	setPostalCode(arg0: string): void;
	setNamedPlaceId(arg0: number): void;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	getPostalCode(): string;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	getCountryId(): number;
	cleared(): boolean;
	setCountryId(arg0: number): void;
	makeFlat(): FlatKernel;
	getNamedPlaceId(): number;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var FlatPostalArea:
{
	new (value?: any): FlatPostalArea;
	(): any;
	(value: any): any;
	prototype: FlatPostalArea;
}
interface LinkPostalAreaPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	leftPostalAreaId(): number;
	rightPostalAreaId(): number;
	getLinkId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var LinkPostalAreaPacket:
{
	new (value?: any): LinkPostalAreaPacket;
	(): any;
	(value: any): any;
	prototype: LinkPostalAreaPacket;
}
interface SchemaVersionPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	schemaVersion(): string;
	setSchemaVersion(arg0: string): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var SchemaVersionPacket:
{
	new (value?: any): SchemaVersionPacket;
	(): any;
	(value: any): any;
	prototype: SchemaVersionPacket;
}
interface FlatDomain
{
	get(arg0: string): Element;
	get(arg0: number): Element;
	get(arg0: any): Element;
	toString(): string;
	getName(): string;
	contains(arg0: string): boolean;
	contains(arg0: number): boolean;
	contains(arg0: any): boolean;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	setName(arg0: string): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: DomainKernel, arg1: DomainKernel): boolean;
	setElementType(arg0: string): void;
	getElementType(): string;
	setPublishedName(arg0: string): void;
	setDomainType(arg0: string): void;
	getPublishedName(): string;
	getDomainType(): string;
	getValueType(): DomainValueType;
	setValueType(arg0: DomainValueType): void;
	setPublishedValueType(arg0: DomainValueType): void;
	getPublishedValueType(): DomainValueType;
	setState(arg0: Kernel): void;
	getShortName(): string;
	setShortName(arg0: string): void;
	setLongName(arg0: string): void;
	setElements(arg0: List): void;
	setId(arg0: number): void;
	getLongName(): string;
	kernelType(): Class;
	cleared(): boolean;
	getElements(): List;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatDomain:
{
	new (value?: any): FlatDomain;
	(): any;
	(value: any): any;
	prototype: FlatDomain;
}
interface FlatCombo
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	getFlatComboValues(): List;
	setDomainComboId(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: ComboKernel, arg1: ComboKernel): boolean;
	setState(arg0: Kernel): void;
	getDomainComboId(): number;
	setId(arg0: number): void;
	setRuleResult(arg0: RuleResult): void;
	getRuleResult(): RuleResult;
	kernelType(): Class;
	cleared(): boolean;
	setFlatComboValues(arg0: List): void;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatCombo:
{
	new (value?: any): FlatCombo;
	(): any;
	(value: any): any;
	prototype: FlatCombo;
}
interface FlatDomainCombo
{
	toString(): string;
	getName(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	setName(arg0: string): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: DomainComboKernel, arg1: DomainComboKernel): boolean;
	setState(arg0: Kernel): void;
	getShortName(): string;
	setShortName(arg0: string): void;
	getDomainTemplates(): List;
	setLongName(arg0: string): void;
	setId(arg0: number): void;
	getLongName(): string;
	kernelType(): Class;
	cleared(): boolean;
	setDefaultRuleResult(arg0: RuleResult): void;
	setDomainTemplates(arg0: List): void;
	getDefaultRuleResult(): RuleResult;
	getDomainTemplateIndex(arg0: number): number;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatDomainCombo:
{
	new (value?: any): FlatDomainCombo;
	(): any;
	(value: any): any;
	prototype: FlatDomainCombo;
}
interface FlatUnvalidatedChange
{
	toString(): string;
	toString(arg0: UnvalidatedChangeKernel): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	setTimestamp(arg0: string): void;
	setTimestamp(arg0: Calendar): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: UnvalidatedChangeKernel, arg1: UnvalidatedChangeKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	getUser(): string;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	setState(arg0: Kernel): void;
	setState(arg0: number, arg1: UnvalidatedChangeType, arg2: string, arg3: string, arg4: List, arg5: string, arg6: Calendar, arg7: UnvalidatedChangeStatus, arg8: Set, arg9: number): void;
	getTimestamp(): string;
	setId(arg0: number): void;
	getProjectName(): string;
	setRuleCode(arg0: string): void;
	kernelType(): Class;
	cleared(): boolean;
	setUnvalidatedChangeType(arg0: UnvalidatedChangeType): void;
	setClipLevelAdminPvids(arg0: Set): void;
	setUnvalidatedChangeStatus(arg0: UnvalidatedChangeStatus): void;
	setUnvalidatedMapObjectParts(arg0: List): void;
	setUser(arg0: string): void;
	setProjectName(arg0: string): void;
	makeFlat(): FlatKernel;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatUnvalidatedChange:
{
	new (value?: any): FlatUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: FlatUnvalidatedChange;
}
interface NameSourcePacket
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	setFeatureId(arg0: number): void;
	nameSource(): number;
	setNameSource(arg0: number): void;
	featureId(): number;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var NameSourcePacket:
{
	new (value?: any): NameSourcePacket;
	(): any;
	(value: any): any;
	prototype: NameSourcePacket;
}
interface PartialDelta
{
	accept(arg0: PacketVisitor): void;
	createUpdate(arg0: Kernel): PartialDelta;
	createAdd(arg0: Kernel): PartialDelta;
	createRemove(arg0: Kernel): PartialDelta;
	createRemove(arg0: number): PartialDelta;
	createRemove(arg0: number, arg1: Set): PartialDelta;
	getDataPacketType(): DataPacketType;
	makeCopy(): Delta;
	type(): Type;
	toString(): string;
	removed(): boolean;
	currentObject(): FlatKernel;
	created(): boolean;
	kernelId(): number;
	previousObject(): FlatKernel;
	inverse(): Delta;
	kernelType(): Class;
	hasSameIdentity(arg0: Delta): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	updated(): boolean;
	isNoop(): boolean;
	isIntegrated(): boolean;
	replacementIds(): Set;
	setReplacementIds(arg0: Set): void;
	replaced(): boolean;
	deepCopy(): Delta;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var PartialDelta:
{
	new (value?: any): PartialDelta;
	(): any;
	(value: any): any;
	prototype: PartialDelta;
}
interface PartialDeltaPrevVersion
{
	accept(arg0: PacketVisitor): void;
	createUpdate(arg0: Kernel): PartialDeltaPrevVersion;
	createAdd(arg0: Kernel): PartialDeltaPrevVersion;
	createAdd(arg0: number): PartialDeltaPrevVersion;
	createRemove(arg0: Kernel): PartialDeltaPrevVersion;
	createRemove(arg0: Kernel, arg1: Set): PartialDeltaPrevVersion;
	createTransientReplacement(arg0: number, arg1: Set): PartialDeltaPrevVersion;
	getDataPacketType(): DataPacketType;
	makeCopy(): Delta;
	type(): Type;
	toString(): string;
	removed(): boolean;
	currentObject(): FlatKernel;
	created(): boolean;
	kernelId(): number;
	previousObject(): FlatKernel;
	inverse(): Delta;
	kernelType(): Class;
	hasSameIdentity(arg0: Delta): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	updated(): boolean;
	isNoop(): boolean;
	isIntegrated(): boolean;
	replacementIds(): Set;
	setReplacementIds(arg0: Set): void;
	replaced(): boolean;
	deepCopy(): Delta;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var PartialDeltaPrevVersion:
{
	new (value?: any): PartialDeltaPrevVersion;
	(): any;
	(value: any): any;
	prototype: PartialDeltaPrevVersion;
}
interface UpdateNamePacket
{
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	setName(arg0: string): void;
	pvid(): number;
	setLanguageCode(arg0: string): void;
	languageCode(): string;
	setFeatureId(arg0: number): void;
	setPvid(arg0: number): void;
	featureId(): number;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var UpdateNamePacket:
{
	new (value?: any): UpdateNamePacket;
	(): any;
	(value: any): any;
	prototype: UpdateNamePacket;
}
interface NamedPlaceBoundaryPacket
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	facePvid(): number;
	polygonId(): number;
	compFeatureState(): CompFeatureState;
	cartoId(): number;
	linkIds(): Set;
	featureType(): number;
	d96PathId(): number;
	namedPlaceId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var NamedPlaceBoundaryPacket:
{
	new (value?: any): NamedPlaceBoundaryPacket;
	(): any;
	(value: any): any;
	prototype: NamedPlaceBoundaryPacket;
}
interface PolygonalCartoComponentPacket
{
	accept(arg0: PacketVisitor): void;
	facePvid(): number;
	compFeatureState(): CompFeatureState;
	linkIds(): Set;
	getCartoId(): number;
	getPolygonId(): number;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PolygonalCartoComponentPacket:
{
	new (value?: any): PolygonalCartoComponentPacket;
	(): any;
	(value: any): any;
	prototype: PolygonalCartoComponentPacket;
}
interface TpegReference
{
	accept(arg0: PacketVisitor): void;
	setTpegId(arg0: number): void;
	getUpdatedDate(): Date;
	setUpdatedDate(arg0: Date): void;
	getTpegId(): number;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TpegReference:
{
	new (value?: any): TpegReference;
	(): any;
	(value: any): any;
	prototype: TpegReference;
}
interface PropertiesPacket
{
	get(arg0: string): string;
	put(arg0: string, arg1: string): void;
	toString(): string;
	getProperties(): Properties;
	accept(arg0: PacketVisitor): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var PropertiesPacket:
{
	new (value?: any): PropertiesPacket;
	(): any;
	(value: any): any;
	prototype: PropertiesPacket;
}
interface AdditionalDataPacket
{
	get(arg0: Type): any;
	put(arg0: Type, arg1: any): void;
	toString(): string;
	getObject(): any;
	accept(arg0: PacketVisitor): void;
	containsKey(arg0: Type): boolean;
	getType(): Type;
	getMap(): Map;
	setObject(arg0: any): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AdditionalDataPacket:
{
	new (value?: any): AdditionalDataPacket;
	(): any;
	(value: any): any;
	prototype: AdditionalDataPacket;
}
interface FringePacket
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	mapObjectType(): string;
	mapObjectId(): number;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var FringePacket:
{
	new (value?: any): FringePacket;
	(): any;
	(value: any): any;
	prototype: FringePacket;
}
interface IncompleteAdminPacket
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: PacketVisitor): void;
	getAdminId(): number;
	getMissingChildIds(): Set;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var IncompleteAdminPacket:
{
	new (value?: any): IncompleteAdminPacket;
	(): any;
	(value: any): any;
	prototype: IncompleteAdminPacket;
}
interface DegradationValidationReferenceData
{
	accept(arg0: DegradationValidationVisitor): void;
	accept(arg0: PacketVisitor): void;
	getDataPacketType(): DataPacketType;
}
declare var DegradationValidationReferenceData:
{
	new (value?: any): DegradationValidationReferenceData;
	(): any;
	(value: any): any;
	prototype: DegradationValidationReferenceData;
}
interface FlatPostalAreaAdminPlace
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	setPostalAreaId(arg0: number): void;
	equivalent(arg0: PostalAreaAdminPlaceKernel, arg1: PostalAreaAdminPlaceKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	getPostalAreaId(): number;
	setState(arg0: Kernel): void;
	getAdminPlaceId(): number;
	setId(arg0: number): void;
	kernelType(): Class;
	cleared(): boolean;
	setAdminPlaceId(arg0: number): void;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatPostalAreaAdminPlace:
{
	new (value?: any): FlatPostalAreaAdminPlace;
	(): any;
	(value: any): any;
	prototype: FlatPostalAreaAdminPlace;
}
interface FlatPostalAreaZone
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	setPostalAreaId(arg0: number): void;
	equivalent(arg0: PostalAreaZoneKernel, arg1: PostalAreaZoneKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	getPostalAreaId(): number;
	setState(arg0: PostalAreaZoneKernel): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setZoneId(arg0: number): void;
	kernelType(): Class;
	getZoneId(): number;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatPostalAreaZone:
{
	new (value?: any): FlatPostalAreaZone;
	(): any;
	(value: any): any;
	prototype: FlatPostalAreaZone;
}
interface FlatZoneAdminPlace
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: ZoneAdminPlaceKernel, arg1: ZoneAdminPlaceKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setState(arg0: Kernel): void;
	getAdminPlaceId(): number;
	setId(arg0: number): void;
	setZoneId(arg0: number): void;
	kernelType(): Class;
	getZoneId(): number;
	cleared(): boolean;
	setAdminPlaceId(arg0: number): void;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatZoneAdminPlace:
{
	new (value?: any): FlatZoneAdminPlace;
	(): any;
	(value: any): any;
	prototype: FlatZoneAdminPlace;
}
interface FlatPoiAssoc
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: PoiAssocKernel, arg1: PoiAssocKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	getPoiAssocDetails(): Set;
	setPoiAssocDetails(arg0: Set): void;
	setAssocPvid(arg0: number): void;
	kernelType(): Class;
	cleared(): boolean;
	setAssocType(arg0: number): void;
	getAssocPvid(): number;
	getAssocType(): number;
	makeFlat(): FlatPoiAssoc;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatPoiAssoc:
{
	new (value?: any): FlatPoiAssoc;
	(): any;
	(value: any): any;
	prototype: FlatPoiAssoc;
}
interface FlatFeaturePointAbstr
{
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	setPoint(arg0: GeoPoint): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	getLinkId(): number;
	setFeaturePointPvid(arg0: number): void;
	setFeaturePointState(arg0: FeaturePointKernel): void;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	cleared(): boolean;
	isFeaturePointCleared(): boolean;
	clearFeaturePoint(): void;
	invert(): void;
	setLinkSide(arg0: LinkSide): void;
	getPoint(): GeoPoint;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	toString(): string;
	getClass(): Class;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	compositeKernelType(): CompositeKernelType;
	getDataPacketType(): DataPacketType;
}
declare var FlatFeaturePointAbstr:
{
	new (value?: any): FlatFeaturePointAbstr;
	(): any;
	(value: any): any;
	prototype: FlatFeaturePointAbstr;
}
interface FlatMapObjectAssociationAbstr
{
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	setMoaState(arg0: MapObjectAssociationKernel): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setSecondMapObjectId(arg0: number): void;
	cleared(): boolean;
	clearMoa(): void;
	isClearedMoa(): boolean;
	setFirstMapObjectId(arg0: number): void;
	setMapObjectAssociationPvid(arg0: number): void;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	toString(): string;
	getClass(): Class;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	getDataPacketType(): DataPacketType;
}
declare var FlatMapObjectAssociationAbstr:
{
	new (value?: any): FlatMapObjectAssociationAbstr;
	(): any;
	(value: any): any;
	prototype: FlatMapObjectAssociationAbstr;
}
interface FlatAnnotation
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	equivalent(arg0: AnnotationKernel, arg1: AnnotationKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: Kernel): void;
	getAttachedFiles(): Set;
	getAdminPlaceId(): number;
	setAttachedFiles(arg0: Set): void;
	kernelType(): Class;
	getGeoPoint(): GeoPoint;
	cleared(): boolean;
	setAdminPlaceId(arg0: number): void;
	setGeoPoint(arg0: GeoPoint): void;
	makeFlat(): FlatKernel;
	setDisplayClass(arg0: number): void;
	getDisplayClass(): number;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	id(): number;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	setNames(arg0: Set): void;
	collectionToString(arg0: Collection): string;
	intArrayToString(arg0: Array<number>): string;
	stringArrayToString(arg0: Array<string>): string;
	setId(arg0: number): void;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatAnnotation:
{
	new (value?: any): FlatAnnotation;
	(): any;
	(value: any): any;
	prototype: FlatAnnotation;
}
interface FlatLaneStrand
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	setLaneStrandPvid(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: LaneStrandKernel, arg1: LaneStrandKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setConditionId(arg0: number): void;
	setLaneStrandElements(arg0: Set): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	getConditionId(): number;
	getLaneStrandPvid(): number;
	getLaneStrandElements(): Set;
	kernelType(): Class;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	makeFlat(): FlatLaneStrand;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatLaneStrand:
{
	new (value?: any): FlatLaneStrand;
	(): any;
	(value: any): any;
	prototype: FlatLaneStrand;
}
interface FlatViaArea
{
	toString(): string;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: ViaAreaKernel, arg1: ViaAreaKernel): boolean;
	setViaAreaType(arg0: number): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	getViaAreaType(): number;
	kernelType(): Class;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatViaArea:
{
	new (value?: any): FlatViaArea;
	(): any;
	(value: any): any;
	prototype: FlatViaArea;
}
interface FlatVirtualConnection
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: VirtualConnectionKernel, arg1: VirtualConnectionKernel): boolean;
	setConnectionType(arg0: number): void;
	setNRefNodeId(arg0: number): void;
	setStairsTraversal(arg0: number): void;
	setTimeOverride(arg0: number): void;
	setRefNodeId(arg0: number): void;
	setState(arg0: Kernel): void;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getAdminPlaceId(): number;
	setId(arg0: number): void;
	getRefNodeId(): number;
	kernelType(): Class;
	cleared(): boolean;
	setAdminPlaceId(arg0: number): void;
	makeFlat(): FlatKernel;
	getNRefNodeId(): number;
	getTimeOverride(): number;
	getConnectionType(): number;
	getStairsTraversal(): number;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatVirtualConnection:
{
	new (value?: any): FlatVirtualConnection;
	(): any;
	(value: any): any;
	prototype: FlatVirtualConnection;
}
interface FlatViaAreaPoiLink
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: ViaAreaPoiLinkKernel, arg1: ViaAreaPoiLinkKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setAssociationId(arg0: number): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	getLinkId(): number;
	kernelType(): Class;
	getAssociationId(): number;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	makeFlat(): FlatViaAreaPoiLink;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatViaAreaPoiLink:
{
	new (value?: any): FlatViaAreaPoiLink;
	(): any;
	(value: any): any;
	prototype: FlatViaAreaPoiLink;
}
interface FlatViaAreaRLLink
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: ViaAreaRLLinkKernel, arg1: ViaAreaRLLinkKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setAssociationId(arg0: number): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	getLinkId(): number;
	kernelType(): Class;
	getAssociationId(): number;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	makeFlat(): FlatViaAreaRLLink;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatViaAreaRLLink:
{
	new (value?: any): FlatViaAreaRLLink;
	(): any;
	(value: any): any;
	prototype: FlatViaAreaRLLink;
}
interface FlatTopologySegment
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: TopologySegmentKernel, arg1: TopologySegmentKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setTopologySegmentPvid(arg0: number): void;
	setFirstNavNodeId(arg0: number): void;
	setLastNavNodeId(arg0: number): void;
	setTopologySegNavLinks(arg0: List): void;
	setStateFromXml(arg0: string): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	getNavLinkIds(): Set;
	setNavLinkIds(arg0: Set): void;
	getTopologySegmentPvid(): number;
	getFirstNavNodeId(): number;
	getLastNavNodeId(): number;
	getTopologySegmentNavLinks(): List;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	cleared(): boolean;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var FlatTopologySegment:
{
	new (value?: any): FlatTopologySegment;
	(): any;
	(value: any): any;
	prototype: FlatTopologySegment;
}
interface ScopeElementVisitor
{
	visitAdminScopeElement(arg0: AdminScopeElement): void;
	visitLinkScopeElement(arg0: LinkScopeElement): void;
	visitSpatialScopeElement(arg0: SpatialScopeElement): void;
	visitCrfScopeElement(arg0: CrfScopeElement): void;
	visitCartoScopeElement(arg0: CartoScopeElement): void;
	visitPostalScopeElement(arg0: PostalScopeElement): void;
	visitUniversalScopeElement(arg0: UniversalScopeElement): void;
}
declare var ScopeElementVisitor:
{
	new (value?: any): ScopeElementVisitor;
	(): any;
	(value: any): any;
	prototype: ScopeElementVisitor;
}
interface ExecutableQuery
{
	getAnnotations(arg0: DatasetConnection): OracleAnnotationAdapter;
	getCrfNavLinks(arg0: DatasetConnection): OracleCrfNavLinkAdapter;
	getFaces(arg0: DatasetConnection): OracleFaceAdapter;
	getSigns(arg0: DatasetConnection): OracleSignAdapter;
	getCrfs(arg0: DatasetConnection): OracleCrfAdapter;
	getCountries(arg0: DatasetConnection): OracleCountryAdapter;
	getBorderAdmins(arg0: DatasetConnection): OracleAdminPlaceAdapter;
	getAdminplaces(arg0: DatasetConnection): OracleAdminPlaceAdapter;
	getAdminTmcCodes(arg0: DatasetConnection): OracleAdminRdsTmcAdapter;
	getCartoFeatures(arg0: DatasetConnection): OracleCartoAdapter;
	getCartoTmcCodes(arg0: DatasetConnection): OracleCartoRdsTmcAdapter;
	getCartoFeatureSubTypes(arg0: DatasetConnection): OracleCartoFeatureSubTypeAdapter;
	getCartoLinkAssociations(arg0: DatasetConnection): OracleCartoLinkAdapter;
	getBasicFeatureNames(arg0: DatasetConnection): OracleFeatureNameAdapter;
	getRoadLinks(arg0: DatasetConnection): OracleRoadLinkAdapter;
	getRoadNames(arg0: DatasetConnection): OracleRoadNameAdapter;
	getNavNodes(arg0: DatasetConnection): OracleNavNodeAdapter;
	getNavStrands(arg0: DatasetConnection): OracleNavStrandAdapter;
	getConditions(arg0: DatasetConnection): OracleConditionAdapter;
	getConditionModifierText(arg0: DatasetConnection): OracleConditionModifierTextAdapter;
	getCrfNavNodes(arg0: DatasetConnection): OracleCrfNavNodeAdapter;
	getCartoFaceAssociations(arg0: DatasetConnection): OracleCartoFaceAdapter;
	populatePrimingTables(arg0: DatasetConnection): void;
	populateTemporaryTables(arg0: DatasetConnection): boolean;
	getFaceLinks(arg0: DatasetConnection): OracleFaceLinkAdapter;
	getIncompleteNodes(arg0: DatasetConnection): List;
	getIncompleteAdmins(arg0: DatasetConnection): List;
	getPoiAttributes(arg0: DatasetConnection): OraclePOIAttributeAdapter;
	getPoiCartos(arg0: DatasetConnection): OraclePOICartoAdapter;
	getPoiGraph(arg0: DatasetConnection): OraclePOIGraphAdapter;
	getPoiThirdPartyData(arg0: DatasetConnection): OraclePOIThirdPartyDataAdapter;
	getPoiText(arg0: DatasetConnection): OraclePOITextAdapter;
	getPoiContacts(arg0: DatasetConnection): OraclePoiContactAdapter;
	getStreetTypes(arg0: DatasetConnection): OracleStreetTypeAdapter;
	getPostalAreas(arg0: DatasetConnection): OraclePostalAreaAdapter;
	getExternalPostalInfos(arg0: DatasetConnection): OracleExternalPostalInfoAdapter;
	getExternalZipCityInfos(arg0: DatasetConnection): OracleExternalZipCityAdapter;
	getZones(arg0: DatasetConnection): OracleZoneAdapter;
	getGlobalCombos(arg0: DatasetConnection): OracleComboAdapter;
	getLocalCombos(arg0: DatasetConnection): OracleComboAdapter;
	getGlobalComboValues(arg0: DatasetConnection): OracleComboValueAdapter;
	getLocalComboValues(arg0: DatasetConnection): OracleComboValueAdapter;
	getDomains(arg0: DatasetConnection): OracleDomainAdapter;
	getGlobalDomainCombos(arg0: DatasetConnection): OracleDomainComboAdapter;
	getLocalDomainCombos(arg0: DatasetConnection): OracleDomainComboAdapter;
	getGlobalDomainComboTemplates(arg0: DatasetConnection): OracleDomainComboTemplateAdapter;
	getLocalDomainComboTemplates(arg0: DatasetConnection): OracleDomainComboTemplateAdapter;
	getDomainRanges(arg0: DatasetConnection): OracleDomainRangeAdapter;
	getDomainValues(arg0: DatasetConnection): OracleDomainValueAdapter;
	getDomainValueExonyms(arg0: DatasetConnection): OracleDomainValueExonymAdapter;
	getDomainValueExonymTrans(arg0: DatasetConnection): OracleDomainValueExonymTransAdapter;
	getRuleInfos(arg0: DatasetConnection): OracleRuleInfoAdapter;
	getUnvalidatedChanges(arg0: DatasetConnection): OracleUnvalidatedChangeAdapter;
	getValidationExceptions(arg0: DatasetConnection): OracleValidationExceptionAdapter;
	getTrafficReference(arg0: DatasetConnection): OracleTrafficReferenceAdapter;
	getScope(arg0: DatasetConnection): Scope;
	getFringeMapObjects(arg0: DatasetConnection): List;
	getFeatureFiles(arg0: DatasetConnection): OracleFeatureFileAdapter;
	getCurrentDbVersion(arg0: DatasetConnection): AdditionalDataPacket;
	getPlainText(arg0: DatasetConnection, arg1: PhoneticConfig): OraclePlainTextAdapter;
	getLangConvTable(arg0: DatasetConnection): OracleLangConvTableAdapter;
	getRoadPoints(arg0: DatasetConnection): OracleRoadPointAdapter;
	getPostalAreaAdminPlaces(arg0: DatasetConnection): OraclePostalAreaAdminPlaceAdapter;
	getPostalAreaZones(arg0: DatasetConnection): OraclePostalAreaZoneAdapter;
	getZoneAdminPlaces(arg0: DatasetConnection): OracleZoneAdminPlaceAdapter;
	getPoiAssocs(arg0: DatasetConnection): OraclePoiAssocAdapter;
	getFeaturePoints(arg0: DatasetConnection): CompositeDatabaseResultSetAdapter;
	getMapObjectAssociations(arg0: DatasetConnection): CompositeDatabaseResultSetAdapter;
	getNavLanes(arg0: DatasetConnection): OracleNavLaneAdapter;
	getLaneStrands(arg0: DatasetConnection): OracleLaneStrandAdapter;
	getStatisticalZones(arg0: DatasetConnection): OracleZoneAdapter;
	getStatisticalZoneFeatureNames(arg0: DatasetConnection): OracleFeatureNameAdapter;
	getPropagationDeltaDetails(arg0: DatasetConnection): AdditionalDataPacket;
	getViaAreas(arg0: DatasetConnection): OracleViaAreaAdapter;
	getViaAreaPoiLinks(arg0: DatasetConnection): OracleViaAreaPoiToLinkAdapter;
	getViaAreaRLLinks(arg0: DatasetConnection): OracleViaAreaRoadLinkToLinkAdapter;
	getVirtualConnection(arg0: DatasetConnection): OracleVirtualConnectionAdapter;
	getBasicHeightNodeElevation(arg0: DatasetConnection): OracleCvBasicHeightNodeElevationAdapter;
	getBasicHeightLinkStats(arg0: DatasetConnection): OracleCvBasicHeightLinkStatsAdapter;
	getDegradationValPoiIpd(arg0: DatasetConnection): OracleDegradationValidationPoiIpdAdapter;
	getDegradationValNamedPlacePoiPop(arg0: DatasetConnection): OracleDegradationValidationNamedPlacePoiPopAdapter;
	getDegradationValPoiCapitalIndicator(arg0: DatasetConnection): OracleDegradationValidationNamedPlacePoiCapAdapter;
	getDegradationValCarto(arg0: DatasetConnection): OracleDegradationValidationCartoAdapter;
	getDegradationValCartoAdmin(arg0: DatasetConnection): OracleDegradationValidationCartoAdminAdapter;
	getDegradationValOceanArea(arg0: DatasetConnection): OracleDegradationValidationOceanAreaAdapter;
	getDegradationValOceanAdmin(arg0: DatasetConnection): OracleDegradationValidationOceanAdminAdapter;
	getDegradationValPoiLoc(arg0: DatasetConnection): OracleDegradationValidationPoiLocAdapter;
	getDegradationValStackedPoint(arg0: DatasetConnection): OracleDegradationValidationStackedPointAdapter;
	getDegradationValDisputedFeature(arg0: DatasetConnection): OracleDegradationValidationDisputedFeatureAdapter;
	getDegradationValDisputedFeatureAdmin(arg0: DatasetConnection): OracleDegradationValidationDisputedFeatureAdminAdapter;
	getDegradationValBridgeTunnelEILink(arg0: DatasetConnection): OracleDegradationValidationBridgeTunnelEILinkAdapter;
	getVoiceCodeTable(arg0: DatasetConnection): OracleVoiceCodeTableAdapter;
	getGeoOverride(arg0: DatasetConnection): OracleGeoOverrideAdapter;
	getDegradationValCoverageIndicator(arg0: DatasetConnection): OracleDegradationValidationCovarageIndicatorAdapter;
	getDegradationValNavLink(arg0: DatasetConnection): OracleDegradationValidationNavLinkAdapter;
	getDegradationValidationPoiCarto3DLandmarks(arg0: DatasetConnection): OracleDegradationValidationPoiCarto3DLandmarksAdapter;
	getDegradationValidation3DLandmarksFiles(arg0: DatasetConnection): OracleDegradationValidation3DLandmarksFilesAdapter;
	getDegradationValidationFeatureName(arg0: DatasetConnection): OracleDegradationValidationFeatureNameAdapter;
	getDegradationValidationRDMCondition(arg0: DatasetConnection): OracleDegradationValidationRDMConditionAdapter;
	getDegradationValidationCartoFeatures(arg0: DatasetConnection): OracleDegradationValidationCartoFeatureAdapter;
	getDegradationValidationLTCCondition(arg0: DatasetConnection): OracleDegradationValidationLTCConditionAdapter;
	getDegradationValidationMOAssocGP(arg0: DatasetConnection): OracleDegradationValidationMoAssocGPAdapter;
	getTopologySegments(arg0: DatasetConnection): OracleTopologySegmentAdapter;
	getTopologySegNavLinks(arg0: DatasetConnection): OracleTopologySegNavLinkAdapter;
	getDegradationValNavLinkAttribute(arg0: DatasetConnection): OracleDegradationValidationNavLinkAttributeAdapter;
	getLinkHistory(arg0: DatasetConnection): OracleLinkHistoryAdapter;
	getRoadLinkHistory(arg0: DatasetConnection): OracleRoadLinkHistoryAdapter;
	getCartoLinkHistory(arg0: DatasetConnection): OracleCartoLinkHistoryAdapter;
	getFaceLinkHistory(arg0: DatasetConnection): OracleFaceLinkHistoryAdapter;
	getNavLinkHistory(arg0: DatasetConnection): OracleNavLinkHistoryAdapter;
	getChangeSequenceObject(arg0: DatasetConnection): OracleChangeSequenceObjectAdapter;
	getChangeReplacement(arg0: DatasetConnection): OracleChangeReplacementAdapter;
	getDegradationValLinkAligned(arg0: DatasetConnection): OracleDegradationValidationLinkAlignedAdapter;
	getOracleDegradationValidationRampedNavLink(arg0: DatasetConnection): OracleDegradationValidationRampedNavLinkAdapter;
	setLoadPremiumPois(arg0: boolean): void;
	loadPremiumPois(): boolean;
	getDateTimeModifiers(arg0: DatasetConnection): OracleDateTimeModifierAdapter;
	getConditionModifiers(arg0: DatasetConnection): OracleConditionModifierAdapter;
	getZoneDetails(arg0: DatasetConnection): OracleZoneDetailAdapter;
	getAdminPlaceDetails(arg0: DatasetConnection): OracleAdminPlaceDetailAdapter;
	getLinks(arg0: DatasetConnection): OracleLinkAdapter;
	getNodes(arg0: DatasetConnection): OracleNodeAdapter;
	getLaneStrandElements(arg0: DatasetConnection): OracleLaneStrandElementAdapter;
	getPoiAssocDetails(arg0: DatasetConnection): OraclePoiAssocDetailAdapter;
	getAdditionalData(arg0: DatasetConnection): AdditionalDataPacket;
	getNavLinks(arg0: DatasetConnection): OracleNavLinkAdapter;
	getExtendedAttributes(arg0: DatasetConnection): OracleExtendedAttributeAdapter;
	getLaneAttributes(arg0: DatasetConnection): OracleLaneAttributeAdapter;
	getTpegReference(arg0: DatasetConnection): OracleTpegReferenceAdapter;
	getPois(arg0: DatasetConnection): OraclePOIAdapter;
	getTrafficData(arg0: DatasetConnection): OracleTrafficDataAdapter;
	getPoiFlavour(arg0: DatasetConnection): OraclePoiFlavourAdapter;
	getGeoQualifier(arg0: DatasetConnection): OracleGeoQualifierAdapter;
	getPhoneticText(arg0: DatasetConnection): OraclePhoneticTextAdapter;
}
declare var ExecutableQuery:
{
	new (value?: any): ExecutableQuery;
	(): any;
	(value: any): any;
	prototype: ExecutableQuery;
}
interface Extent
{
	isIncluded(arg0: NodeKernel, arg1: Set, arg2: MapContext): boolean;
	getComposite(): CompositeExtent;
	getAdminIds(): Set;
	getMBR(): GeoRectangle;
}
declare var Extent:
{
	new (value?: any): Extent;
	(): any;
	(value: any): any;
	prototype: Extent;
}
interface RoadNameExtent
{
	isIncluded(arg0: NodeKernel, arg1: Set, arg2: MapContext): boolean;
	isTransBasename(): boolean;
	isCaseSensitive(): boolean;
	getAdminIds(): Set;
	getBasename(): string;
	getSuffix(): string;
	getStreetType(): string;
	getLanguageCode(): string;
	getPrefix(): string;
	toString(): string;
	getComposite(): CompositeExtent;
	getMBR(): GeoRectangle;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RoadNameExtent:
{
	new (value?: any): RoadNameExtent;
	(): any;
	(value: any): any;
	prototype: RoadNameExtent;
}
interface PhoneticConfig
{
	equals(arg0: any): boolean;
	toString(): string;
	getWordsToIgnore(): List;
	addWordToIgnore(arg0: WordToIgnore): void;
	addSuperCategoryConfig(arg0: SuperCategoryConfig): void;
	getClass(): Class;
}
declare var PhoneticConfig:
{
	new (value?: any): PhoneticConfig;
	(): any;
	(value: any): any;
	prototype: PhoneticConfig;
}
interface SyncType
{
	values(): SyncType;
	valueOf(arg0: string): SyncType;
	getType(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var SyncType:
{
	new (value?: any): SyncType;
	(): any;
	(value: any): any;
	prototype: SyncType;
}
interface SyncDescriptor
{
	spatialSyncElements(): Set;
	idBasedSyncElementMap(): Map;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SyncDescriptor:
{
	new (value?: any): SyncDescriptor;
	(): any;
	(value: any): any;
	prototype: SyncDescriptor;
}
interface FilterLevel
{
	values(): FilterLevel;
	valueOf(arg0: string): FilterLevel;
	getMapObjectTypes(): List;
	getQueryString(): string;
	fromString(arg0: string): FilterLevel;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var FilterLevel:
{
	new (value?: any): FilterLevel;
	(): any;
	(value: any): any;
	prototype: FilterLevel;
}
interface FlatManeuverPointFeaturePoint
{
	toString(): string;
	accept(arg0: FeaturePointTypeVisitor): void;
	equivalent(arg0: ManeuverPointFeaturePointKernel, arg1: ManeuverPointFeaturePointKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	isValidUnnamed(): boolean;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): FeaturePointType;
	setValidUnnamed(arg0: boolean): void;
	setNames(arg0: Set): void;
	getFeatureType(): number;
	getNames(): Set;
	kernelType(): Class;
	setFeaturePointState(arg0: FeaturePointKernel): void;
	isFeaturePointCleared(): boolean;
	clearFeaturePoint(): void;
	setFeatureType(arg0: number): void;
	isAutoGenerated(): boolean;
	setAutoGenerated(arg0: boolean): void;
	getPrepositionCodes(): Set;
	setPrepositionCodes(arg0: Set): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatManeuverPointFeaturePoint;
	getDataPacketType(): DataPacketType;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	setPoint(arg0: GeoPoint): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	getLinkId(): number;
	setFeaturePointPvid(arg0: number): void;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	cleared(): boolean;
	invert(): void;
	setLinkSide(arg0: LinkSide): void;
	getPoint(): GeoPoint;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatManeuverPointFeaturePoint:
{
	new (value?: any): FlatManeuverPointFeaturePoint;
	(): any;
	(value: any): any;
	prototype: FlatManeuverPointFeaturePoint;
}
interface DirectionOfTravel
{
	values(): DirectionOfTravel;
	valueOf(arg0: string): DirectionOfTravel;
	getNavLinkDotValue(): number;
	valueForDbValue(arg0: number): DirectionOfTravel;
	invert(arg0: DirectionOfTravel): DirectionOfTravel;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var DirectionOfTravel:
{
	new (value?: any): DirectionOfTravel;
	(): any;
	(value: any): any;
	prototype: DirectionOfTravel;
}
interface JdbcDatasetDescriptor
{
	toString(): string;
	getInstance(): string;
	getHost(): string;
	getPort(): string;
	dataSource(): string;
	url(): string;
	parseConnectionString(arg0: string): string;
	setFromReaderDescriptor(arg0: ReaderDescriptor): void;
	getForcedIsolationLevel(): number;
	driverName(): string;
	generateConnectionString(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string): string;
	setFromProperties(arg0: Properties): void;
	setFromString(arg0: string): void;
	userName(): string;
	setTimeout(arg0: number): void;
	password(): string;
	toTnsUrl(arg0: string, arg1: string): string;
	hidePasswordField(arg0: string): string;
	isValidConnectionString(arg0: string): boolean;
	parseConnectionUrlFor(arg0: string, arg1: GroupName): string;
	getTimeout(): number;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var JdbcDatasetDescriptor:
{
	new (value?: any): JdbcDatasetDescriptor;
	(): any;
	(value: any): any;
	prototype: JdbcDatasetDescriptor;
}
interface DatasetConnection
{
	close(): void;
	open(): boolean;
	setFetchSize(arg0: number): void;
	querySQL(arg0: string): ResultSet;
	querySQL(arg0: string, arg1: number, arg2: number): ResultSet;
	setQuiet(arg0: boolean): void;
	readAllObjects(arg0: Class, arg1: string): List;
	readAllObjects(arg0: Class): List;
	nextObjects(arg0: DatasetCursor): List;
	printSQLException(arg0: SQLException): void;
	isConnected(): boolean;
	prepareStatement(arg0: string): PreparedStatement;
	commit(): void;
	executeSQL(arg0: string): number;
	executeSQL(arg0: string, arg1: number): boolean;
	beginTransaction(): void;
	endTransaction(): void;
	newConnection(): DatasetConnection;
	setDefaultFetchSize(arg0: number): void;
	beginSerializableTransaction(): void;
	transactionStarted(): boolean;
	rollback(): void;
	readObjects(arg0: List, arg1: string): DatasetCursor;
	readObjects(arg0: Class, arg1: string): DatasetCursor;
	prepareOracle(arg0: OracleData): PreparedStatement;
	setTimeout(arg0: number): void;
	prepareCall(arg0: string): CallableStatement;
	getTimeout(): number;
}
declare var DatasetConnection:
{
	new (value?: any): DatasetConnection;
	(): any;
	(value: any): any;
	prototype: DatasetConnection;
}
interface DatasetCursor
{
	nextObject(): OracleData;
	nextObjects(): List;
}
declare var DatasetCursor:
{
	new (value?: any): DatasetCursor;
	(): any;
	(value: any): any;
	prototype: DatasetCursor;
}
interface OracleData
{
	getData(): string;
	getTableName(): string;
	getControlCommand(): string;
	getColumns(): string;
	getTypes(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setFromResultSet(arg0: ResultSet): void;
	getPrimaryKeyFields(): List;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	setPreparedStatement(arg0: PreparedStatement): void;
}
declare var OracleData:
{
	new (value?: any): OracleData;
	(): any;
	(value: any): any;
	prototype: OracleData;
}
interface StreetTypeUsage
{
	equals(arg0: any): boolean;
	toString(): string;
	attach(): string;
	setCode(arg0: string): void;
	syntax(): string;
	streetTypeId(): number;
	setStreetTypeId(arg0: number): void;
	setSyntax(arg0: string): void;
	setAttach(arg0: string): void;
	code(): string;
	getClass(): Class;
}
declare var StreetTypeUsage:
{
	new (value?: any): StreetTypeUsage;
	(): any;
	(value: any): any;
	prototype: StreetTypeUsage;
}
interface AttributeType
{
	values(): AttributeType;
	valueOf(arg0: string): AttributeType;
	internalValue(): string;
	valueForDbValue(arg0: string): AttributeType;
	getDbValue(): string;
	valueForInternalValue(arg0: string): AttributeType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var AttributeType:
{
	new (value?: any): AttributeType;
	(): any;
	(value: any): any;
	prototype: AttributeType;
}
interface GuidanceType
{
	values(): GuidanceType;
	valueOf(arg0: string): GuidanceType;
	valueForDbValue(arg0: string): GuidanceType;
	getDbValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var GuidanceType:
{
	new (value?: any): GuidanceType;
	(): any;
	(value: any): any;
	prototype: GuidanceType;
}
interface NaturalGuidancePermanence
{
	values(): NaturalGuidancePermanence;
	valueOf(arg0: string): NaturalGuidancePermanence;
	valueForDbValue(arg0: number): NaturalGuidancePermanence;
	getDbValue(): number;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var NaturalGuidancePermanence:
{
	new (value?: any): NaturalGuidancePermanence;
	(): any;
	(value: any): any;
	prototype: NaturalGuidancePermanence;
}
interface NaturalGuidanceRelDistance
{
	values(): NaturalGuidanceRelDistance;
	valueOf(arg0: string): NaturalGuidanceRelDistance;
	valueForDbValue(arg0: number): NaturalGuidanceRelDistance;
	getDbValue(): number;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var NaturalGuidanceRelDistance:
{
	new (value?: any): NaturalGuidanceRelDistance;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceRelDistance;
}
interface NaturalGuidanceSeasonality
{
	values(): NaturalGuidanceSeasonality;
	valueOf(arg0: string): NaturalGuidanceSeasonality;
	valueForDbValue(arg0: string): NaturalGuidanceSeasonality;
	getDbValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var NaturalGuidanceSeasonality:
{
	new (value?: any): NaturalGuidanceSeasonality;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceSeasonality;
}
interface NaturalGuidanceVisibility
{
	values(): NaturalGuidanceVisibility;
	valueOf(arg0: string): NaturalGuidanceVisibility;
	valueForDbValue(arg0: number): NaturalGuidanceVisibility;
	getDbValue(): number;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var NaturalGuidanceVisibility:
{
	new (value?: any): NaturalGuidanceVisibility;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceVisibility;
}
interface DmVerified
{
	values(): DmVerified;
	valueOf(arg0: string): DmVerified;
	valueForDbValue(arg0: string): DmVerified;
	getDbValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var DmVerified:
{
	new (value?: any): DmVerified;
	(): any;
	(value: any): any;
	prototype: DmVerified;
}
interface SystemOfMeasurement
{
	values(): SystemOfMeasurement;
	valueOf(arg0: string): SystemOfMeasurement;
	valueForDbValue(arg0: string): SystemOfMeasurement;
	getDbValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var SystemOfMeasurement:
{
	new (value?: any): SystemOfMeasurement;
	(): any;
	(value: any): any;
	prototype: SystemOfMeasurement;
}
interface DirectionOnSign
{
	values(): DirectionOnSign;
	valueOf(arg0: string): DirectionOnSign;
	valueForDbValue(arg0: string): DirectionOnSign;
	getDbValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var DirectionOnSign:
{
	new (value?: any): DirectionOnSign;
	(): any;
	(value: any): any;
	prototype: DirectionOnSign;
}
interface LaneAttributeType
{
	values(): LaneAttributeType;
	valueOf(arg0: string): LaneAttributeType;
	getValue(): number;
	toLaneAttributeType(arg0: number): LaneAttributeType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LaneAttributeType:
{
	new (value?: any): LaneAttributeType;
	(): any;
	(value: any): any;
	prototype: LaneAttributeType;
}
interface LaneSetType
{
	values(): LaneSetType;
	valueOf(arg0: string): LaneSetType;
	getValue(): string;
	toLaneSetType(arg0: string): LaneSetType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LaneSetType:
{
	new (value?: any): LaneSetType;
	(): any;
	(value: any): any;
	prototype: LaneSetType;
}
interface LaneMask
{
	add(arg0: LaneNumberType): boolean;
	remove(arg0: LaneNumberType): boolean;
	equals(arg0: any): boolean;
	clear(): void;
	isEmpty(): boolean;
	addAll(arg0: Collection): boolean;
	removeAll(arg0: Collection): boolean;
	toMask(): number;
	laneNumberTypeSet(): EnumSet;
	toString(): string;
	getClass(): Class;
}
declare var LaneMask:
{
	new (value?: any): LaneMask;
	(): any;
	(value: any): any;
	prototype: LaneMask;
}
interface SpatialIndexExtension
{
	index(arg0: MapObject): void;
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	isEnabled(): boolean;
	setEnabled(arg0: boolean): void;
	extender(): MapContextExtender;
	findLinks(arg0: GeoRectangle): Set;
	filterLinks(arg0: GeoRectangle, arg1: Set, arg2: double): Set;
	findFaces(arg0: GeoRectangle): Set;
	getIntersectedFaces(arg0: GeoRectangle): Set;
	findNodes(arg0: GeoRectangle): Set;
	unindex(arg0: MapObject): void;
	unindexFace(arg0: FaceLink): void;
	mapContext(): MapContext;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SpatialIndexExtension:
{
	new (value?: any): SpatialIndexExtension;
	(): any;
	(value: any): any;
	prototype: SpatialIndexExtension;
}
interface CartoFeatureSubTypeHelper
{
	addCfst(arg0: CartoFeatureSubType, arg1: Set): void;
	addDerivedCfstsForPoiAttribute(arg0: number, arg1: number, arg2: number, arg3: boolean, arg4: Set): void;
	addDerivedCfstsForPoi(arg0: PointOfInterestKernel, arg1: CartoFeatureSubTypePublishValue, arg2: Set): void;
	deriveAllCFSTs(arg0: Set): Set;
	deriveAllCFSTsUsingFlats(arg0: Set): Set;
	calculateCftForCfst(arg0: number): number;
	mergeCFSTs(arg0: Set, arg1: Set): Set;
	deriveAndMergeCFSTs(arg0: CartoFeature): Set;
	deriveAndMergeCFSTs(arg0: CartoFeatureKernel, arg1: Set): Set;
	findMainCFSTs(arg0: Set): Set;
	findSecondaryCFSTs(arg0: Set): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoFeatureSubTypeHelper:
{
	new (value?: any): CartoFeatureSubTypeHelper;
	(): any;
	(value: any): any;
	prototype: CartoFeatureSubTypeHelper;
}
interface NavLinkRouter
{
	routeWaypoints(arg0: NavLinkTraversal, arg1: NavLinkTraversal): NavLinkRoute;
	routeWaypoints(arg0: List): NavLinkRoute;
	setMaximumRouteDistance(arg0: double): void;
	route(arg0: List, arg1: RoutingOptions): any;
	route(arg0: any, arg1: any): any;
	route(arg0: List): any;
	addRestriction(arg0: NavigationRestrictionType): void;
}
declare var NavLinkRouter:
{
	new (value?: any): NavLinkRouter;
	(): any;
	(value: any): any;
	prototype: NavLinkRouter;
}
interface LinkNavigator
{
	getRestrictions(arg0: NavLinkTraversalSource): Set;
	getRestrictions(arg0: NavLinkTraversalSource, arg1: boolean): Set;
	getRestricters(): Collection;
	reachable(arg0: NavLinkTraversalSource, arg1: boolean): Collection;
	reachable(arg0: NavLink): Collection;
	reachable(arg0: NavLink, arg1: boolean): Collection;
	reachableFromNode(arg0: NavLink, arg1: NavNode, arg2: boolean): Collection;
	reachableFromNode(arg0: NavLink, arg1: NavNode): Collection;
	uTurnAllowed(arg0: NavLink, arg1: NavNode): boolean;
}
declare var LinkNavigator:
{
	new (value?: any): LinkNavigator;
	(): any;
	(value: any): any;
	prototype: LinkNavigator;
}
interface MapNavigator
{
	setAllowUturnOnCitycenterLink(arg0: boolean): void;
	setExcludeInprocess(arg0: boolean): void;
	setCDMTimeMax(arg0: boolean): void;
	setExcludeFourWheelDrive(arg0: boolean): void;
	setExcludeFourWheelDriveOnly(arg0: boolean): void;
	setExcludeConstruction(arg0: boolean): void;
	setLongHaulOnly(arg0: boolean): void;
	setCheckFuncClass(arg0: number): void;
	setCheckDanglingFuncClass(arg0: number): void;
	setThroughTrafficKeyNo(arg0: boolean): void;
	setExcludeTRDM(arg0: boolean): void;
	setExcludeUnPaved(arg0: boolean): void;
	setCheckAuto(arg0: boolean): void;
	setCheckGateType(arg0: boolean): void;
	setExcludeThroughTrafficNo(arg0: boolean): void;
	setCheckBus(arg0: boolean): void;
	setCheckTaxis(arg0: boolean): void;
	setCheckCarpool(arg0: boolean): void;
	setCheckPedestrian(arg0: boolean): void;
	setCheckEmergencyVehicle(arg0: boolean): void;
	setCheckDelivery(arg0: boolean): void;
	setAllowUTurn(arg0: boolean): void;
	setCheckTruck(arg0: boolean): void;
	setExcludeCILink(arg0: boolean): void;
	setExcludeBOC(arg0: boolean): void;
	setExcludeParkingLot(arg0: boolean): void;
	setExcludeTAR(arg0: boolean): void;
	reachable(arg0: NavLink): Collection;
	reachable(arg0: NavLink, arg1: boolean): Collection;
	reachableFromNode(arg0: NavLink, arg1: NavNode, arg2: boolean): Collection;
	reachableFromNode(arg0: NavLink, arg1: NavNode): Collection;
	uTurnAllowed(arg0: NavLink, arg1: NavNode): boolean;
}
declare var MapNavigator:
{
	new (value?: any): MapNavigator;
	(): any;
	(value: any): any;
	prototype: MapNavigator;
}
interface Navigator
{
	reachable(arg0: NavLink): Collection;
	reachable(arg0: NavLink, arg1: boolean): Collection;
	reachableFromNode(arg0: NavLink, arg1: NavNode, arg2: boolean): Collection;
	reachableFromNode(arg0: NavLink, arg1: NavNode): Collection;
	uTurnAllowed(arg0: NavLink, arg1: NavNode): boolean;
}
declare var Navigator:
{
	new (value?: any): Navigator;
	(): any;
	(value: any): any;
	prototype: Navigator;
}
interface DistanceGraph
{
	clear(): void;
	isEmpty(): boolean;
	isPartial(): boolean;
	getMapContext(): MapContext;
	createGraphGenerator(): GraphGenerator;
	getOpposingNode(arg0: NavLink, arg1: NavNode): NavNode;
	getConnectingLinks(arg0: NavLink, arg1: NavNode): Collection;
	getGraphGenerator(): GraphGenerator;
	setFilter(arg0: DistanceGraphFilter): void;
	getFilter(): DistanceGraphFilter;
	setMaxTravelDist(arg0: double): void;
	getMaxTravelDist(): double;
	setTerminateOnPartialNode(arg0: boolean): void;
	getTerminateOnPartialNode(): boolean;
	setTerminateOnLinkAdd(arg0: boolean): void;
	getTerminateOnLinkAdd(): boolean;
	setLinkToDistMap(arg0: boolean): void;
	getNavLinks(): Set;
	explore(arg0: NavLink, arg1: boolean): boolean;
	explore(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	getClosestNode(arg0: NavLink): NavNode;
	getDistToNode(arg0: NavNode): Double;
	getDistForLink(arg0: number): Double;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DistanceGraph:
{
	new (value?: any): DistanceGraph;
	(): any;
	(value: any): any;
	prototype: DistanceGraph;
}
interface GraphGenerator
{
	uTurnAllowed(arg0: NavLink, arg1: NavNode): boolean;
	generateDirected(arg0: MapContext): DirectedNavLinkGraph;
	isAllowedUturnOnCitycenterLink(): boolean;
	setExecuteForGEO069(arg0: boolean): void;
	generateGeoGraph(arg0: MapContext): UndirectedNavLinkGraph;
	generateGeoGraph(): UndirectedNavLinkGraph;
	generateNavGraph(arg0: Set): UndirectedNavLinkGraph;
	setIgnoreGates(arg0: boolean): void;
	generateDirectedNavGraph(): DirectedNavLinkGraph;
	generateDirectedNavGraph(arg0: Set): DirectedNavLinkGraph;
	generateDirectedNavGraph(arg0: MapContext): DirectedNavLinkGraph;
	setSupplementalGeoBits(arg0: boolean): void;
	setMapContext(arg0: MapContext): void;
	directionOfTravel(arg0: NavLink): string;
	getSupplementalGeoBits(): boolean;
	setAllowUturnOnCitycenterLink(arg0: boolean): void;
	setExcludeInprocess(arg0: boolean): void;
	setCDMTimeMax(arg0: boolean): void;
	getReachableNavLinks(arg0: NavLink): Set;
	getReachableNavLinks(arg0: NavLink, arg1: NavNode): Set;
	isPublicAccess(): boolean;
	reachable(arg0: NavLink): Collection;
	reachable(arg0: NavLink, arg1: boolean): Collection;
	reachableFromNode(arg0: NavLink, arg1: NavNode): Collection;
	reachableFromNode(arg0: NavLink, arg1: NavNode, arg2: boolean): Collection;
	setExcludeFourWheelDrive(arg0: boolean): void;
	setExcludeFourWheelDriveOnly(arg0: boolean): void;
	setExcludeConstruction(arg0: boolean): void;
	setLongHaulOnly(arg0: boolean): void;
	setCheckFuncClass(arg0: number): void;
	setCheckDanglingFuncClass(arg0: number): void;
	setThroughTrafficKeyNo(arg0: boolean): void;
	setExcludeTRDM(arg0: boolean): void;
	setExcludeUnPaved(arg0: boolean): void;
	setCheckAuto(arg0: boolean): void;
	setCheckGateType(arg0: boolean): void;
	setExcludeThroughTrafficNo(arg0: boolean): void;
	setCheckBus(arg0: boolean): void;
	setCheckTaxis(arg0: boolean): void;
	setCheckCarpool(arg0: boolean): void;
	setCheckPedestrian(arg0: boolean): void;
	setCheckEmergencyVehicle(arg0: boolean): void;
	setCheckDelivery(arg0: boolean): void;
	setAllowUTurn(arg0: boolean): void;
	setCheckTruck(arg0: boolean): void;
	setExcludeCILink(arg0: boolean): void;
	setExcludeBOC(arg0: boolean): void;
	setExcludeParkingLot(arg0: boolean): void;
	setExcludeTAR(arg0: boolean): void;
	isConnectIncompleteNodes(): boolean;
	isFiltered(arg0: NavLink): boolean;
	getConditionsByType(arg0: NavLink, arg1: number): List;
	isFixLongRDMs(): boolean;
	isTravelAllowedByRDM(arg0: RestrictedDrivingManeuvre, arg1: number): boolean;
	setFixLongRDMs(arg0: boolean): void;
	isIgnoreLongRDM(): boolean;
	setIgnoreLongRDM(arg0: boolean): void;
	setCheckMotorCycle(arg0: boolean): void;
	setExcludeUFRConditionsOnLink(arg0: boolean): void;
	setCheckG2(arg0: boolean): void;
	setExcludeCarpoolRoad(arg0: boolean): void;
	setIPD_OR_SupplementalGeoBits(arg0: boolean): void;
	setExcludeDeliveryRoad(arg0: boolean): void;
	setExcludeW0CILink(arg0: boolean): void;
	maxFuncClass(): number;
	setConfidenceTierScore(arg0: boolean): void;
	setExcludePrivateYesLink(arg0: boolean): void;
	setCdmTimeMax(arg0: boolean): void;
	printParameters(): void;
	isBlockedByUturnRDM(arg0: NavLink, arg1: NavNode): boolean;
	getBrokenReasons(): string;
	isFilteredByUFR(arg0: NavLink): boolean;
	isFilteredByW0CoverageIndicator(arg0: NavLink): boolean;
	isFilteredByAttributes(arg0: NavLink): boolean;
	isFilteredByFeatureType(arg0: NavLink): boolean;
	isAccessibleByFunctionClass(arg0: NavLink, arg1: NavNode, arg2: NavLink): boolean;
	isAccessibleByRDM(arg0: NavLink, arg1: NavNode, arg2: NavLink): boolean;
	isAccessibleByLogicalRDM(arg0: NavLink, arg1: NavNode, arg2: NavLink): boolean;
	isAccessibleByFullTimeRDM(arg0: NavLink, arg1: NavNode, arg2: NavLink): boolean;
	isFilteredByConstruction(arg0: NavLink): boolean;
	isAccessibleByGate(arg0: NavLink, arg1: NavLink): boolean;
	isFilteredByLongHaulOnly(arg0: NavLink): boolean;
	isAccessibleByTRDM(arg0: NavLink, arg1: NavNode, arg2: NavLink): boolean;
	isFilteredByTransportAccessRestriction(arg0: NavLink): boolean;
	isFilteredByAccessForGEO069(arg0: NavLink): boolean;
	isFilteredByAccess(arg0: NavLink): boolean;
	isAccessibleByDirection(arg0: NavNode, arg1: NavLink, arg2: boolean): boolean;
	isAccessibleByDirection(arg0: NavLink, arg1: NavNode, arg2: NavLink): boolean;
	dividedNavLinks(arg0: NavLink, arg1: NavNode, arg2: boolean): List;
	dividedNavLinks(arg0: NavLink, arg1: NavNode): List;
	reSetDefaultParameters(): void;
	isThroughTrafficKeyNo(): boolean;
	setConnectIncompleteNodes(arg0: boolean): void;
	isCdmTimeMax(): boolean;
	getCheckDanglingFuncClass(): number;
	getCheckFuncClass(): number;
	isAllowUTurn(): boolean;
	isUsageFeeConditionExcluded(): boolean;
	isAllowUturnOnCitycenterLink(): boolean;
	isCheckAuto(): boolean;
	isCheckBus(): boolean;
	isCheckCarpool(): boolean;
	isCheckDelivery(): boolean;
	isCheckEmergencyVehicle(): boolean;
	isCheckGateType(): boolean;
	isCheckPedestrian(): boolean;
	isCheckTaxis(): boolean;
	isCheckTruck(): boolean;
	isCheckMotorCycle(): boolean;
	isExcludeBOC(): boolean;
	isExcludeCILink(): boolean;
	isExcludeConstruction(): boolean;
	isExcludeW0CILink(): boolean;
	isExcludeFourWheelDrive(): boolean;
	isExcludeFourWheelDriveOnly(): boolean;
	isExcludeParkingLot(): boolean;
	getIPD_OR_SupplementalGeoBits(): boolean;
	isExcludeDeliveryRoad(): boolean;
	isExcludeTAR(): boolean;
	isExcludeThroughTrafficNo(): boolean;
	isExcludeTRDM(): boolean;
	isExcludeUnPaved(): boolean;
	isLongHaulOnly(): boolean;
	isExcludeInprocess(): boolean;
	isConfidenceTierScore(): boolean;
	isExcludePrivateYesLink(): boolean;
	setNavLinksToAnalyze(arg0: Set): void;
	isAccessableByDivider(arg0: NavLink, arg1: NavLink, arg2: NavNode): boolean;
	setPublicAccess(arg0: boolean): void;
	setLowMobility(arg0: boolean): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GraphGenerator:
{
	new (value?: any): GraphGenerator;
	(): any;
	(value: any): any;
	prototype: GraphGenerator;
}
interface MapObjectFinder
{
	findNavStrand(arg0: number): NavStrand;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrfs(arg0: NavLink): Set;
	findNavLane(arg0: number): NavLane;
}
declare var MapObjectFinder:
{
	new (value?: any): MapObjectFinder;
	(): any;
	(value: any): any;
	prototype: MapObjectFinder;
}
interface ValidationSummary
{
	equals(arg0: any): boolean;
	toString(): string;
	incrementNumRuleApplications(): void;
	setNumRulesApplied(arg0: number): void;
	incrementNumExceptions(): void;
	numRuleApplications(): number;
	numRulesApplied(): number;
	numExceptions(): number;
	incrementNumRulesApplied(): void;
	setNumExceptions(arg0: number): void;
	setNumRuleApplications(arg0: number): void;
	getClass(): Class;
}
declare var ValidationSummary:
{
	new (value?: any): ValidationSummary;
	(): any;
	(value: any): any;
	prototype: ValidationSummary;
}
interface RuleOutcome
{
	toString(): string;
	error(arg0: Collection, arg1: string, arg2: Array<any>): RuleOutcome;
	error(arg0: string, arg1: Array<any>): RuleOutcome;
	isError(): boolean;
	isOK(): boolean;
	isUnmetPrecondition(): boolean;
	getRuleResult(): RuleResult;
	shouldVisualizeExceptionOnRuleArgument(): boolean;
	getExceptionMapObjects(): Set;
	getErrorMessage(): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RuleOutcome:
{
	new (value?: any): RuleOutcome;
	(): any;
	(value: any): any;
	prototype: RuleOutcome;
}
interface ParameterizedRule
{
	setRuleArgument(arg0: MapObject): void;
	runWithArgument(arg0: MapObject): RuleOutcome;
	getRuleArgument(): MapObject;
	name(): string;
	apply(arg0: any): RuleResult;
	status(): string;
	id(): number;
	description(): string;
	getRuleInfo(): RuleInfo;
	setMetadata(arg0: Metadata): void;
	ruleCode(): string;
	setTrafficInfo(arg0: TrafficInfo): void;
	setStreetTypeFactory(arg0: StreetTypeFactory): void;
	setTpegInfo(arg0: TpegInfo): void;
	getMetadata(): Metadata;
	repairNote(): string;
	severity(): string;
	docLink(): string;
	leEnabled(): boolean;
	isMessageSignificant(): boolean;
	accessorName(): string;
	targetClassName(): string;
	metadataKey(): string;
	getLastErrorMsg(): string;
	setRuleInfo(arg0: RuleInfoKernel): void;
	isRuleValid(arg0: number): boolean;
	skipCountryOverride(): boolean;
	getMapContextProxy(): MapContextProxy;
	requiresGeometricScope(): boolean;
}
declare var ParameterizedRule:
{
	new (value?: any): ParameterizedRule;
	(): any;
	(value: any): any;
	prototype: ParameterizedRule;
}
interface CountryState
{
	toString(): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CountryState:
{
	new (value?: any): CountryState;
	(): any;
	(value: any): any;
	prototype: CountryState;
}
interface AreaState
{
	toString(): string;
	clone(): any;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AreaState:
{
	new (value?: any): AreaState;
	(): any;
	(value: any): any;
	prototype: AreaState;
}
interface BaseNameState
{
	toString(): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var BaseNameState:
{
	new (value?: any): BaseNameState;
	(): any;
	(value: any): any;
	prototype: BaseNameState;
}
interface EstimatesState
{
	toString(): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var EstimatesState:
{
	new (value?: any): EstimatesState;
	(): any;
	(value: any): any;
	prototype: EstimatesState;
}
interface CompFeatureState
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	isLongHaul(): boolean;
	setLongHaul(arg0: boolean): void;
	getClass(): Class;
}
declare var CompFeatureState:
{
	new (value?: any): CompFeatureState;
	(): any;
	(value: any): any;
	prototype: CompFeatureState;
}
interface LinkState
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	isBridge(): boolean;
	isComplete(): boolean;
	setComplete(arg0: boolean): void;
	geometrySource(): number;
	isTunnel(): boolean;
	setDetailedCity(arg0: boolean): void;
	setGeometrySource(arg0: number): void;
	isDetailedCity(): boolean;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	getClass(): Class;
}
declare var LinkState:
{
	new (value?: any): LinkState;
	(): any;
	(value: any): any;
	prototype: LinkState;
}
interface FlatPoiState
{
	toString(): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var FlatPoiState:
{
	new (value?: any): FlatPoiState;
	(): any;
	(value: any): any;
	prototype: FlatPoiState;
}
interface PoiDataState
{
	toString(): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var PoiDataState:
{
	new (value?: any): PoiDataState;
	(): any;
	(value: any): any;
	prototype: PoiDataState;
}
interface Type
{
	values(): Type;
	valueOf(arg0: string): Type;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var Type:
{
	new (value?: any): Type;
	(): any;
	(value: any): any;
	prototype: Type;
}
interface DegradationValidationVisitor
{
	visit(arg0: DegradationValidationCartoFeature): void;
	visit(arg0: DegradationValidationRDMCondition): void;
	visit(arg0: DegradationValidation3DLMFiles): void;
	visit(arg0: DegradationValidationPoiCarto3DLandmarks): void;
	visit(arg0: DegradationValidationNavLinkRCFC): void;
	visit(arg0: DegradationValidationCoverageIndicator): void;
	visit(arg0: DegradationValidationRampedNavLink): void;
	visit(arg0: DegradationValidationLinkAligned): void;
	visit(arg0: DegradationValidationNavLinkAttribute): void;
	visit(arg0: DegradationValidationFeatureName): void;
	visit(arg0: DegradationValidationLTCCondition): void;
	visit(arg0: DegradationValidationMoAssocGPData): void;
	visit(arg0: DegradationValidationPoiLocation): void;
	visit(arg0: DegradationValidationCartoAdmin): void;
	visit(arg0: DegradationValidationCarto): void;
	visit(arg0: DegradationValidationNamedPlacePoiPopulation): void;
	visit(arg0: DegradationValidationNamedPlacePoiCapitalIndicator): void;
	visit(arg0: DegradationValidationPoiOnIpdNo): void;
	visit(arg0: DegradationValidationLinkBridgeTunnelEI): void;
	visit(arg0: DegradationValidationDisputedFeatureAdmin): void;
	visit(arg0: DegradationValidationDisputedFeature): void;
	visit(arg0: DegradationValidationStackedPoint): void;
	visit(arg0: DegradationValidationOceanAdmin): void;
	visit(arg0: DegradationValidationOceanArea): void;
}
declare var DegradationValidationVisitor:
{
	new (value?: any): DegradationValidationVisitor;
	(): any;
	(value: any): any;
	prototype: DegradationValidationVisitor;
}
interface AdminScopeElement
{
	equals(arg0: any): boolean;
	accept(arg0: ScopeElementVisitor): void;
	getAdminCode(): string;
	scopeType(): string;
	getMapObjectId(): number;
	getMapObjectType(): string;
	multiMbrMap(): Map;
	mbr(): GeoRectangle;
	multiMbr(): Set;
	updateMultiMbrs(arg0: Map): void;
	hasApplicationScope(): boolean;
	setScopeMbr(arg0: GeoRectangle): void;
	isUniversalScope(): boolean;
	isMapObjectScope(): boolean;
	isSpatialScope(): boolean;
	createTime(): Date;
	toString(): string;
	getClass(): Class;
}
declare var AdminScopeElement:
{
	new (value?: any): AdminScopeElement;
	(): any;
	(value: any): any;
	prototype: AdminScopeElement;
}
interface LinkScopeElement
{
	equals(arg0: any): boolean;
	accept(arg0: ScopeElementVisitor): void;
	scopeType(): string;
	getDependentLinks(): Set;
	getMapObjectId(): number;
	getMapObjectType(): string;
	multiMbrMap(): Map;
	mbr(): GeoRectangle;
	multiMbr(): Set;
	updateMultiMbrs(arg0: Map): void;
	hasApplicationScope(): boolean;
	setScopeMbr(arg0: GeoRectangle): void;
	isUniversalScope(): boolean;
	isMapObjectScope(): boolean;
	isSpatialScope(): boolean;
	createTime(): Date;
	toString(): string;
	getClass(): Class;
}
declare var LinkScopeElement:
{
	new (value?: any): LinkScopeElement;
	(): any;
	(value: any): any;
	prototype: LinkScopeElement;
}
interface SpatialScopeElement
{
	equals(arg0: any): boolean;
	accept(arg0: ScopeElementVisitor): void;
	id(): number;
	mbr(): GeoRectangle;
	multiMbr(): Set;
	hasApplicationScope(): boolean;
	scopeType(): string;
	isUniversalScope(): boolean;
	isMapObjectScope(): boolean;
	isSpatialScope(): boolean;
	createTime(): Date;
	toString(): string;
	getClass(): Class;
}
declare var SpatialScopeElement:
{
	new (value?: any): SpatialScopeElement;
	(): any;
	(value: any): any;
	prototype: SpatialScopeElement;
}
interface CrfScopeElement
{
	equals(arg0: any): boolean;
	accept(arg0: ScopeElementVisitor): void;
	scopeType(): string;
	getMapObjectId(): number;
	getMapObjectType(): string;
	multiMbrMap(): Map;
	mbr(): GeoRectangle;
	multiMbr(): Set;
	updateMultiMbrs(arg0: Map): void;
	hasApplicationScope(): boolean;
	setScopeMbr(arg0: GeoRectangle): void;
	isUniversalScope(): boolean;
	isMapObjectScope(): boolean;
	isSpatialScope(): boolean;
	createTime(): Date;
	toString(): string;
	getClass(): Class;
}
declare var CrfScopeElement:
{
	new (value?: any): CrfScopeElement;
	(): any;
	(value: any): any;
	prototype: CrfScopeElement;
}
interface CartoScopeElement
{
	equals(arg0: any): boolean;
	accept(arg0: ScopeElementVisitor): void;
	scopeType(): string;
	getMapObjectId(): number;
	getMapObjectType(): string;
	multiMbrMap(): Map;
	mbr(): GeoRectangle;
	multiMbr(): Set;
	updateMultiMbrs(arg0: Map): void;
	hasApplicationScope(): boolean;
	setScopeMbr(arg0: GeoRectangle): void;
	isUniversalScope(): boolean;
	isMapObjectScope(): boolean;
	isSpatialScope(): boolean;
	createTime(): Date;
	toString(): string;
	getClass(): Class;
}
declare var CartoScopeElement:
{
	new (value?: any): CartoScopeElement;
	(): any;
	(value: any): any;
	prototype: CartoScopeElement;
}
interface PostalScopeElement
{
	equals(arg0: any): boolean;
	accept(arg0: ScopeElementVisitor): void;
	postalCode(): string;
	scopeType(): string;
	getPostalCountryId(): number;
	getMapObjectId(): number;
	getMapObjectType(): string;
	multiMbrMap(): Map;
	mbr(): GeoRectangle;
	multiMbr(): Set;
	updateMultiMbrs(arg0: Map): void;
	hasApplicationScope(): boolean;
	setScopeMbr(arg0: GeoRectangle): void;
	isUniversalScope(): boolean;
	isMapObjectScope(): boolean;
	isSpatialScope(): boolean;
	createTime(): Date;
	toString(): string;
	getClass(): Class;
}
declare var PostalScopeElement:
{
	new (value?: any): PostalScopeElement;
	(): any;
	(value: any): any;
	prototype: PostalScopeElement;
}
interface OracleAnnotationAdapter
{
	set(arg0: AnnotationKernel): void;
	getData(): string;
	item(arg0: FlatAnnotation): void;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	colNum(arg0: string): number;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleAnnotationAdapter:
{
	new (value?: any): OracleAnnotationAdapter;
	(): any;
	(value: any): any;
	prototype: OracleAnnotationAdapter;
}
interface OracleCrfNavLinkAdapter
{
	set(arg0: FlatCrfNavLink): void;
	getData(): string;
	item(arg0: any): void;
	item(arg0: FlatCrfNavLink): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCrfNavLinkAdapter:
{
	new (value?: any): OracleCrfNavLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCrfNavLinkAdapter;
}
interface OracleFaceAdapter
{
	set(arg0: FaceKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleFaceAdapter:
{
	new (value?: any): OracleFaceAdapter;
	(): any;
	(value: any): any;
	prototype: OracleFaceAdapter;
}
interface OracleSignAdapter
{
	set(arg0: SignKernel, arg1: number, arg2: number, arg3: number, arg4: string): void;
	set(arg0: any): void;
	getSignTokens(arg0: SignKernel): List;
	getData(): string;
	item(arg0: any): void;
	item(): FlatSign;
	item(): any;
	closeResultSet(): void;
	currentChangeId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	setFromResultSet(arg0: ResultSet): void;
	setFromResultSet(arg0: ResultSet, arg1: ResultSet, arg2: ResultSet, arg3: ResultSet, arg4: ResultSet): void;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	createChangeId(): number;
	getInt(arg0: string): number;
	next(): boolean;
	isResultSetNull(): boolean;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleSignAdapter:
{
	new (value?: any): OracleSignAdapter;
	(): any;
	(value: any): any;
	prototype: OracleSignAdapter;
}
interface OracleCrfAdapter
{
	set(arg0: CompositeRoadFeatureKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	item(arg0: FlatCompositeRoadFeature): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCrfAdapter:
{
	new (value?: any): OracleCrfAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCrfAdapter;
}
interface OracleCountryAdapter
{
	next(): boolean;
	set(arg0: Country): void;
	set(arg0: CountryKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(arg0: FlatCountry): void;
	item(): any;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	setFromResultSet(arg0: ResultSet, arg1: ResultSet, arg2: ResultSet): void;
	setFromResultSet(arg0: ResultSet, arg1: ResultSet): void;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCountryAdapter:
{
	new (value?: any): OracleCountryAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCountryAdapter;
}
interface OracleAdminPlaceAdapter
{
	set(arg0: AdminPlaceKernel): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	setFromResultSet(arg0: ResultSet, arg1: ResultSet): void;
	setFromResultSet(arg0: ResultSet, arg1: ResultSet, arg2: ResultSet): void;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	colNum(arg0: string): number;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleAdminPlaceAdapter:
{
	new (value?: any): OracleAdminPlaceAdapter;
	(): any;
	(value: any): any;
	prototype: OracleAdminPlaceAdapter;
}
interface OracleAdminRdsTmcAdapter
{
	set(arg0: number, arg1: RdsTmcLocation, arg2: RdsTmcCartoHandling): void;
	cartoHandling(): RdsTmcCartoHandling;
	getData(): string;
	item(arg0: any): void;
	item(): RdsTmcLocation;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getPreparedStatementDeleteSql(): string;
	adminPlaceId(): number;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleAdminRdsTmcAdapter:
{
	new (value?: any): OracleAdminRdsTmcAdapter;
	(): any;
	(value: any): any;
	prototype: OracleAdminRdsTmcAdapter;
}
interface OracleCartoAdapter
{
	set(arg0: FlatCartoFeature): void;
	set(arg0: CartoFeatureKernel): void;
	getData(): string;
	item(): any;
	item(arg0: FlatCartoFeature): void;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCartoAdapter:
{
	new (value?: any): OracleCartoAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCartoAdapter;
}
interface OracleCartoRdsTmcAdapter
{
	set(arg0: number, arg1: RdsTmcLocation): void;
	cartoId(): number;
	getData(): string;
	item(): RdsTmcLocation;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getPreparedStatementDeleteSql(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCartoRdsTmcAdapter:
{
	new (value?: any): OracleCartoRdsTmcAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCartoRdsTmcAdapter;
}
interface OracleCartoFeatureSubTypeAdapter
{
	set(arg0: number, arg1: CartoFeatureSubType): void;
	cartoId(): number;
	getData(): string;
	item(arg0: any): void;
	item(): CartoFeatureSubType;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getPreparedStatementDeleteSql(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCartoFeatureSubTypeAdapter:
{
	new (value?: any): OracleCartoFeatureSubTypeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCartoFeatureSubTypeAdapter;
}
interface OracleCartoLinkAdapter
{
	set(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean, arg5: string, arg6: number, arg7: string, arg8: string, arg9: boolean): void;
	set(arg0: CartoLinkKernel): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	item(): FlatCartoLink;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getPreparedStatementDeleteSql(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCartoLinkAdapter:
{
	new (value?: any): OracleCartoLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCartoLinkAdapter;
}
interface OracleFeatureNameAdapter
{
	set(arg0: BasicName, arg1: number, arg2: string): void;
	getFeatureIdFromResultSet(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getFeatureNameId(): number;
	getFeatureNameSequenceNumber(): number;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleFeatureNameAdapter:
{
	new (value?: any): OracleFeatureNameAdapter;
	(): any;
	(value: any): any;
	prototype: OracleFeatureNameAdapter;
}
interface OracleRoadLinkAdapter
{
	set(arg0: RoadLinkKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(arg0: FlatRoadLink): void;
	item(): any;
	item(): FlatRoadLink;
	closeResultSet(): void;
	getTableName(): string;
	getControlCommand(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleRoadLinkAdapter:
{
	new (value?: any): OracleRoadLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleRoadLinkAdapter;
}
interface OracleRoadNameAdapter
{
	set(arg0: RoadNameKernel): void;
	ifNull(arg0: string): string;
	getData(): string;
	item(arg0: any): void;
	item(arg0: FlatRoadName): void;
	item(): any;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getCreateTriggerCommand(): List;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleRoadNameAdapter:
{
	new (value?: any): OracleRoadNameAdapter;
	(): any;
	(value: any): any;
	prototype: OracleRoadNameAdapter;
}
interface OracleNavNodeAdapter
{
	set(arg0: NavNodeKernel): void;
	getData(): string;
	item(): FlatNavNode;
	item(arg0: FlatNavNode): void;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleNavNodeAdapter:
{
	new (value?: any): OracleNavNodeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleNavNodeAdapter;
}
interface OracleNavStrandAdapter
{
	set(arg0: number, arg1: number, arg2: number): void;
	getData(): string;
	item(): FlatNavStrand;
	item(arg0: any): void;
	item(): any;
	currentChangeId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getDeleteCommand(arg0: number): string;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	createChangeId(): number;
	getPreparedStatementDeleteSql(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleNavStrandAdapter:
{
	new (value?: any): OracleNavStrandAdapter;
	(): any;
	(value: any): any;
	prototype: OracleNavStrandAdapter;
}
interface OracleConditionAdapter
{
	set(arg0: ConditionKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	item(): FlatCondition;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	colNum(arg0: string): number;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleConditionAdapter:
{
	new (value?: any): OracleConditionAdapter;
	(): any;
	(value: any): any;
	prototype: OracleConditionAdapter;
}
interface OracleConditionModifierTextAdapter
{
	set(arg0: number, arg1: number, arg2: string, arg3: FlatConditionModifierText): void;
	modifierType(): number;
	getData(): string;
	item(arg0: any): void;
	item(): FlatConditionModifierText;
	item(): any;
	languageCode(): string;
	conditionId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleConditionModifierTextAdapter:
{
	new (value?: any): OracleConditionModifierTextAdapter;
	(): any;
	(value: any): any;
	prototype: OracleConditionModifierTextAdapter;
}
interface OracleCrfNavNodeAdapter
{
	set(arg0: FlatCrfNavNode): void;
	getData(): string;
	item(arg0: any): void;
	item(arg0: FlatCrfNavNode): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCrfNavNodeAdapter:
{
	new (value?: any): OracleCrfNavNodeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCrfNavNodeAdapter;
}
interface OracleCartoFaceAdapter
{
	set(arg0: CartoFaceKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCartoFaceAdapter:
{
	new (value?: any): OracleCartoFaceAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCartoFaceAdapter;
}
interface OracleFaceLinkAdapter
{
	set(arg0: FaceLinkKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	item(): FlatFaceLink;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleFaceLinkAdapter:
{
	new (value?: any): OracleFaceLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleFaceLinkAdapter;
}
interface OraclePOIAttributeAdapter
{
	set(arg0: PointOfInterestAttribute, arg1: number): void;
	getData(): string;
	item(arg0: any): void;
	item(arg0: PointOfInterestAttribute): void;
	item(): any;
	poiId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePOIAttributeAdapter:
{
	new (value?: any): OraclePOIAttributeAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePOIAttributeAdapter;
}
interface OraclePOICartoAdapter
{
	set(arg0: PoiCartoKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): FlatPoiCarto;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePOICartoAdapter:
{
	new (value?: any): OraclePOICartoAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePOICartoAdapter;
}
interface OraclePOIGraphAdapter
{
	set(arg0: FlatPointOfInterestAssociation): void;
	getDeleteParentsCommand(arg0: number): string;
	getData(): string;
	item(arg0: any): void;
	item(arg0: FlatPointOfInterestAssociation): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getPreparedStatementDeleteSql(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePOIGraphAdapter:
{
	new (value?: any): OraclePOIGraphAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePOIGraphAdapter;
}
interface OraclePOIThirdPartyDataAdapter
{
	set(arg0: PointOfInterestThirdPartyData, arg1: number, arg2: number): void;
	sequenceNumber(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	item(arg0: PointOfInterestThirdPartyData): void;
	poiId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePOIThirdPartyDataAdapter:
{
	new (value?: any): OraclePOIThirdPartyDataAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePOIThirdPartyDataAdapter;
}
interface OraclePOITextAdapter
{
	set(arg0: FlatPointOfInterestText, arg1: number): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	poiId(): number;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	setFromResultSet(arg0: ResultSet, arg1: ResultSet): void;
	setFromResultSet(arg0: ResultSet): void;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePOITextAdapter:
{
	new (value?: any): OraclePOITextAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePOITextAdapter;
}
interface OraclePoiContactAdapter
{
	set(arg0: PointOfInterestContact, arg1: number): void;
	getData(): string;
	item(arg0: any): void;
	item(arg0: PointOfInterestContact): void;
	item(): any;
	poiId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePoiContactAdapter:
{
	new (value?: any): OraclePoiContactAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePoiContactAdapter;
}
interface OracleStreetTypeAdapter
{
	set(arg0: StreetTypeKernel): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleStreetTypeAdapter:
{
	new (value?: any): OracleStreetTypeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleStreetTypeAdapter;
}
interface OraclePostalAreaAdapter
{
	set(arg0: PostalAreaKernel): void;
	getData(): string;
	item(): FlatPostalArea;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePostalAreaAdapter:
{
	new (value?: any): OraclePostalAreaAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePostalAreaAdapter;
}
interface OracleExternalPostalInfoAdapter
{
	set(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string, arg5: string, arg6: string, arg7: string, arg8: string, arg9: string, arg10: string, arg11: string, arg12: string, arg13: string): void;
	set(arg0: ExternalPostalInfo): void;
	getData(): string;
	item(): any;
	item(arg0: ExternalPostalInfo): void;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleExternalPostalInfoAdapter:
{
	new (value?: any): OracleExternalPostalInfoAdapter;
	(): any;
	(value: any): any;
	prototype: OracleExternalPostalInfoAdapter;
}
interface OracleExternalZipCityAdapter
{
	set(arg0: string, arg1: string, arg2: string, arg3: string, arg4: string, arg5: string, arg6: string, arg7: string, arg8: string, arg9: string, arg10: string): void;
	set(arg0: ExternalZipCityInfo): void;
	getData(): string;
	item(): any;
	item(arg0: ExternalZipCityInfo): void;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleExternalZipCityAdapter:
{
	new (value?: any): OracleExternalZipCityAdapter;
	(): any;
	(value: any): any;
	prototype: OracleExternalZipCityAdapter;
}
interface OracleZoneAdapter
{
	set(arg0: ZoneKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	colNum(arg0: string): number;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleZoneAdapter:
{
	new (value?: any): OracleZoneAdapter;
	(): any;
	(value: any): any;
	prototype: OracleZoneAdapter;
}
interface OracleComboAdapter
{
	set(arg0: ComboKernel): void;
	set(arg0: number, arg1: number, arg2: RuleResult): void;
	getDomainComboId(): number;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getRuleResult(): RuleResult;
	getComboId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleComboAdapter:
{
	new (value?: any): OracleComboAdapter;
	(): any;
	(value: any): any;
	prototype: OracleComboAdapter;
}
interface OracleComboValueAdapter
{
	toString(): string;
	set(arg0: number, arg1: number, arg2: number, arg3: number, arg4: string): void;
	setDomainComboId(arg0: number): void;
	getValueId(): number;
	setSequenceNumber(arg0: number): void;
	getDomainComboId(): number;
	getValueText(): string;
	setValueText(arg0: string): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getComboId(): number;
	getSequenceNumber(): number;
	setComboId(arg0: number): void;
	setValueId(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var OracleComboValueAdapter:
{
	new (value?: any): OracleComboValueAdapter;
	(): any;
	(value: any): any;
	prototype: OracleComboValueAdapter;
}
interface OracleDomainAdapter
{
	set(arg0: DomainKernel): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDomainAdapter:
{
	new (value?: any): OracleDomainAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDomainAdapter;
}
interface OracleDomainComboAdapter
{
	set(arg0: DomainComboKernel): void;
	setDomainComboId(arg0: number): void;
	getShortName(): string;
	setShortName(arg0: string): void;
	getDomainComboId(): number;
	setLongName(arg0: string): void;
	setDomainName(arg0: string): void;
	getDefaultResult(): RuleResult;
	getDomainName(): string;
	setDefaultResult(arg0: RuleResult): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getLongName(): string;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDomainComboAdapter:
{
	new (value?: any): OracleDomainComboAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDomainComboAdapter;
}
interface OracleDomainComboTemplateAdapter
{
	set(arg0: number, arg1: number, arg2: number, arg3: string): void;
	setDomainComboId(arg0: number): void;
	setDomainComboId(arg0: string): void;
	setSequenceNumber(arg0: number): void;
	getTemplateDomainHeader(): string;
	setTemplateDomainId(arg0: number): void;
	getTemplateDomainId(): number;
	getDomainComboId(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getSequenceNumber(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDomainComboTemplateAdapter:
{
	new (value?: any): OracleDomainComboTemplateAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDomainComboTemplateAdapter;
}
interface OracleDomainRangeAdapter
{
	set(arg0: number, arg1: number, arg2: number, arg3: number): void;
	getMin(): number;
	getDomainId(): number;
	getRangeId(): number;
	getMax(): number;
	setDomainId(arg0: number): void;
	setRangeId(arg0: number): void;
	setMin(arg0: number): void;
	setMax(arg0: number): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDomainRangeAdapter:
{
	new (value?: any): OracleDomainRangeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDomainRangeAdapter;
}
interface OracleDomainValueAdapter
{
	getValue(): string;
	setValue(arg0: string): void;
	set(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: string, arg6: boolean): void;
	getValueId(): number;
	getDomainId(): number;
	setDomainId(arg0: number): void;
	getPublished(): boolean;
	setPublishedValue(arg0: string): void;
	setPublished(arg0: boolean): void;
	getShortName(): string;
	setShortName(arg0: string): void;
	setLongName(arg0: string): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getLongName(): string;
	setValueId(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getPublishedValue(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDomainValueAdapter:
{
	new (value?: any): OracleDomainValueAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDomainValueAdapter;
}
interface OracleDomainValueExonymAdapter
{
	set(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: string): void;
	getValueId(): number;
	getDomainId(): number;
	setPublishedValue(arg0: string): void;
	getLanguageCode(): string;
	getDescription(): string;
	setDescription(arg0: string): void;
	getExtractFormat(): string;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	setLanguageCode(arg0: string): void;
	setValueId(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	setExtractFormat(arg0: string): void;
	getPublishedValue(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDomainValueExonymAdapter:
{
	new (value?: any): OracleDomainValueExonymAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDomainValueExonymAdapter;
}
interface OracleDomainValueExonymTransAdapter
{
	set(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: string, arg6: string): void;
	getValueId(): number;
	getDomainId(): number;
	setPublishedValue(arg0: string): void;
	getLanguageCode(): string;
	getDescription(): string;
	setDescription(arg0: string): void;
	getExtractFormat(): string;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	setLanguageCode(arg0: string): void;
	setValueId(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getTransliterationType(): string;
	setExtractFormat(arg0: string): void;
	setTransliterationType(arg0: string): void;
	getPublishedValue(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDomainValueExonymTransAdapter:
{
	new (value?: any): OracleDomainValueExonymTransAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDomainValueExonymTransAdapter;
}
interface OracleRuleInfoAdapter
{
	set(arg0: RuleInfoKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getCreateTriggerCommand(): List;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	setFromResultSet(arg0: ResultSet, arg1: ResultSet): void;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleRuleInfoAdapter:
{
	new (value?: any): OracleRuleInfoAdapter;
	(): any;
	(value: any): any;
	prototype: OracleRuleInfoAdapter;
}
interface OracleUnvalidatedChangeAdapter
{
	set(arg0: UnvalidatedChangeKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	item(arg0: FlatUnvalidatedChange): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	convertFormat(arg0: string): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleUnvalidatedChangeAdapter:
{
	new (value?: any): OracleUnvalidatedChangeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleUnvalidatedChangeAdapter;
}
interface OracleTrafficReferenceAdapter
{
	set(arg0: TrafficReference): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleTrafficReferenceAdapter:
{
	new (value?: any): OracleTrafficReferenceAdapter;
	(): any;
	(value: any): any;
	prototype: OracleTrafficReferenceAdapter;
}
interface OracleFeatureFileAdapter
{
	set(arg0: FeatureFile, arg1: number): void;
	getFeatureId(): number;
	getFeatureIdFromResultSet(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleFeatureFileAdapter:
{
	new (value?: any): OracleFeatureFileAdapter;
	(): any;
	(value: any): any;
	prototype: OracleFeatureFileAdapter;
}
interface OraclePlainTextAdapter
{
	set(arg0: number, arg1: string, arg2: string, arg3: string, arg4: string, arg5: string, arg6: string, arg7: string, arg8: string, arg9: string, arg10: string, arg11: string): void;
	getData(): string;
	item(arg0: any): void;
	item(): PlainText;
	item(): any;
	item(arg0: PlainText): void;
	process(arg0: Connection): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getPlainTexts(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePlainTextAdapter:
{
	new (value?: any): OraclePlainTextAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePlainTextAdapter;
}
interface OracleLangConvTableAdapter
{
	set(arg0: number, arg1: string, arg2: string, arg3: string, arg4: number): void;
	getData(): string;
	item(): LangConv;
	item(arg0: LangConv): void;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleLangConvTableAdapter:
{
	new (value?: any): OracleLangConvTableAdapter;
	(): any;
	(value: any): any;
	prototype: OracleLangConvTableAdapter;
}
interface OracleRoadPointAdapter
{
	set(arg0: RoadPointKernel): void;
	getData(): string;
	item(): FlatRoadPoint;
	item(): any;
	item(arg0: FlatRoadPoint): void;
	item(arg0: any): void;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleRoadPointAdapter:
{
	new (value?: any): OracleRoadPointAdapter;
	(): any;
	(value: any): any;
	prototype: OracleRoadPointAdapter;
}
interface OraclePostalAreaAdminPlaceAdapter
{
	set(arg0: PostalAreaAdminPlaceKernel): void;
	set(arg0: FlatPostalAreaAdminPlace): void;
	getData(): string;
	item(): FlatPostalAreaAdminPlace;
	item(arg0: FlatPostalAreaAdminPlace): void;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePostalAreaAdminPlaceAdapter:
{
	new (value?: any): OraclePostalAreaAdminPlaceAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePostalAreaAdminPlaceAdapter;
}
interface OraclePostalAreaZoneAdapter
{
	set(arg0: PostalAreaZoneKernel): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePostalAreaZoneAdapter:
{
	new (value?: any): OraclePostalAreaZoneAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePostalAreaZoneAdapter;
}
interface OracleZoneAdminPlaceAdapter
{
	set(arg0: ZoneAdminPlaceKernel): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleZoneAdminPlaceAdapter:
{
	new (value?: any): OracleZoneAdminPlaceAdapter;
	(): any;
	(value: any): any;
	prototype: OracleZoneAdminPlaceAdapter;
}
interface OraclePoiAssocAdapter
{
	set(arg0: PoiAssocKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): FlatPoiAssoc;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePoiAssocAdapter:
{
	new (value?: any): OraclePoiAssocAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePoiAssocAdapter;
}
interface CompositeDatabaseResultSetAdapter
{
	next(): boolean;
	item(): any;
	closeResultSet(): void;
	getCurrentAdapter(): OracleAdapterForCompositeKernel;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CompositeDatabaseResultSetAdapter:
{
	new (value?: any): CompositeDatabaseResultSetAdapter;
	(): any;
	(value: any): any;
	prototype: CompositeDatabaseResultSetAdapter;
}
interface OracleNavLaneAdapter
{
	set(arg0: NavLaneKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): FlatNavLane;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleNavLaneAdapter:
{
	new (value?: any): OracleNavLaneAdapter;
	(): any;
	(value: any): any;
	prototype: OracleNavLaneAdapter;
}
interface OracleLaneStrandAdapter
{
	set(arg0: LaneStrandKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): FlatLaneStrand;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleLaneStrandAdapter:
{
	new (value?: any): OracleLaneStrandAdapter;
	(): any;
	(value: any): any;
	prototype: OracleLaneStrandAdapter;
}
interface OracleViaAreaAdapter
{
	set(arg0: ViaAreaKernel): void;
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getTempTableInfo(): Set;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleViaAreaAdapter:
{
	new (value?: any): OracleViaAreaAdapter;
	(): any;
	(value: any): any;
	prototype: OracleViaAreaAdapter;
}
interface OracleViaAreaPoiToLinkAdapter
{
	set(arg0: ViaAreaPoiLinkKernel): void;
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getTempTableInfo(): Set;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleViaAreaPoiToLinkAdapter:
{
	new (value?: any): OracleViaAreaPoiToLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleViaAreaPoiToLinkAdapter;
}
interface OracleViaAreaRoadLinkToLinkAdapter
{
	set(arg0: ViaAreaRLLinkKernel): void;
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getTempTableInfo(): Set;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleViaAreaRoadLinkToLinkAdapter:
{
	new (value?: any): OracleViaAreaRoadLinkToLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleViaAreaRoadLinkToLinkAdapter;
}
interface OracleVirtualConnectionAdapter
{
	set(arg0: VirtualConnectionKernel): void;
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getTempTableInfo(): Set;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleVirtualConnectionAdapter:
{
	new (value?: any): OracleVirtualConnectionAdapter;
	(): any;
	(value: any): any;
	prototype: OracleVirtualConnectionAdapter;
}
interface OracleCvBasicHeightNodeElevationAdapter
{
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getTempTableInfo(): Set;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCvBasicHeightNodeElevationAdapter:
{
	new (value?: any): OracleCvBasicHeightNodeElevationAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCvBasicHeightNodeElevationAdapter;
}
interface OracleCvBasicHeightLinkStatsAdapter
{
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getTempTableInfo(): Set;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCvBasicHeightLinkStatsAdapter:
{
	new (value?: any): OracleCvBasicHeightLinkStatsAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCvBasicHeightLinkStatsAdapter;
}
interface OracleDegradationValidationPoiIpdAdapter
{
	setPoiId(arg0: number): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getPoiId(): number;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationPoiIpdAdapter:
{
	new (value?: any): OracleDegradationValidationPoiIpdAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationPoiIpdAdapter;
}
interface OracleDegradationValidationNamedPlacePoiPopAdapter
{
	setPoiId(arg0: number): void;
	getPopulation(): number;
	setPopulation(arg0: number): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getPoiId(): number;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationNamedPlacePoiPopAdapter:
{
	new (value?: any): OracleDegradationValidationNamedPlacePoiPopAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationNamedPlacePoiPopAdapter;
}
interface OracleDegradationValidationNamedPlacePoiCapAdapter
{
	setPoiId(arg0: number): void;
	getCapInd(): number;
	setCapInd(arg0: number): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getPoiId(): number;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationNamedPlacePoiCapAdapter:
{
	new (value?: any): OracleDegradationValidationNamedPlacePoiCapAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationNamedPlacePoiCapAdapter;
}
interface OracleDegradationValidationCartoAdapter
{
	set(arg0: DegradationValidationCarto): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getFeatureType(): number;
	getCartoId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInsertCommand(arg0: number): string;
	getCartoPvid(): number;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationCartoAdapter:
{
	new (value?: any): OracleDegradationValidationCartoAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationCartoAdapter;
}
interface OracleDegradationValidationCartoAdminAdapter
{
	set(arg0: DegradationValidationCartoAdmin): void;
	getAdminId(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getCartoId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationCartoAdminAdapter:
{
	new (value?: any): OracleDegradationValidationCartoAdminAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationCartoAdminAdapter;
}
interface OracleDegradationValidationOceanAreaAdapter
{
	set(arg0: DegradationValidationOceanArea): void;
	getCartoArea(): number;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getCartoId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInsertCommand(arg0: number): string;
	getCartoPvid(): number;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationOceanAreaAdapter:
{
	new (value?: any): OracleDegradationValidationOceanAreaAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationOceanAreaAdapter;
}
interface OracleDegradationValidationOceanAdminAdapter
{
	set(arg0: DegradationValidationOceanAdmin): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getCartoId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationOceanAdminAdapter:
{
	new (value?: any): OracleDegradationValidationOceanAdminAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationOceanAdminAdapter;
}
interface OracleDegradationValidationPoiLocAdapter
{
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationPoiLocAdapter:
{
	new (value?: any): OracleDegradationValidationPoiLocAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationPoiLocAdapter;
}
interface OracleDegradationValidationStackedPointAdapter
{
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationStackedPointAdapter:
{
	new (value?: any): OracleDegradationValidationStackedPointAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationStackedPointAdapter;
}
interface OracleDegradationValidationDisputedFeatureAdapter
{
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	getPrimaryKeyFields(): List;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationDisputedFeatureAdapter:
{
	new (value?: any): OracleDegradationValidationDisputedFeatureAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationDisputedFeatureAdapter;
}
interface OracleDegradationValidationDisputedFeatureAdminAdapter
{
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationDisputedFeatureAdminAdapter:
{
	new (value?: any): OracleDegradationValidationDisputedFeatureAdminAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationDisputedFeatureAdminAdapter;
}
interface OracleDegradationValidationBridgeTunnelEILinkAdapter
{
	getData(): string;
	item(): any;
	item(arg0: any): void;
	setLinkId(arg0: number): void;
	getLinkId(): number;
	getBridgeAttribute(): string;
	getTunnelAttribute(): string;
	getEIAttribute(): string;
	setBridgeAttribute(arg0: string): void;
	setTunnelAttribute(arg0: string): void;
	SetEIAttribute(arg0: string): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationBridgeTunnelEILinkAdapter:
{
	new (value?: any): OracleDegradationValidationBridgeTunnelEILinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationBridgeTunnelEILinkAdapter;
}
interface OracleVoiceCodeTableAdapter
{
	getData(): string;
	item(): VoiceCode;
	item(arg0: VoiceCode): void;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleVoiceCodeTableAdapter:
{
	new (value?: any): OracleVoiceCodeTableAdapter;
	(): any;
	(value: any): any;
	prototype: OracleVoiceCodeTableAdapter;
}
interface OracleGeoOverrideAdapter
{
	set(arg0: number, arg1: number, arg2: number): void;
	getData(): string;
	item(): GeoQualifier;
	item(arg0: GeoQualifier): void;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleGeoOverrideAdapter:
{
	new (value?: any): OracleGeoOverrideAdapter;
	(): any;
	(value: any): any;
	prototype: OracleGeoOverrideAdapter;
}
interface OracleDegradationValidationCovarageIndicatorAdapter
{
	set(arg0: DegradationValidationCoverageIndicator): void;
	getObjectId(): number;
	getObjectId2(): number;
	setObjectId2(arg0: number): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	setCoverageIndicator(arg0: string): void;
	getCoverageIndicator(): string;
	setObjectId(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationCovarageIndicatorAdapter:
{
	new (value?: any): OracleDegradationValidationCovarageIndicatorAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationCovarageIndicatorAdapter;
}
interface OracleDegradationValidationNavLinkAdapter
{
	getNavLinkId(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	setRoadClassAttribute(arg0: number): void;
	setFunctionalClassAttribute(arg0: number): void;
	getRoadClassAttribute(): number;
	getFunctionalClassAttribute(): number;
	getSpecialAttribute(): number;
	setSpecialAttribute(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInsertCommand(arg0: number): string;
	setNavLinkId(arg0: number): void;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationNavLinkAdapter:
{
	new (value?: any): OracleDegradationValidationNavLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationNavLinkAdapter;
}
interface OracleDegradationValidationPoiCarto3DLandmarksAdapter
{
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getCartoName(): string;
	getPoiName(): string;
	getD_poiCartoId(): number;
	setD_poiCartoId(arg0: number): void;
	getD_cartoId(): number;
	setD_cartoId(arg0: number): void;
	getD_cartoPvid(): number;
	setD_cartoPvid(arg0: number): void;
	getD_poiId(): number;
	setD_poiId(arg0: number): void;
	getD_poiPvid(): number;
	setD_poiPvid(arg0: number): void;
	getD_adminId(): number;
	setD_adminId(arg0: number): void;
	getD_subType(): number;
	setD_subType(arg0: number): void;
	setPoiName(arg0: string): void;
	setCartoName(arg0: string): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationPoiCarto3DLandmarksAdapter:
{
	new (value?: any): OracleDegradationValidationPoiCarto3DLandmarksAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationPoiCarto3DLandmarksAdapter;
}
interface OracleDegradationValidation3DLandmarksFilesAdapter
{
	getFileName(): string;
	getFeatureId(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	setFeatureId(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getParentIdColumnName(): string;
	setFileName(arg0: string): void;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	getPrimaryKeyFields(): List;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidation3DLandmarksFilesAdapter:
{
	new (value?: any): OracleDegradationValidation3DLandmarksFilesAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidation3DLandmarksFilesAdapter;
}
interface OracleDegradationValidationFeatureNameAdapter
{
	set(arg0: DegradationValidationFeatureName): void;
	getD_featureId(): number;
	setD_featureId(arg0: number): void;
	getD_namePvid(): number;
	setD_namePvid(arg0: number): void;
	getD_sequenceNumber(): number;
	setD_sequenceNumber(arg0: number): void;
	isD_isExonym(): boolean;
	setD_isExonym(arg0: boolean): void;
	getD_basename(): string;
	setD_basename(arg0: string): void;
	getD_languageCode(): string;
	setD_languageCode(arg0: string): void;
	getD_type(): string;
	setD_type(arg0: string): void;
	getD_owner(): string;
	setD_owner(arg0: string): void;
	getFeatureIdFromResultSet(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	closeResultSet(): void;
	getD_adminId(): number;
	setD_adminId(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationFeatureNameAdapter:
{
	new (value?: any): OracleDegradationValidationFeatureNameAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationFeatureNameAdapter;
}
interface OracleDegradationValidationRDMConditionAdapter
{
	next(): boolean;
	setLinkPvid(arg0: List): void;
	setSequenceNumber(arg0: number): void;
	setConditionId(arg0: number): void;
	getAdminPlaceId(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	setLinkId(arg0: List): void;
	getLinkIds(): List;
	getNavLinkIds(): List;
	getConditionId(): number;
	getSequenceNumber(): number;
	getConditionPvid(): number;
	getRDMType(): number;
	getFunctionalClasses(): List;
	getLinkPvids(): List;
	setConditionPvid(arg0: number): void;
	setRDMType(arg0: number): void;
	setFunctionalClasses(arg0: List): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	setAdminPlaceId(arg0: number): void;
	getInsertCommand(arg0: number): string;
	setNavLinkId(arg0: List): void;
	getInt(arg0: string): number;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationRDMConditionAdapter:
{
	new (value?: any): OracleDegradationValidationRDMConditionAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationRDMConditionAdapter;
}
interface OracleDegradationValidationCartoFeatureAdapter
{
	getCartoFeatureId(): number;
	getCartoFeaturePvid(): number;
	getCartoFeatureType(): number;
	getCartoFeatureDisplayClass(): number;
	setCartoFeatureId(arg0: number): void;
	setCartoFeaturePvid(arg0: number): void;
	setCartoFeatureFeatureTypeAttribute(arg0: number): void;
	setCartoFeatureDisplayClassAttribute(arg0: number): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationCartoFeatureAdapter:
{
	new (value?: any): OracleDegradationValidationCartoFeatureAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationCartoFeatureAdapter;
}
interface OracleDegradationValidationLTCConditionAdapter
{
	next(): boolean;
	getNavLinkId(): number;
	setSequenceNumber(arg0: number): void;
	setConditionId(arg0: number): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getConditionId(): number;
	getSequenceNumber(): number;
	getConditionPvid(): number;
	setConditionPvid(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInsertCommand(arg0: number): string;
	setNavLinkId(arg0: number): void;
	getInt(arg0: string): number;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationLTCConditionAdapter:
{
	new (value?: any): OracleDegradationValidationLTCConditionAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationLTCConditionAdapter;
}
interface OracleDegradationValidationMoAssocGPAdapter
{
	getMapobjectId(): number;
	setMapobjectId(arg0: number): void;
	getMapobjectType(): string;
	setMapobjectType(arg0: string): void;
	setAssociationId(arg0: number): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getAssociationId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getInsertCommand(arg0: number): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationMoAssocGPAdapter:
{
	new (value?: any): OracleDegradationValidationMoAssocGPAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationMoAssocGPAdapter;
}
interface OracleTopologySegmentAdapter
{
	set(arg0: TopologySegmentKernel): void;
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getTempTableInfo(): Set;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleTopologySegmentAdapter:
{
	new (value?: any): OracleTopologySegmentAdapter;
	(): any;
	(value: any): any;
	prototype: OracleTopologySegmentAdapter;
}
interface OracleTopologySegNavLinkAdapter
{
	set(arg0: number, arg1: FlatTopologySegNavLink): void;
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getTempTableInfo(): Set;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleTopologySegNavLinkAdapter:
{
	new (value?: any): OracleTopologySegNavLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleTopologySegNavLinkAdapter;
}
interface OracleDegradationValidationNavLinkAttributeAdapter
{
	getNavLinkId(): number;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	setCoverageIndicator(arg0: string): void;
	setCoverageIndicatorSource(arg0: number): void;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getFunctionalClass(): number;
	setSpeedCategorySource(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getFunctionalClassSource(): number;
	getDirectionOfTravelSource(): number;
	getToRefNumLanes(): number;
	getFromRefNumLanes(): number;
	getNumLanesSource(): number;
	getLanesCategory(): string;
	setFunctionalClassSource(arg0: number): void;
	setDirectionOfTravelSource(arg0: number): void;
	setToRefNumLanes(arg0: number): void;
	setFromRefNumLanes(arg0: number): void;
	setNumLanesSource(arg0: number): void;
	getDivider(): string;
	getDirectionOfTravel(): string;
	setFunctionalClass(arg0: number): void;
	setDirectionOfTravel(arg0: string): void;
	setFromRefSpeedLimit(arg0: number): void;
	setToRefSpeedLimit(arg0: number): void;
	setSpeedCategory(arg0: string): void;
	setLaneCategory(arg0: string): void;
	setSpeedLimitDate(arg0: number): void;
	setDividerSource(arg0: number): void;
	setAdasPrecisionCategory(arg0: string): void;
	setAdasGeometryDate(arg0: number): void;
	setDivider(arg0: string): void;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): string;
	getDividerSource(): number;
	getSpeedCategorySource(): number;
	getAdasPrecisionCategory(): string;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getInsertCommand(arg0: number): string;
	setNavLinkId(arg0: number): void;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationNavLinkAttributeAdapter:
{
	new (value?: any): OracleDegradationValidationNavLinkAttributeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationNavLinkAttributeAdapter;
}
interface OracleLinkHistoryAdapter
{
	set(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean, arg9: boolean, arg10: boolean, arg11: boolean, arg12: boolean, arg13: number, arg14: MapEdgeSide, arg15: number, arg16: number, arg17: number, arg18: number, arg19: string): void;
	set(arg0: FlatLinkHistory): void;
	getData(): string;
	item(arg0: FlatLinkHistory): void;
	item(): FlatLinkHistory;
	item(arg0: any): void;
	item(): any;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleLinkHistoryAdapter:
{
	new (value?: any): OracleLinkHistoryAdapter;
	(): any;
	(value: any): any;
	prototype: OracleLinkHistoryAdapter;
}
interface OracleRoadLinkHistoryAdapter
{
	set(arg0: FlatRoadLinkHistory): void;
	getData(): string;
	item(arg0: any): void;
	item(): FlatRoadLinkHistory;
	item(arg0: FlatRoadLinkHistory): void;
	item(): any;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleRoadLinkHistoryAdapter:
{
	new (value?: any): OracleRoadLinkHistoryAdapter;
	(): any;
	(value: any): any;
	prototype: OracleRoadLinkHistoryAdapter;
}
interface OracleCartoLinkHistoryAdapter
{
	set(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean, arg5: string, arg6: number, arg7: string, arg8: string, arg9: boolean): void;
	set(arg0: FlatCartoLinkHistory): void;
	getData(): string;
	item(arg0: any): void;
	item(): FlatCartoLinkHistory;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleCartoLinkHistoryAdapter:
{
	new (value?: any): OracleCartoLinkHistoryAdapter;
	(): any;
	(value: any): any;
	prototype: OracleCartoLinkHistoryAdapter;
}
interface OracleFaceLinkHistoryAdapter
{
	set(arg0: FlatFaceLinkHistory): void;
	getData(): string;
	item(): FlatFaceLinkHistory;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleFaceLinkHistoryAdapter:
{
	new (value?: any): OracleFaceLinkHistoryAdapter;
	(): any;
	(value: any): any;
	prototype: OracleFaceLinkHistoryAdapter;
}
interface OracleNavLinkHistoryAdapter
{
	set(arg0: FlatNavLinkHistory): void;
	dateToString(arg0: Date): string;
	getData(): string;
	item(arg0: FlatNavLinkHistory): void;
	item(): FlatNavLinkHistory;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	setFromResultSet(arg0: ResultSet): void;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleNavLinkHistoryAdapter:
{
	new (value?: any): OracleNavLinkHistoryAdapter;
	(): any;
	(value: any): any;
	prototype: OracleNavLinkHistoryAdapter;
}
interface OracleChangeSequenceObjectAdapter
{
	set(arg0: FlatChangeSequenceObject): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getCreateTriggerCommand(): List;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleChangeSequenceObjectAdapter:
{
	new (value?: any): OracleChangeSequenceObjectAdapter;
	(): any;
	(value: any): any;
	prototype: OracleChangeSequenceObjectAdapter;
}
interface OracleChangeReplacementAdapter
{
	set(arg0: FlatChangeReplacement): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getCreateTriggerCommand(): List;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleChangeReplacementAdapter:
{
	new (value?: any): OracleChangeReplacementAdapter;
	(): any;
	(value: any): any;
	prototype: OracleChangeReplacementAdapter;
}
interface OracleDegradationValidationLinkAlignedAdapter
{
	setLinkPvid(arg0: number): void;
	getLat(): number;
	getLon(): number;
	getIsLinkAligned(): string;
	getIsNodeAligned(): string;
	setIsLinkAligned(arg0: string): void;
	setIsNodeAligned(arg0: string): void;
	setAdminId(arg0: number): void;
	getAdminId(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	setLinkId(arg0: number): void;
	getLinkId(): number;
	getNodeId(): number;
	setLat(arg0: number): void;
	setLon(arg0: number): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	getLinkPvid(): number;
	getInsertCommand(arg0: number): string;
	setNodePvid(arg0: number): void;
	getNodePvid(): number;
	setNodeId(arg0: number): void;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationLinkAlignedAdapter:
{
	new (value?: any): OracleDegradationValidationLinkAlignedAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationLinkAlignedAdapter;
}
interface OracleDegradationValidationRampedNavLinkAdapter
{
	getNavLinkId(): number;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getWhereClause(): string;
	setSpeedCategory(arg0: string): void;
	getSpeedCategory(): string;
	getInsertCommand(arg0: number): string;
	setNavLinkId(arg0: number): void;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDegradationValidationRampedNavLinkAdapter:
{
	new (value?: any): OracleDegradationValidationRampedNavLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDegradationValidationRampedNavLinkAdapter;
}
interface OracleDateTimeModifierAdapter
{
	set(arg0: number, arg1: number, arg2: FlatDateTimeModifier): void;
	sequenceNumber(): number;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	conditionId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleDateTimeModifierAdapter:
{
	new (value?: any): OracleDateTimeModifierAdapter;
	(): any;
	(value: any): any;
	prototype: OracleDateTimeModifierAdapter;
}
interface OracleConditionModifierAdapter
{
	set(arg0: number, arg1: FlatConditionModifier): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	conditionId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleConditionModifierAdapter:
{
	new (value?: any): OracleConditionModifierAdapter;
	(): any;
	(value: any): any;
	prototype: OracleConditionModifierAdapter;
}
interface OracleZoneDetailAdapter
{
	set(arg0: number, arg1: ZoneDetail): void;
	getData(): string;
	item(arg0: any): void;
	item(): ZoneDetail;
	item(): any;
	getZoneId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleZoneDetailAdapter:
{
	new (value?: any): OracleZoneDetailAdapter;
	(): any;
	(value: any): any;
	prototype: OracleZoneDetailAdapter;
}
interface OracleAdminPlaceDetailAdapter
{
	set(arg0: number, arg1: AdminPlaceDetail): void;
	getAdminPlaceId(): number;
	getData(): string;
	item(arg0: any): void;
	item(): AdminPlaceDetail;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleAdminPlaceDetailAdapter:
{
	new (value?: any): OracleAdminPlaceDetailAdapter;
	(): any;
	(value: any): any;
	prototype: OracleAdminPlaceDetailAdapter;
}
interface OracleLinkAdapter
{
	set(arg0: LinkKernel): void;
	getData(): string;
	item(arg0: FlatLink): void;
	item(): any;
	item(arg0: any): void;
	closeResultSet(): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleLinkAdapter:
{
	new (value?: any): OracleLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleLinkAdapter;
}
interface OracleNodeAdapter
{
	set(arg0: NodeKernel): void;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	item(arg0: FlatNode): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleNodeAdapter:
{
	new (value?: any): OracleNodeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleNodeAdapter;
}
interface OracleLaneStrandElementAdapter
{
	set(arg0: number, arg1: number, arg2: number): void;
	set(arg0: number, arg1: FlatLaneStrandElement): void;
	getLaneStrandId(): number;
	getData(): string;
	item(arg0: any): void;
	item(): FlatLaneStrandElement;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleLaneStrandElementAdapter:
{
	new (value?: any): OracleLaneStrandElementAdapter;
	(): any;
	(value: any): any;
	prototype: OracleLaneStrandElementAdapter;
}
interface OraclePoiAssocDetailAdapter
{
	set(arg0: number, arg1: PoiAssocDetail): void;
	getData(): string;
	item(arg0: any): void;
	item(): PoiAssocDetail;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getPoiAssocId(): number;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePoiAssocDetailAdapter:
{
	new (value?: any): OraclePoiAssocDetailAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePoiAssocDetailAdapter;
}
interface OracleNavLinkAdapter
{
	set(arg0: NavLinkKernel): void;
	dateToString(arg0: Date): string;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	item(arg0: FlatNavLink): void;
	item(): FlatNavLink;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	setFromResultSet(arg0: ResultSet): void;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleNavLinkAdapter:
{
	new (value?: any): OracleNavLinkAdapter;
	(): any;
	(value: any): any;
	prototype: OracleNavLinkAdapter;
}
interface OracleExtendedAttributeAdapter
{
	set(arg0: number, arg1: number, arg2: ExtendedAttribute): void;
	getData(): string;
	item(): ExtendedAttribute;
	item(arg0: any): void;
	item(): any;
	mapObjectId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getCreateTriggerCommand(): List;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleExtendedAttributeAdapter:
{
	new (value?: any): OracleExtendedAttributeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleExtendedAttributeAdapter;
}
interface OracleLaneAttributeAdapter
{
	set(arg0: LaneAttribute, arg1: number): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	item(): LaneAttribute;
	navLinkId(): number;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleLaneAttributeAdapter:
{
	new (value?: any): OracleLaneAttributeAdapter;
	(): any;
	(value: any): any;
	prototype: OracleLaneAttributeAdapter;
}
interface OracleTpegReferenceAdapter
{
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getData(): string;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getTempTableInfo(): Set;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleTpegReferenceAdapter:
{
	new (value?: any): OracleTpegReferenceAdapter;
	(): any;
	(value: any): any;
	prototype: OracleTpegReferenceAdapter;
}
interface OraclePOIAdapter
{
	set(arg0: PointOfInterestKernel): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	item(arg0: FlatPointOfInterest): void;
	item(): FlatPointOfInterest;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	colNum(arg0: string): number;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePOIAdapter:
{
	new (value?: any): OraclePOIAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePOIAdapter;
}
interface OracleTrafficDataAdapter
{
	set(arg0: TrafficData): void;
	getData(): string;
	item(): any;
	item(arg0: any): void;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleTrafficDataAdapter:
{
	new (value?: any): OracleTrafficDataAdapter;
	(): any;
	(value: any): any;
	prototype: OracleTrafficDataAdapter;
}
interface OraclePoiFlavourAdapter
{
	set(arg0: number, arg1: string, arg2: string): void;
	getData(): string;
	item(): PoiFlavour;
	item(arg0: PoiFlavour): void;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePoiFlavourAdapter:
{
	new (value?: any): OraclePoiFlavourAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePoiFlavourAdapter;
}
interface OracleGeoQualifierAdapter
{
	set(arg0: number, arg1: number, arg2: number): void;
	getData(): string;
	item(): GeoQualifier;
	item(arg0: GeoQualifier): void;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getGeoQualifiers(): Map;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OracleGeoQualifierAdapter:
{
	new (value?: any): OracleGeoQualifierAdapter;
	(): any;
	(value: any): any;
	prototype: OracleGeoQualifierAdapter;
}
interface OraclePhoneticTextAdapter
{
	set(arg0: number, arg1: number, arg2: string, arg3: string, arg4: string, arg5: string): void;
	getData(): string;
	item(): PhoneticText;
	item(arg0: PhoneticText): void;
	item(arg0: any): void;
	item(): any;
	getTableName(): string;
	getColumns(): string;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getPrimaryKeyFields(): List;
	getParentIdColumnName(): string;
	getPhoneticTexts(): Map;
	getInt(arg0: string): number;
	next(): boolean;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OraclePhoneticTextAdapter:
{
	new (value?: any): OraclePhoneticTextAdapter;
	(): any;
	(value: any): any;
	prototype: OraclePhoneticTextAdapter;
}
interface CompositeExtent
{
	add(arg0: Extent): void;
	remove(arg0: Extent): Extent;
	getComposite(): CompositeExtent;
	getIncludedZoneIds(): List;
	getExcludedZoneIds(): List;
	getIncludedZoneUserCodes(): List;
	getExcludedZoneUserCodes(): List;
	completeNodes(): boolean;
	getChild(arg0: number): Extent;
	getMBR(): GeoRectangle;
	getDefiningExtent(): Extent;
	nChildren(): number;
	adminUserCodes(): Set;
	setCompleteNodes(arg0: boolean): void;
	adminIds(): Set;
	toString(): string;
	isIncluded(arg0: NodeKernel, arg1: Set, arg2: MapContext): boolean;
	getAdminIds(): Set;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CompositeExtent:
{
	new (value?: any): CompositeExtent;
	(): any;
	(value: any): any;
	prototype: CompositeExtent;
}
interface WordToIgnore
{
	equals(arg0: any): boolean;
	getIsoCode(): string;
	setIsoCode(arg0: string): void;
	getLanguageCode(): string;
	setText(arg0: string): void;
	getText(): string;
	setLanguageCode(arg0: string): void;
	readSQL(arg0: SQLInput, arg1: string): void;
	writeSQL(arg0: SQLOutput): void;
	getSQLTypeName(): string;
	toString(): string;
	getClass(): Class;
}
declare var WordToIgnore:
{
	new (value?: any): WordToIgnore;
	(): any;
	(value: any): any;
	prototype: WordToIgnore;
}
interface SuperCategoryConfig
{
	equals(arg0: any): boolean;
	getIsoCode(): string;
	setIsoCode(arg0: string): void;
	getZones(): string;
	readSQL(arg0: SQLInput, arg1: string): void;
	writeSQL(arg0: SQLOutput): void;
	getSQLTypeName(): string;
	getLowerLevel(): number;
	setLowerLevel(arg0: number): void;
	getMunis(): string;
	setMunis(arg0: string): void;
	getUpperLevel(): number;
	setUpperLevel(arg0: number): void;
	setZones(arg0: string): void;
	toString(): string;
	getClass(): Class;
}
declare var SuperCategoryConfig:
{
	new (value?: any): SuperCategoryConfig;
	(): any;
	(value: any): any;
	prototype: SuperCategoryConfig;
}
interface ReaderDescriptor
{
	getURL(): string;
	getReaderClassName(): string;
	getBufferSize(): number;
	getAttribute(arg0: string): string;
	getUser(): string;
	getDriver(): string;
	getPassword(): string;
}
declare var ReaderDescriptor:
{
	new (value?: any): ReaderDescriptor;
	(): any;
	(value: any): any;
	prototype: ReaderDescriptor;
}
interface GroupName
{
	values(): GroupName;
	valueOf(arg0: string): GroupName;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var GroupName:
{
	new (value?: any): GroupName;
	(): any;
	(value: any): any;
	prototype: GroupName;
}
interface LaneNumberType
{
	values(): LaneNumberType;
	valueOf(arg0: string): LaneNumberType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LaneNumberType:
{
	new (value?: any): LaneNumberType;
	(): any;
	(value: any): any;
	prototype: LaneNumberType;
}
interface CartoFeatureSubType
{
	equals(arg0: any): boolean;
	getValue(): number;
	setValue(arg0: number): void;
	setMain(arg0: boolean): void;
	isMain(): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoFeatureSubType:
{
	new (value?: any): CartoFeatureSubType;
	(): any;
	(value: any): any;
	prototype: CartoFeatureSubType;
}
interface NavLinkRoute
{
	navLinks(): List;
	estimatedTime(): double;
	navLinkTraversals(): List;
	waypointNavLinks(): List;
	distance(): double;
	start(): RouteVertex;
	path(): List;
	addRoute(arg0: Route): void;
	end(): RouteVertex;
	getRoutingOptions(): RoutingOptions;
	waypoints(): List;
	cost(): double;
}
declare var NavLinkRoute:
{
	new (value?: any): NavLinkRoute;
	(): any;
	(value: any): any;
	prototype: NavLinkRoute;
}
interface NavLinkTraversal
{
	equals(arg0: any): boolean;
	toString(): string;
	allValidTraversals(arg0: NavLink): Set;
	getNavLink(): NavLink;
	fromOriginAndDestination(arg0: NavLink, arg1: NavLink): NavLinkTraversal;
	getExitNode(): NavNode;
	getEntranceNode(): NavNode;
	fromNavLinkAndExitNavNode(arg0: NavLink, arg1: NavNode): NavLinkTraversal;
	toReferenceNode(arg0: NavLink): NavLinkTraversal;
	fromReferenceNode(arg0: NavLink): NavLinkTraversal;
	getDirection(): NavLinkTraversalDirection;
	toKey(arg0: Set): Collection;
	fromOrientedNavLink(arg0: OrientedNavLink): DirectedNavLinkTraversal;
	getClass(): Class;
}
declare var NavLinkTraversal:
{
	new (value?: any): NavLinkTraversal;
	(): any;
	(value: any): any;
	prototype: NavLinkTraversal;
}
interface RoutingOptions
{
	toString(): string;
	setAllowsTollwayRouting(arg0: boolean): void;
	setWeightsBySpeedCategory(arg0: boolean): void;
	setLongHaulRouting(arg0: boolean): void;
	isAllowsTollwayRouting(): boolean;
	isWeightsBySpeedCategory(): boolean;
	isLongHaulRouting(): boolean;
	isWeightsByFunctionalClass(): boolean;
	setWeightsByFunctionalClass(arg0: boolean): void;
	isWeightsByMonotonicRoute(): boolean;
	setWeightsByMonotonicRoute(arg0: boolean): void;
	fromRoutingStrategy(arg0: RoutingStrategy): RoutingOptions;
	isFastest(): boolean;
	getRoutingStrategy(): RoutingStrategy;
	setRoutingStrategy(arg0: RoutingStrategy): void;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RoutingOptions:
{
	new (value?: any): RoutingOptions;
	(): any;
	(value: any): any;
	prototype: RoutingOptions;
}
interface NavigationRestrictionType
{
	toString(): string;
	values(): NavigationRestrictionType;
	valueOf(arg0: string): NavigationRestrictionType;
	getDescription(): string;
	defaultNavigationRestrictions(): Set;
	sensitivityFilters(): List;
	getRestricter(): Restricter;
	forAccessRestrictionType(arg0: AccessRestrictionType): NavigationRestrictionType;
	name(): string;
	equals(arg0: any): boolean;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var NavigationRestrictionType:
{
	new (value?: any): NavigationRestrictionType;
	(): any;
	(value: any): any;
	prototype: NavigationRestrictionType;
}
interface NavLinkTraversalSource
{
	navLinkTraversal(): NavLinkTraversal;
	sourcePath(): List;
}
declare var NavLinkTraversalSource:
{
	new (value?: any): NavLinkTraversalSource;
	(): any;
	(value: any): any;
	prototype: NavLinkTraversalSource;
}
interface DistanceGraphFilter
{
	getDefaultFilter(): DistanceGraphFilter;
	shouldAddLink(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	shouldExploreLink(arg0: NavLink, arg1: NavNode, arg2: double): ExploreResult;
	shouldAddLength(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DistanceGraphFilter:
{
	new (value?: any): DistanceGraphFilter;
	(): any;
	(value: any): any;
	prototype: DistanceGraphFilter;
}
interface DirectedNavLinkGraph
{
	verticesForNavLink(arg0: NavLink): Set;
	singleVertexFor(arg0: NavLink, arg1: NavLinkTraversalDirection): Vertex;
	toString(): string;
	componentsForLink(arg0: Link): Set;
	isNavLinkExcluded(arg0: NavLink): boolean;
	isEmpty(): boolean;
	size(): number;
	inverseVertex(arg0: Vertex): Vertex;
	inverseVerticesIfExist(arg0: any): Set;
	disconnectedComponents(): Set;
	hasPredecessors(arg0: any): boolean;
	largestComponent(): GraphComponent;
	masterVertex(): Vertex;
	predecessors(arg0: Vertex): Set;
	hasSuccessors(arg0: any): boolean;
	vertices(): Set;
	vertices(arg0: any): Set;
	successorAttributes(arg0: any): Set;
	components(): Set;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DirectedNavLinkGraph:
{
	new (value?: any): DirectedNavLinkGraph;
	(): any;
	(value: any): any;
	prototype: DirectedNavLinkGraph;
}
interface UndirectedNavLinkGraph
{
	verticesForNavLink(arg0: NavLink): Set;
	toString(): string;
	componentsForLink(arg0: Link): Set;
	isNavLinkExcluded(arg0: NavLink): boolean;
	isEmpty(): boolean;
	size(): number;
	inverseVertex(arg0: Vertex): Vertex;
	inverseVerticesIfExist(arg0: any): Set;
	disconnectedComponents(): Set;
	hasPredecessors(arg0: any): boolean;
	largestComponent(): GraphComponent;
	masterVertex(): Vertex;
	predecessors(arg0: Vertex): Set;
	hasSuccessors(arg0: any): boolean;
	vertices(): Set;
	vertices(arg0: any): Set;
	successorAttributes(arg0: any): Set;
	components(): Set;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UndirectedNavLinkGraph:
{
	new (value?: any): UndirectedNavLinkGraph;
	(): any;
	(value: any): any;
	prototype: UndirectedNavLinkGraph;
}
interface RestrictedDrivingManeuvre
{
	isLegal(): boolean;
	rdmType(): number;
	timeOverride(): number;
	isPhysical(): boolean;
	isLogical(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var RestrictedDrivingManeuvre:
{
	new (value?: any): RestrictedDrivingManeuvre;
	(): any;
	(value: any): any;
	prototype: RestrictedDrivingManeuvre;
}
interface DegradationValidationCartoFeature
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getCartoFeaturePreviousDisplayClass(): number;
	getCartoFeatureId(): number;
	getCartoFeaturePvid(): number;
	getCartoFeatureType(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationCartoFeature:
{
	new (value?: any): DegradationValidationCartoFeature;
	(): any;
	(value: any): any;
	prototype: DegradationValidationCartoFeature;
}
interface DegradationValidationRDMCondition
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getRDMConditionType(): number;
	getAdminPlaceId(): number;
	getLinkIds(): List;
	getNavLinkIds(): List;
	getConditionId(): number;
	getConditionPvid(): number;
	getFunctionalClasses(): List;
	getLinkPvids(): List;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationRDMCondition:
{
	new (value?: any): DegradationValidationRDMCondition;
	(): any;
	(value: any): any;
	prototype: DegradationValidationRDMCondition;
}
interface DegradationValidation3DLMFiles
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getFileName(): string;
	getFeatureId(): number;
	setFeatureId(arg0: number): void;
	setFileName(arg0: string): void;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidation3DLMFiles:
{
	new (value?: any): DegradationValidation3DLMFiles;
	(): any;
	(value: any): any;
	prototype: DegradationValidation3DLMFiles;
}
interface DegradationValidationPoiCarto3DLandmarks
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: DegradationValidationVisitor): void;
	accept(arg0: PacketVisitor): void;
	getD_subTypes(): Set;
	getCartoName(): string;
	getPoiName(): string;
	getD_poiCartoId(): number;
	setD_poiCartoId(arg0: number): void;
	getD_cartoId(): number;
	setD_cartoId(arg0: number): void;
	getD_cartoPvid(): number;
	setD_cartoPvid(arg0: number): void;
	getD_poiId(): number;
	setD_poiId(arg0: number): void;
	getD_poiPvid(): number;
	setD_poiPvid(arg0: number): void;
	getD_adminId(): number;
	setD_adminId(arg0: number): void;
	setPoiName(arg0: string): void;
	setCartoName(arg0: string): void;
	setD_subTypes(arg0: Set): void;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationPoiCarto3DLandmarks:
{
	new (value?: any): DegradationValidationPoiCarto3DLandmarks;
	(): any;
	(value: any): any;
	prototype: DegradationValidationPoiCarto3DLandmarks;
}
interface DegradationValidationNavLinkRCFC
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getNavLinkId(): number;
	isInProcessData(): boolean;
	getRoadClassAttribute(): number;
	getFunctionalClassAttribute(): number;
	getSpecialAttribute(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationNavLinkRCFC:
{
	new (value?: any): DegradationValidationNavLinkRCFC;
	(): any;
	(value: any): any;
	prototype: DegradationValidationNavLinkRCFC;
}
interface DegradationValidationCoverageIndicator
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getObjectId(): number;
	getObjectId2(): number;
	getCoverageIndicator(): string;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationCoverageIndicator:
{
	new (value?: any): DegradationValidationCoverageIndicator;
	(): any;
	(value: any): any;
	prototype: DegradationValidationCoverageIndicator;
}
interface DegradationValidationRampedNavLink
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getNavLinkId(): number;
	getSpeedCategory(): string;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationRampedNavLink:
{
	new (value?: any): DegradationValidationRampedNavLink;
	(): any;
	(value: any): any;
	prototype: DegradationValidationRampedNavLink;
}
interface DegradationValidationLinkAligned
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getLat(): number;
	getLon(): number;
	getIsLinkAligned(): string;
	getIsNodeAligned(): string;
	getAdminId(): number;
	getLinkId(): number;
	getNodeId(): number;
	getLinkPvid(): number;
	getNodePvid(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationLinkAligned:
{
	new (value?: any): DegradationValidationLinkAligned;
	(): any;
	(value: any): any;
	prototype: DegradationValidationLinkAligned;
}
interface DegradationValidationNavLinkAttribute
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: DegradationValidationVisitor): void;
	accept(arg0: PacketVisitor): void;
	getNavLinkId(): number;
	getDirectionOFTravelSource(): number;
	getSpeedCategorytSource(): number;
	getFuctionalClasssource(): number;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getFunctionalClass(): number;
	getToRefNumLanes(): number;
	getFromRefNumLanes(): number;
	getNumLanesSource(): number;
	getDivider(): string;
	getDirectionOfTravel(): number;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): number;
	getLaneCategory(): number;
	getDividerSource(): number;
	getAdasPrecisionCategory(): string;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationNavLinkAttribute:
{
	new (value?: any): DegradationValidationNavLinkAttribute;
	(): any;
	(value: any): any;
	prototype: DegradationValidationNavLinkAttribute;
}
interface DegradationValidationFeatureName
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getD_featureId(): number;
	setD_featureId(arg0: number): void;
	getD_namePvid(): number;
	setD_namePvid(arg0: number): void;
	getD_sequenceNumber(): number;
	setD_sequenceNumber(arg0: number): void;
	isD_isExonym(): boolean;
	setD_isExonym(arg0: boolean): void;
	getD_basename(): string;
	setD_basename(arg0: string): void;
	getD_languageCode(): string;
	setD_languageCode(arg0: string): void;
	getD_type(): string;
	setD_type(arg0: string): void;
	getD_owner(): string;
	setD_owner(arg0: string): void;
	getD_adminId(): number;
	setD_adminId(arg0: number): void;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationFeatureName:
{
	new (value?: any): DegradationValidationFeatureName;
	(): any;
	(value: any): any;
	prototype: DegradationValidationFeatureName;
}
interface DegradationValidationLTCCondition
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getNavLinkIds(): List;
	getConditionId(): number;
	getSequenceNumber(): number;
	getConditionPvid(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationLTCCondition:
{
	new (value?: any): DegradationValidationLTCCondition;
	(): any;
	(value: any): any;
	prototype: DegradationValidationLTCCondition;
}
interface DegradationValidationMoAssocGPData
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getMapObjectId(): number;
	getMapObjectType(): string;
	getAssociationId(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationMoAssocGPData:
{
	new (value?: any): DegradationValidationMoAssocGPData;
	(): any;
	(value: any): any;
	prototype: DegradationValidationMoAssocGPData;
}
interface DegradationValidationPoiLocation
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	isAttached(): boolean;
	setLinkPvid(arg0: number): void;
	getPoiPvid(): number;
	setPoiPvid(arg0: number): void;
	setAttached(arg0: boolean): void;
	setPoiId(arg0: number): void;
	setLatitude(arg0: number): void;
	setLongitude(arg0: number): void;
	getLatitude(): number;
	getLongitude(): number;
	setStreetBasename(arg0: string): void;
	setPreceded(arg0: boolean): void;
	setStreetAddress(arg0: string): void;
	setAdminId(arg0: number): void;
	setHouseNoLang(arg0: Map): void;
	setFeatureNames(arg0: Set): void;
	setAllParsedAddress(arg0: Set): void;
	getStreetType(): string;
	getAllActualAddress(): Set;
	setStreetType(arg0: string): void;
	getAdminId(): number;
	setLinkId(arg0: number): void;
	getFeatureType(): number;
	getLinkId(): number;
	getChainId(): number;
	setChainId(arg0: number): void;
	getContacts(): Set;
	setAllActualAddress(arg0: Set): void;
	setContacts(arg0: Set): void;
	getLinkPvid(): number;
	getPoiId(): number;
	setFeatureType(arg0: number): void;
	getDataPacketType(): DataPacketType;
	getStreetBasename(): string;
	isPreceded(): boolean;
	getStreetAddress(): string;
	getHouseNoLang(): Map;
	getAllParsedAddress(): Set;
	getFeatureNames(): Set;
	getClass(): Class;
}
declare var DegradationValidationPoiLocation:
{
	new (value?: any): DegradationValidationPoiLocation;
	(): any;
	(value: any): any;
	prototype: DegradationValidationPoiLocation;
}
interface DegradationValidationCartoAdmin
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getAdminId(): number;
	getCartoId(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationCartoAdmin:
{
	new (value?: any): DegradationValidationCartoAdmin;
	(): any;
	(value: any): any;
	prototype: DegradationValidationCartoAdmin;
}
interface DegradationValidationCarto
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getFeatureType(): number;
	getCartoId(): number;
	getCartoPvid(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationCarto:
{
	new (value?: any): DegradationValidationCarto;
	(): any;
	(value: any): any;
	prototype: DegradationValidationCarto;
}
interface DegradationValidationNamedPlacePoiPopulation
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getPopulation(): number;
	getPoiId(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationNamedPlacePoiPopulation:
{
	new (value?: any): DegradationValidationNamedPlacePoiPopulation;
	(): any;
	(value: any): any;
	prototype: DegradationValidationNamedPlacePoiPopulation;
}
interface DegradationValidationNamedPlacePoiCapitalIndicator
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getCapitalIndicatorLevel(): number;
	getPoiId(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationNamedPlacePoiCapitalIndicator:
{
	new (value?: any): DegradationValidationNamedPlacePoiCapitalIndicator;
	(): any;
	(value: any): any;
	prototype: DegradationValidationNamedPlacePoiCapitalIndicator;
}
interface DegradationValidationPoiOnIpdNo
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: DegradationValidationVisitor): void;
	accept(arg0: PacketVisitor): void;
	getPoiId(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationPoiOnIpdNo:
{
	new (value?: any): DegradationValidationPoiOnIpdNo;
	(): any;
	(value: any): any;
	prototype: DegradationValidationPoiOnIpdNo;
}
interface DegradationValidationLinkBridgeTunnelEI
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getLinkId(): number;
	getBridgeAttribute(): string;
	getTunnelAttribute(): string;
	getEIAttribute(): string;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationLinkBridgeTunnelEI:
{
	new (value?: any): DegradationValidationLinkBridgeTunnelEI;
	(): any;
	(value: any): any;
	prototype: DegradationValidationLinkBridgeTunnelEI;
}
interface DegradationValidationDisputedFeatureAdmin
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getAdminId(): number;
	getCartoId(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationDisputedFeatureAdmin:
{
	new (value?: any): DegradationValidationDisputedFeatureAdmin;
	(): any;
	(value: any): any;
	prototype: DegradationValidationDisputedFeatureAdmin;
}
interface DegradationValidationDisputedFeature
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getFrequency(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	getFeatureType(): number;
	getCartoId(): number;
	getCartoPvid(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationDisputedFeature:
{
	new (value?: any): DegradationValidationDisputedFeature;
	(): any;
	(value: any): any;
	prototype: DegradationValidationDisputedFeature;
}
interface DegradationValidationStackedPoint
{
	equals(arg0: any): boolean;
	accept(arg0: DegradationValidationVisitor): void;
	accept(arg0: PacketVisitor): void;
	getLatitude(): number;
	getLongitude(): number;
	getNumberOfZLevels(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationStackedPoint:
{
	new (value?: any): DegradationValidationStackedPoint;
	(): any;
	(value: any): any;
	prototype: DegradationValidationStackedPoint;
}
interface DegradationValidationOceanAdmin
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getAdminId(): number;
	getCartoId(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationOceanAdmin:
{
	new (value?: any): DegradationValidationOceanAdmin;
	(): any;
	(value: any): any;
	prototype: DegradationValidationOceanAdmin;
}
interface DegradationValidationOceanArea
{
	equals(arg0: any): boolean;
	clone(): any;
	accept(arg0: PacketVisitor): void;
	accept(arg0: DegradationValidationVisitor): void;
	getCartoArea(): number;
	getCartoId(): number;
	getCartoPvid(): number;
	getDataPacketType(): DataPacketType;
	toString(): string;
	getClass(): Class;
}
declare var DegradationValidationOceanArea:
{
	new (value?: any): DegradationValidationOceanArea;
	(): any;
	(value: any): any;
	prototype: DegradationValidationOceanArea;
}
interface FlatCrfNavLink
{
	equals(arg0: any): boolean;
	toString(): string;
	set(arg0: number, arg1: number): void;
	navLinkId(): number;
	crfId(): number;
	getClass(): Class;
}
declare var FlatCrfNavLink:
{
	new (value?: any): FlatCrfNavLink;
	(): any;
	(value: any): any;
	prototype: FlatCrfNavLink;
}
interface RdsTmcLocation
{
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: RdsTmcLocation): number;
	compareTo(arg0: any): number;
	getTmcTableIdString(): string;
	getRdsDirection(): string;
	getLocationIdString(): string;
	getLinkDirection(): string;
	ensureParsed(): boolean;
	isTmcArea(): boolean;
	isValidTmcAreaCodeFormat(): boolean;
	isValidTmcAreaCodeFormat(arg0: string): boolean;
	isValidTmcLinearCodeFormat(): boolean;
	isValidTmcLinearCodeFormat(arg0: string): boolean;
	isValidTmcLinearCodeFormat(arg0: number): boolean;
	isValidTmcLinearCodeFormat(arg0: string, arg1: number): boolean;
	setUpForValidation(arg0: string, arg1: Metadata): void;
	isSetUpForValidation(): boolean;
	getEbuCountryCode(): string;
	isValidTmcTableId(): boolean;
	getTmcCode(): string;
	getLocationTypeCategory(): string;
	getLocationMainType(): number;
	getLocationSubType(): number;
	isWaterArea(): boolean;
	isSeaWaterArea(): boolean;
	isLakeWaterArea(): boolean;
	isFuzzyArea(): boolean;
	isAdminRelated(): boolean;
	isApplicationRegion(): boolean;
	getTmcTableId(): number;
	getLocationId(): number;
	getClass(): Class;
}
declare var RdsTmcLocation:
{
	new (value?: any): RdsTmcLocation;
	(): any;
	(value: any): any;
	prototype: RdsTmcLocation;
}
interface RdsTmcCartoHandling
{
	values(): RdsTmcCartoHandling;
	valueOf(arg0: string): RdsTmcCartoHandling;
	getValue(): string;
	fromDbValue(arg0: string): RdsTmcCartoHandling;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var RdsTmcCartoHandling:
{
	new (value?: any): RdsTmcCartoHandling;
	(): any;
	(value: any): any;
	prototype: RdsTmcCartoHandling;
}
interface BasicName
{
	type(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getType(): string;
	id(): number;
	basename(): string;
	equalsIgnoreSouce(arg0: any): boolean;
	setSequenceNumber(arg0: number): void;
	setNamePvid(arg0: number): void;
	getBasename(): string;
	getLanguageCode(): string;
	setState(arg0: BasicName): void;
	sequenceNumber(): number;
	setBasename(arg0: string): void;
	getShortName(): string;
	setShortName(arg0: string): void;
	setId(arg0: number): void;
	setLanguageCode(arg0: string): void;
	setExonym(arg0: boolean): void;
	isExonym(): boolean;
	getTransliterations(): Set;
	setTransliterations(arg0: Set): void;
	languageCode(): string;
	cleared(): boolean;
	getNamePvid(): number;
	setType(arg0: string): void;
	nameSource(): number;
	getNameSource(): number;
	setNameSource(arg0: number): void;
	clearState(): void;
	getPoiKeyword(): string;
	isRoadName(): boolean;
	getRefSequenceNumber(): number;
	setRefSequenceNumber(arg0: number): void;
	setPoiKeyword(arg0: string): void;
	getClass(): Class;
}
declare var BasicName:
{
	new (value?: any): BasicName;
	(): any;
	(value: any): any;
	prototype: BasicName;
}
interface FlatConditionModifierText
{
	value(): string;
	equals(arg0: any): boolean;
	toString(): string;
	set(arg0: string): void;
	getClass(): Class;
}
declare var FlatConditionModifierText:
{
	new (value?: any): FlatConditionModifierText;
	(): any;
	(value: any): any;
	prototype: FlatConditionModifierText;
}
interface FlatCrfNavNode
{
	equals(arg0: any): boolean;
	toString(): string;
	set(arg0: number, arg1: number): void;
	navNodeId(): number;
	crfId(): number;
	getClass(): Class;
}
declare var FlatCrfNavNode:
{
	new (value?: any): FlatCrfNavNode;
	(): any;
	(value: any): any;
	prototype: FlatCrfNavNode;
}
interface PointOfInterestAttribute
{
	type(): number;
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	modifier(): number;
	getTextModifier(): string;
	setModifier(arg0: number): void;
	setTextModifier(arg0: string): void;
	setType(arg0: number): void;
	getClass(): Class;
}
declare var PointOfInterestAttribute:
{
	new (value?: any): PointOfInterestAttribute;
	(): any;
	(value: any): any;
	prototype: PointOfInterestAttribute;
}
interface FlatPointOfInterestAssociation
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	setParentId(arg0: number): void;
	setChildId(arg0: number): void;
	setAssociationType(arg0: string): void;
	parentId(): number;
	childId(): number;
	associationType(): string;
	clearState(): void;
	getClass(): Class;
}
declare var FlatPointOfInterestAssociation:
{
	new (value?: any): FlatPointOfInterestAssociation;
	(): any;
	(value: any): any;
	prototype: FlatPointOfInterestAssociation;
}
interface PointOfInterestThirdPartyData
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	supplierId(): number;
	guideBookId(): number;
	delivery(): number;
	itemId(): string;
	setSupplierId(arg0: number): void;
	setGuideBookId(arg0: number): void;
	setDelivery(arg0: number): void;
	setItemId(arg0: string): void;
	getClass(): Class;
}
declare var PointOfInterestThirdPartyData:
{
	new (value?: any): PointOfInterestThirdPartyData;
	(): any;
	(value: any): any;
	prototype: PointOfInterestThirdPartyData;
}
interface PointOfInterestContact
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): PointOfInterestContact;
	clone(): any;
	setContactType(arg0: number): void;
	setContact(arg0: string): void;
	setPreferred(arg0: boolean): void;
	getContactType(): number;
	isPreferred(): boolean;
	getContact(): string;
	getClass(): Class;
}
declare var PointOfInterestContact:
{
	new (value?: any): PointOfInterestContact;
	(): any;
	(value: any): any;
	prototype: PointOfInterestContact;
}
interface FeatureFile
{
	equals(arg0: any): boolean;
	getFileName(): string;
	getAttachmentType(): string;
	setAttachmentType(arg0: string): void;
	setFileType(arg0: number): void;
	getFileType(): number;
	setFileName(arg0: string): void;
	toString(): string;
	getClass(): Class;
}
declare var FeatureFile:
{
	new (value?: any): FeatureFile;
	(): any;
	(value: any): any;
	prototype: FeatureFile;
}
interface OracleAdapterForCompositeKernel
{
	whatKindOfKernelIsSupported(): CompositeKernelType;
	getColumns(): string;
	getColList(): List;
	getColByName(arg0: string): DatabaseColumn;
	getTypes(): string;
	getReferenceCommands(): List;
	getKeyCommands(): List;
	getInt(arg0: string): number;
	next(): boolean;
	item(arg0: any): void;
	item(): any;
	closeResultSet(): void;
	currentChangeId(): number;
	setFromResultSet(arg0: ResultSet): void;
	isResultSetNull(): boolean;
	createChangeId(): number;
	setPreparedStatement(arg0: PreparedStatement): void;
	getString(arg0: string): string;
	number(arg0: number): string;
	toBoolean(arg0: string): boolean;
	printSQLException(arg0: SQLException): void;
	indexName(arg0: string, arg1: string): string;
	getControlCommand(): string;
	getSqlldrData(): string;
	getDropTableCommand(): string;
	getCreateTableCommand(): string;
	getTableStatsExist(): boolean;
	getCreateTriggerCommand(): List;
	getSpatialCommands(): List;
	getDeleteCommand(): string;
	getUpdateCommand(arg0: number): string;
	getSelectAllCommand(): string;
	getPrimaryKeyFields(): List;
	setIndexTablespaceName(arg0: string): void;
	setDataTablespaceName(arg0: string): void;
	getUpdateColumnsCommand(arg0: List): string;
	getColumnValue(arg0: string): string;
	getCurrentVersionId(): number;
	setCurrentVersionId(arg0: number): void;
	getCreateVersionId(): number;
	setCreateVersionId(arg0: number): void;
	getParentIdColumnName(): string;
	notNullId(arg0: number): string;
	quoted(arg0: string): string;
	quoted(arg0: string): string;
	getIndexCount(): number;
	sqlData(arg0: string): string;
	getMetadataCommands(arg0: string, arg1: string): List;
	getSqlLoaderTypes(arg0: Array<string>): string;
	getPrimaryKeyWhereClause(): string;
	getRowId(): string;
	setRowId(arg0: string): void;
	getSelectCommand(arg0: number): string;
	getSqlColumnList(arg0: List): string;
	getIndexTablespaceName(): string;
	getDataTablespaceName(): string;
	foreignKeyName(arg0: string, arg1: string): string;
	constraintName(arg0: string, arg1: string): string;
	primaryKeyName(arg0: string, arg1: string): string;
	uniqueKeyName(arg0: string, arg1: string): string;
	baseTableName(arg0: string): string;
	collapsedTableName(arg0: string): string;
	collapsedColumns(arg0: string): string;
	getSqlData(): string;
	booleanToString(arg0: boolean): string;
	fromDate(arg0: Date): string;
	fromBoolean(arg0: boolean): string;
	nullId(arg0: number): string;
	nullChar(arg0: string): string;
	sqlNullId(arg0: number): string;
	getSelectByColumnsCommand(arg0: List): string;
	getColumnsWhereClause(arg0: List): string;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number, arg2: number): void;
	bindPreparedStatementForInsert(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForUpdate(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDelete(arg0: PreparedStatement): void;
	bindPreparedStatementForDeleteByParentId(arg0: PreparedStatement, arg1: number): void;
	bindPreparedStatementForDeleteByKernelId(arg0: PreparedStatement, arg1: number): void;
	getPreparedStatementInsertSql(): string;
	getPreparedStatementDeleteSql(): string;
	getPreparedStatementUpdateSql(): string;
	getDeleteByParentIdCommand(arg0: number): string;
	generateTriggerName(): string;
	getTriggerName(arg0: string): string;
	clearTriggerMap(): void;
	getInsertCommand(arg0: number): string;
	getInsertCommand(arg0: number, arg1: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	getData(): string;
	getTableName(): string;
	getCreateApproach(): CreateTableApproach;
	getMapObjectType(): MapObjectType;
	getTempTableInfo(): Set;
	item(): any;
}
declare var OracleAdapterForCompositeKernel:
{
	new (value?: any): OracleAdapterForCompositeKernel;
	(): any;
	(value: any): any;
	prototype: OracleAdapterForCompositeKernel;
}
interface CreateTableApproach
{
	values(): CreateTableApproach;
	valueOf(arg0: string): CreateTableApproach;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var CreateTableApproach:
{
	new (value?: any): CreateTableApproach;
	(): any;
	(value: any): any;
	prototype: CreateTableApproach;
}
interface DatabaseColumn
{
	lock(): boolean;
	getNote(): string;
	getColType(): string;
	isNullable(): boolean;
	getForeignKeyConstraintTable(): string;
	getForeignKeyConstraintColumns(): string;
	getCheckConstraint(): string;
	initForeignKeyConstraint(arg0: string, arg1: string): DatabaseColumn;
	isLocked(): boolean;
	initCheckConstraint(arg0: string): DatabaseColumn;
	initNote(arg0: string): DatabaseColumn;
	getColName(): string;
	initLock(): DatabaseColumn;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DatabaseColumn:
{
	new (value?: any): DatabaseColumn;
	(): any;
	(value: any): any;
	prototype: DatabaseColumn;
}
interface FlatTopologySegNavLink
{
	equals(arg0: any): boolean;
	toString(): string;
	topologySegmentId(): number;
	setTopologySegmentId(arg0: number): void;
	navLinkId(): number;
	seqNumber(): number;
	setSeqNumber(arg0: number): void;
	setOrientation(arg0: string): void;
	orientation(): string;
	setNavLinkId(arg0: number): void;
	clearState(): void;
	getClass(): Class;
}
declare var FlatTopologySegNavLink:
{
	new (value?: any): FlatTopologySegNavLink;
	(): any;
	(value: any): any;
	prototype: FlatTopologySegNavLink;
}
interface FlatDateTimeModifier
{
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FlatDateTimeModifier:
{
	new (value?: any): FlatDateTimeModifier;
	(): any;
	(value: any): any;
	prototype: FlatDateTimeModifier;
}
interface FlatConditionModifier
{
	type(): number;
	value(): string;
	equals(arg0: any): boolean;
	toString(): string;
	intValue(): number;
	set(arg0: number, arg1: number): void;
	set(arg0: number, arg1: Map): void;
	set(arg0: number, arg1: string): void;
	set(arg0: number, arg1: string, arg2: Map): void;
	modText(): Map;
	setModifierText(arg0: Map): void;
	clearState(): void;
	isTextualModifier(arg0: number): boolean;
	getClass(): Class;
}
declare var FlatConditionModifier:
{
	new (value?: any): FlatConditionModifier;
	(): any;
	(value: any): any;
	prototype: FlatConditionModifier;
}
interface ZoneDetail
{
	equals(arg0: any): boolean;
	toString(): string;
	setDetailType(arg0: ZoneDetailTypeEnum): void;
	getValueText(): string;
	setValueText(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	getDetailType(): ZoneDetailTypeEnum;
	getClass(): Class;
}
declare var ZoneDetail:
{
	new (value?: any): ZoneDetail;
	(): any;
	(value: any): any;
	prototype: ZoneDetail;
}
interface AdminPlaceDetail
{
	equals(arg0: any): boolean;
	toString(): string;
	setDetailType(arg0: AdminPlaceDetailTypeEnum): void;
	getValueText(): string;
	setValueText(arg0: string): void;
	getDetailType(): AdminPlaceDetailTypeEnum;
	getClass(): Class;
}
declare var AdminPlaceDetail:
{
	new (value?: any): AdminPlaceDetail;
	(): any;
	(value: any): any;
	prototype: AdminPlaceDetail;
}
interface FlatLaneStrandElement
{
	equals(arg0: any): boolean;
	toString(): string;
	setNavLaneId(arg0: number): void;
	setSequenceNumber(arg0: number): void;
	sequenceNumber(): number;
	navLaneId(): number;
	getClass(): Class;
}
declare var FlatLaneStrandElement:
{
	new (value?: any): FlatLaneStrandElement;
	(): any;
	(value: any): any;
	prototype: FlatLaneStrandElement;
}
interface PoiAssocDetail
{
	equals(arg0: any): boolean;
	toString(): string;
	setPoiId(arg0: number): void;
	setPoiType(arg0: string): void;
	getPoiId(): number;
	getPoiType(): string;
	getClass(): Class;
}
declare var PoiAssocDetail:
{
	new (value?: any): PoiAssocDetail;
	(): any;
	(value: any): any;
	prototype: PoiAssocDetail;
}
interface ExtendedAttribute
{
	equals(arg0: any): boolean;
	toString(): string;
	set(arg0: number, arg1: string): void;
	attrValue(): string;
	attrId(): number;
	getClass(): Class;
}
declare var ExtendedAttribute:
{
	new (value?: any): ExtendedAttribute;
	(): any;
	(value: any): any;
	prototype: ExtendedAttribute;
}
interface RouteVertex
{
	clear(): void;
	cameFrom(): RouteVertex;
	costPlusHeuristic(): double;
	pathCost(): double;
	heuristic(arg0: Collection): double;
	heuristic(arg0: RouteVertex): double;
	heuristic(): double;
	setCostPlusHeuristic(arg0: double): void;
	setPathCost(arg0: double): void;
	setHeuristic(arg0: double): void;
	setCameFrom(arg0: RouteVertex): void;
	isGoal(arg0: Collection): boolean;
	reconstructPathVertices(): List;
	successors(arg0: RoutingOptions, arg1: boolean): Set;
	compareTo(arg0: any): number;
}
declare var RouteVertex:
{
	new (value?: any): RouteVertex;
	(): any;
	(value: any): any;
	prototype: RouteVertex;
}
interface Route
{
	start(): RouteVertex;
	path(): List;
	addRoute(arg0: Route): void;
	end(): RouteVertex;
	getRoutingOptions(): RoutingOptions;
	waypoints(): List;
	cost(): double;
}
declare var Route:
{
	new (value?: any): Route;
	(): any;
	(value: any): any;
	prototype: Route;
}
interface NavLinkTraversalDirection
{
	values(): NavLinkTraversalDirection;
	valueOf(arg0: string): NavLinkTraversalDirection;
	getExitNode(arg0: NavLink, arg1: NavLinkTraversalDirection): NavNode;
	getEntranceNode(arg0: NavLink, arg1: NavLinkTraversalDirection): NavNode;
	fromNavLink(arg0: NavLink): NavLinkTraversalDirection;
	toNavLinkConstant(): string;
	isFromRef(arg0: NavLink): boolean;
	isFromRefNode(): boolean;
	isFromNonRefNode(): boolean;
	allowsTravelInDirection(arg0: NavLink, arg1: NavLinkTraversalDirection): boolean;
	isBidirectional(): boolean;
	directionToNode(arg0: NavLink, arg1: NavNode): NavLinkTraversalDirection;
	directionFromNode(arg0: NavLink, arg1: NavNode): NavLinkTraversalDirection;
	fromDirectionOfTravel(arg0: string): NavLinkTraversalDirection;
	opposite(arg0: NavLinkTraversalDirection): NavLinkTraversalDirection;
	code(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var NavLinkTraversalDirection:
{
	new (value?: any): NavLinkTraversalDirection;
	(): any;
	(value: any): any;
	prototype: NavLinkTraversalDirection;
}
interface DirectedNavLinkTraversal
{
	equals(arg0: any): boolean;
	toString(): string;
	allValidTraversals(arg0: NavLink): Set;
	getNavLink(): NavLink;
	fromOriginAndDestination(arg0: NavLink, arg1: NavLink): NavLinkTraversal;
	getExitNode(): NavNode;
	getEntranceNode(): NavNode;
	fromNavLinkAndExitNavNode(arg0: NavLink, arg1: NavNode): NavLinkTraversal;
	toReferenceNode(arg0: NavLink): NavLinkTraversal;
	fromReferenceNode(arg0: NavLink): NavLinkTraversal;
	getDirection(): NavLinkTraversalDirection;
	toKey(arg0: Set): Collection;
	fromOrientedNavLink(arg0: OrientedNavLink): DirectedNavLinkTraversal;
	getClass(): Class;
}
declare var DirectedNavLinkTraversal:
{
	new (value?: any): DirectedNavLinkTraversal;
	(): any;
	(value: any): any;
	prototype: DirectedNavLinkTraversal;
}
interface OrientedNavLink
{
	length(): double;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	access(): Set;
	getPriority(): number;
	isPrivate(): boolean;
	names(arg0: string): Set;
	getOffset(): number;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	isValidUnnamed(): boolean;
	orientedLink(): OrientedLink;
	isPoiAccess(): boolean;
	setValidUnnamed(arg0: boolean): void;
	edge(): GeoEdge;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	getFeatureType(): number;
	getToRefPhysicalLanes(): number;
	getToRefNumberLanes(): number;
	getFromRefPhysicalLanes(): number;
	getFromRefNumberLanes(): number;
	navLink(): NavLink;
	isStubLink(): boolean;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	refNavNode(): NavNode;
	nrefNavNode(): NavNode;
	firstNavNode(): NavNode;
	lastNavNode(): NavNode;
	getNRefNavNodeId(): number;
	getRefNavNodeId(): number;
	getLinkId(): number;
	fromNode(): Node;
	toNode(): Node;
	getSupplementalGeoBits(): number;
	getFunctionalClass(): number;
	isInProcessData(): boolean;
	productAdmin(): AdminPlace;
	isMapEdge(): boolean;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	cost(): number;
	display(): Set;
	hasAccess(arg0: number): boolean;
	hasDisplay(arg0: number): boolean;
	hasSpecialAttr(arg0: string): boolean;
	specialAttr(): Set;
	hasSameAttributes(arg0: NavLinkKernel): boolean;
	roadLinks(): List;
	isDivided(): boolean;
	getToNavLanes(): List;
	getFromNavLanes(): List;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	allComponents(): Set;
	getToRefExtendedLanes(): number;
	getFromRefExtendedLanes(): number;
	getCenterDividerMarker(): DividerMarkerType;
	getDivider(): string;
	isReversible(): boolean;
	getProductAdminId(): number;
	getConfidenceScore(): number;
	getExtendedAttributes(): Set;
	setAccess(arg0: number, arg1: boolean): void;
	setTollway(arg0: boolean): void;
	getDirectionOfTravel(): number;
	isRamp(): boolean;
	isPaved(): boolean;
	setDividerLegal(arg0: boolean): void;
	setInProcessData(arg0: boolean): void;
	setPaved(arg0: boolean): void;
	setPrivate(arg0: boolean): void;
	setRamp(arg0: boolean): void;
	setPoiAccess(arg0: boolean): void;
	setControlledAccess(arg0: boolean): void;
	setBoatFerry(arg0: boolean): void;
	setRailFerry(arg0: boolean): void;
	setMultiDig(arg0: boolean): void;
	replaceAllDividerGaps(arg0: List): void;
	setDividerGap(arg0: float): void;
	removeDividerGap(arg0: float): void;
	setFunctionalClass(arg0: number): void;
	setDirectionOfTravel(arg0: number): void;
	setFromRefSpeedLimit(arg0: number): void;
	setToRefSpeedLimit(arg0: number): void;
	setSpeedCategory(arg0: number): void;
	setLaneCategory(arg0: number): void;
	setFromRefNumberLanes(arg0: number): void;
	setToRefNumberLanes(arg0: number): void;
	setFuncClassSource(arg0: number): void;
	setDirOfTravelSource(arg0: number): void;
	setSpeedLimitSource(arg0: number): void;
	setSpeedLimitDate(arg0: number): void;
	setNumberLanesSource(arg0: number): void;
	setDividerSource(arg0: number): void;
	setFrontageRoad(arg0: boolean): void;
	setAdasPrecisionCategory(arg0: string): void;
	setAdasGeometrySource(arg0: number): void;
	setAdasGeometryDate(arg0: number): void;
	setStubLinkBatch(arg0: boolean): void;
	addRoadLink(arg0: RoadLink): void;
	removeRoadLink(arg0: RoadLink): void;
	setDivider(arg0: string): void;
	setLongHaulBatch(arg0: boolean): void;
	setIntersectionCategory(arg0: string): void;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): number;
	getLaneCategory(): number;
	getDirOfTravelSource(): number;
	getDividerSource(): number;
	getNumberLanesSource(): number;
	getSpeedLimitSource(): number;
	getFuncClassSource(): number;
	getSpeedCategorySource(): number;
	isTollway(): boolean;
	isDividerLegal(): boolean;
	isFourWheelDrive(): boolean;
	isHistoricalUSFourWheelDrive(): boolean;
	isControlledAccess(): boolean;
	isBoatFerry(): boolean;
	isRailFerry(): boolean;
	isMultiDig(): boolean;
	getDividerGaps(): List;
	isFrontageRoad(): boolean;
	getAdasPrecisionCategory(): string;
	getAdasGeometrySource(): number;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getIntersectionCategory(): string;
	isMotorway(): boolean;
	isScenicRoute(): boolean;
	getLaneAttributes(): Set;
	isExpressLanes(): boolean;
	isCarpoolRoad(): boolean;
	isParkingLotRoad(): boolean;
	isTransportVerified(): boolean;
	isPublicAccess(): boolean;
	getLowMobility(): number;
	getPrioritySource(): number;
	getGradeCategory(): number;
	getCTlastUpdated(): Date;
	getRoadClass(): number;
	getOverUnderPassIndicator(): number;
	isDeliveryRoad(): boolean;
	getPedestrianPreferred(): number;
	isLimitedAccessRoad(): boolean;
	getBUARoad(): string;
	getInProcessData(): boolean;
	link(): Link;
	getNavLane(arg0: number, arg1: string): NavLane;
	makeFlat(): FlatNavLink;
	makeFlat(): FlatKernel;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	isAccessMotorcycles(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OrientedNavLink:
{
	new (value?: any): OrientedNavLink;
	(): any;
	(value: any): any;
	prototype: OrientedNavLink;
}
interface RoutingStrategy
{
	toString(): string;
	values(): RoutingStrategy;
	valueOf(arg0: string): RoutingStrategy;
	getDescription(): string;
	name(): string;
	equals(arg0: any): boolean;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var RoutingStrategy:
{
	new (value?: any): RoutingStrategy;
	(): any;
	(value: any): any;
	prototype: RoutingStrategy;
}
interface Restricter
{
	restricts(arg0: MapContext, arg1: NavLinkTraversalSource, arg2: NavLink, arg3: boolean): boolean;
	getRestrictionType(): NavigationRestrictionType;
}
declare var Restricter:
{
	new (value?: any): Restricter;
	(): any;
	(value: any): any;
	prototype: Restricter;
}
interface AccessRestrictionType
{
	values(): AccessRestrictionType;
	valueOf(arg0: string): AccessRestrictionType;
	getAccessType(): number;
	defaultAccessRestrictions(): Set;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var AccessRestrictionType:
{
	new (value?: any): AccessRestrictionType;
	(): any;
	(value: any): any;
	prototype: AccessRestrictionType;
}
interface ExploreResult
{
	values(): ExploreResult;
	valueOf(arg0: string): ExploreResult;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var ExploreResult:
{
	new (value?: any): ExploreResult;
	(): any;
	(value: any): any;
	prototype: ExploreResult;
}
interface Vertex
{
	key(): VertexKey;
	visited(): boolean;
	isMasterVertex(): boolean;
	markVisited(): void;
	allSuccessorsVisited(): boolean;
	markAggregated(): void;
	hasSuccessor(arg0: any): boolean;
	aggregated(): boolean;
	successors(): Set;
	attribute(): any;
}
declare var Vertex:
{
	new (value?: any): Vertex;
	(): any;
	(value: any): any;
	prototype: Vertex;
}
interface GraphComponent
{
	type(): GraphComponentType;
	size(): number;
	keys(): Set;
	vertices(): Collection;
	isSource(): boolean;
	isSink(): boolean;
	isIsland(): boolean;
	isPipe(): boolean;
	containsVertex(arg0: any): boolean;
}
declare var GraphComponent:
{
	new (value?: any): GraphComponent;
	(): any;
	(value: any): any;
	prototype: GraphComponent;
}
interface ZoneDetailTypeEnum
{
	values(): ZoneDetailTypeEnum;
	valueOf(arg0: string): ZoneDetailTypeEnum;
	valueOf(arg0: number): ZoneDetailTypeEnum;
	getDetailType(): number;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var ZoneDetailTypeEnum:
{
	new (value?: any): ZoneDetailTypeEnum;
	(): any;
	(value: any): any;
	prototype: ZoneDetailTypeEnum;
}
interface AdminPlaceDetailTypeEnum
{
	get(arg0: number): AdminPlaceDetailTypeEnum;
	values(): AdminPlaceDetailTypeEnum;
	valueOf(arg0: string): AdminPlaceDetailTypeEnum;
	getDetailType(): number;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var AdminPlaceDetailTypeEnum:
{
	new (value?: any): AdminPlaceDetailTypeEnum;
	(): any;
	(value: any): any;
	prototype: AdminPlaceDetailTypeEnum;
}
interface OrientedLink
{
	toString(): string;
	length(): double;
	accept(arg0: MapComponentVisitor): void;
	accept(arg0: KernelVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isBridge(): boolean;
	id(): number;
	cartoFeatures(): Set;
	setLinkPvid(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	undirectedLink(): Link;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	angle(arg0: Link, arg1: Node): double;
	leftPostalArea(): PostalArea;
	rightPostalArea(): PostalArea;
	isUrban(): boolean;
	getLinkProductBoundaryOverrides(): Set;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	viaAreas(): Set;
	setDetailedCity(arg0: boolean): void;
	getGeometrySource(): number;
	setUrban(arg0: boolean): void;
	setGeometrySource(arg0: number): void;
	fromXml(arg0: string): void;
	edge(): GeoEdge;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	features(): Set;
	fromNode(): Node;
	toNode(): Node;
	bearing(arg0: Node): double;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	rightAdminPlace(): AdminPlace;
	isDetailedCity(): boolean;
	refNode(): Node;
	nrefNode(): Node;
	getShape(): List;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	rightAlternateNamedPlaces(): Set;
	leftAlternateNamedPlaces(): Set;
	getRightAlternateNamedPlaceIds(): Set;
	getLeftAlternateNamedPlaceIds(): Set;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	getLinkPvid(): number;
	getExtendedAttributes(): Set;
	leftAdminPlace(): AdminPlace;
	makeFlat(): FlatKernel;
	makeFlat(): FlatLink;
	isAligned(): boolean;
	getMapEdgeId(): number;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	assignEdge(arg0: GeoEdge): void;
	setEdge(arg0: GeoEdge): void;
	setAdminPlace(arg0: AdminPlace, arg1: number): void;
	isBoundary(): boolean;
	nextShape(arg0: Node): GeoPoint;
	hasAdasHeight(): boolean;
	getLinkStats(): LinkStats;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var OrientedLink:
{
	new (value?: any): OrientedLink;
	(): any;
	(value: any): any;
	prototype: OrientedLink;
}
interface VertexKey
{
	equals(arg0: any): boolean;
	toString(): string;
	getId(): string;
	getAttribute(): any;
	hasSource(): boolean;
	getSource(): VertexKey;
	isSourceVertex(): boolean;
	setSourceVertex(arg0: boolean): void;
	getClass(): Class;
}
declare var VertexKey:
{
	new (value?: any): VertexKey;
	(): any;
	(value: any): any;
	prototype: VertexKey;
}
interface GraphComponentType
{
	values(): GraphComponentType;
	valueOf(arg0: string): GraphComponentType;
	deriveComponentType(arg0: boolean, arg1: boolean): GraphComponentType;
	asString(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var GraphComponentType:
{
	new (value?: any): GraphComponentType;
	(): any;
	(value: any): any;
	prototype: GraphComponentType;
}
interface AbsoluteDate
{
	toString(): string;
	setDate(arg0: string): void;
	isValid(arg0: CalendarUnit): boolean;
	date(): string;
	calendarUnit(): CalendarUnit;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AbsoluteDate:
{
	new (value?: any): AbsoluteDate;
	(): any;
	(value: any): any;
	prototype: AbsoluteDate;
}
interface CalendarUnit
{
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
}
declare var CalendarUnit:
{
	new (value?: any): CalendarUnit;
	(): any;
	(value: any): any;
	prototype: CalendarUnit;
}
interface ZoneAdminPlaceUtil
{
	getMissingIds(arg0: ZoneAdminPlace, arg1: MapContext): Set;
	isPartial(arg0: ZoneAdminPlace): boolean;
	checkStructuralIntegrity(arg0: MapContext, arg1: ZoneAdminPlaceKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ZoneAdminPlaceUtil:
{
	new (value?: any): ZoneAdminPlaceUtil;
	(): any;
	(value: any): any;
	prototype: ZoneAdminPlaceUtil;
}
interface AddNavLaneUoW
{
	toString(): string;
	id(): number;
	setNavLane(arg0: NavLaneKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddNavLaneUoW:
{
	new (value?: any): AddNavLaneUoW;
	(): any;
	(value: any): any;
	prototype: AddNavLaneUoW;
}
interface BasicParkingInformation
{
	getParkingType(): ParkingType;
	getParkingApplType(): ParkingRestrictionApply;
	getSideOfStreet(): ParkingSideOfStreet;
	getConditionType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicParkingInformation:
{
	new (value?: any): BasicParkingInformation;
	(): any;
	(value: any): any;
	prototype: BasicParkingInformation;
}
interface ParkingType
{
	values(): ParkingType;
	valueOf(arg0: string): ParkingType;
	getValue(): string;
	getValue(): any;
	getIntValue(): number;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var ParkingType:
{
	new (value?: any): ParkingType;
	(): any;
	(value: any): any;
	prototype: ParkingType;
}
interface ParkingRestrictionApply
{
	values(): ParkingRestrictionApply;
	valueOf(arg0: string): ParkingRestrictionApply;
	getValue(): string;
	getValue(): any;
	getIntValue(): number;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var ParkingRestrictionApply:
{
	new (value?: any): ParkingRestrictionApply;
	(): any;
	(value: any): any;
	prototype: ParkingRestrictionApply;
}
interface ParkingSideOfStreet
{
	values(): ParkingSideOfStreet;
	valueOf(arg0: string): ParkingSideOfStreet;
	getValue(): string;
	getValue(): any;
	getType(arg0: number): ParkingSideOfStreet;
	getIntValue(): number;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var ParkingSideOfStreet:
{
	new (value?: any): ParkingSideOfStreet;
	(): any;
	(value: any): any;
	prototype: ParkingSideOfStreet;
}
interface DateTimeMask
{
	type(): string;
	isDateIntervalMask(): boolean;
	isDayMask(): boolean;
	timeInterval(): TimeInterval;
	isExternalDateMask(): boolean;
	indicatesExcludeDate(): boolean;
	indicatesFromEnd(): boolean;
}
declare var DateTimeMask:
{
	new (value?: any): DateTimeMask;
	(): any;
	(value: any): any;
	prototype: DateTimeMask;
}
interface AddLinksToPolygonsUoW
{
	toString(): string;
	setLonghaul(arg0: boolean): void;
	setCoverageIndicator(arg0: string): void;
	setCoverageIndicatorSource(arg0: number): void;
	setClaimedBy(arg0: string): void;
	setControlledBy(arg0: string): void;
	getNewFaceLinkIds(): Set;
	setUseAlternateFaceGenerator(arg0: boolean): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddLinksToPolygonsUoW:
{
	new (value?: any): AddLinksToPolygonsUoW;
	(): any;
	(value: any): any;
	prototype: AddLinksToPolygonsUoW;
}
interface CopyLinkUoW
{
	toString(): string;
	id(): number;
	setLink(arg0: LinkKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyLinkUoW:
{
	new (value?: any): CopyLinkUoW;
	(): any;
	(value: any): any;
	prototype: CopyLinkUoW;
}
interface UpdateNavLinkDisplayFromLaneTypesUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNavLinkDisplayFromLaneTypesUoW:
{
	new (value?: any): UpdateNavLinkDisplayFromLaneTypesUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNavLinkDisplayFromLaneTypesUoW;
}
interface NamedPlace
{
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	getUserCode(): string;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var NamedPlace:
{
	new (value?: any): NamedPlace;
	(): any;
	(value: any): any;
	prototype: NamedPlace;
}
interface StackedComponentExtension
{
	index(arg0: MapObject): void;
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	stackMap(): Map;
	saveState(): void;
	restoreState(): void;
	savedStates(): number;
	clearSavedStates(): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	perform(): void;
	isEnabled(): boolean;
	setEnabled(arg0: boolean): void;
	extender(): MapContextExtender;
	unindex(arg0: MapObject): void;
	isPartitionMode(): boolean;
	mapContext(): MapContext;
	doAdd(arg0: List, arg1: GeoPoint, arg2: MapComponent): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var StackedComponentExtension:
{
	new (value?: any): StackedComponentExtension;
	(): any;
	(value: any): any;
	prototype: StackedComponentExtension;
}
interface BasicVariableSpeedSign
{
	getConditionType(): number;
	getVssId(): string;
	speedSignLocation(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicVariableSpeedSign:
{
	new (value?: any): BasicVariableSpeedSign;
	(): any;
	(value: any): any;
	prototype: BasicVariableSpeedSign;
}
interface BasicNavStrand
{
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: NavStrandKernel): void;
	getFeatureType(): number;
	navLinks(): List;
	condition(): Condition;
	getNavLinkIds(): List;
	setCondition(arg0: Condition): void;
	orientedStrand(): OrientedStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	allComponents(): Set;
	makeFlat(): FlatNavStrand;
	makeFlat(): FlatKernel;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicNavStrand:
{
	new (value?: any): BasicNavStrand;
	(): any;
	(value: any): any;
	prototype: BasicNavStrand;
}
interface EditZLevelCompositeUoW
{
	toString(): string;
	setGeometrySource(arg0: number): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var EditZLevelCompositeUoW:
{
	new (value?: any): EditZLevelCompositeUoW;
	(): any;
	(value: any): any;
	prototype: EditZLevelCompositeUoW;
}
interface RedundantUtil
{
	remove(arg0: any): any;
	remove(arg0: any): Map;
	get(arg0: any): any;
	get(arg0: any): Map;
	put(arg0: any, arg1: any): any;
	put(arg0: Class, arg1: Map): Map;
	values(): Collection;
	clear(): void;
	isEmpty(): boolean;
	size(): number;
	entrySet(): Set;
	getInstance(): RedundantUtil;
	putAll(arg0: Map): void;
	keySet(): Set;
	containsValue(arg0: any): boolean;
	containsKey(arg0: any): boolean;
	redundFaceLinks(arg0: Link): Set;
	redundCartoLinks(arg0: Link): Set;
	redundCartoFaces(arg0: Face): Set;
	redundCartoFaces(arg0: CartoFeature): Set;
	redundPoiCartos(arg0: PointOfInterest): Set;
	redundNavNodes(arg0: Node): Set;
	redundNavLinks(arg0: Link): Set;
	redundantKernels(arg0: Collection, arg1: Comparator): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	remove(arg0: any, arg1: any): boolean;
	replace(arg0: any, arg1: any): any;
	replace(arg0: any, arg1: any, arg2: any): boolean;
	replaceAll(arg0: BiFunction): void;
	putIfAbsent(arg0: any, arg1: any): any;
	getOrDefault(arg0: any, arg1: any): any;
	forEach(arg0: BiConsumer): void;
	computeIfAbsent(arg0: any, arg1: Function): any;
	computeIfPresent(arg0: any, arg1: BiFunction): any;
	compute(arg0: any, arg1: BiFunction): any;
	merge(arg0: any, arg1: any, arg2: BiFunction): any;
}
declare var RedundantUtil:
{
	new (value?: any): RedundantUtil;
	(): any;
	(value: any): any;
	prototype: RedundantUtil;
}
interface RedundantUtil
{
	remove(arg0: any): any;
	remove(arg0: any): Map;
	get(arg0: any): any;
	get(arg0: any): Map;
	put(arg0: any, arg1: any): any;
	put(arg0: Class, arg1: Map): Map;
	values(): Collection;
	clear(): void;
	isEmpty(): boolean;
	size(): number;
	entrySet(): Set;
	getInstance(): RedundantUtil;
	putAll(arg0: Map): void;
	keySet(): Set;
	containsValue(arg0: any): boolean;
	containsKey(arg0: any): boolean;
	redundFaceLinks(arg0: Link): Set;
	redundCartoLinks(arg0: Link): Set;
	redundCartoFaces(arg0: Face): Set;
	redundCartoFaces(arg0: CartoFeature): Set;
	redundPoiCartos(arg0: PointOfInterest): Set;
	redundNavNodes(arg0: Node): Set;
	redundNavLinks(arg0: Link): Set;
	redundantKernels(arg0: Collection, arg1: Comparator): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	remove(arg0: any, arg1: any): boolean;
	replace(arg0: any, arg1: any): any;
	replace(arg0: any, arg1: any, arg2: any): boolean;
	replaceAll(arg0: BiFunction): void;
	putIfAbsent(arg0: any, arg1: any): any;
	getOrDefault(arg0: any, arg1: any): any;
	forEach(arg0: BiConsumer): void;
	computeIfAbsent(arg0: any, arg1: Function): any;
	computeIfPresent(arg0: any, arg1: BiFunction): any;
	compute(arg0: any, arg1: BiFunction): any;
	merge(arg0: any, arg1: any, arg2: BiFunction): any;
}
declare var RedundantUtil:
{
	new (value?: any): RedundantUtil;
	(): any;
	(value: any): any;
	prototype: RedundantUtil;
}
interface CountryUtil
{
	parent(arg0: Country, arg1: MapContext): AdminPlace;
	country(arg0: Country, arg1: MapContext): Country;
	adminLevelFeatureType(arg0: Country, arg1: number): number;
	getAdminPlaceFromIsoCountryCodes(arg0: Set, arg1: MapContext): Set;
	description(arg0: Country, arg1: number): string;
	boundary(arg0: Country): CartoFeature;
	hasCompletePolygonBoundary(arg0: Country): boolean;
	allComponents(arg0: Country): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: CountryKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CountryUtil:
{
	new (value?: any): CountryUtil;
	(): any;
	(value: any): any;
	prototype: CountryUtil;
}
interface NavLaneWithoutAttrFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NavLaneWithoutAttrFilter:
{
	new (value?: any): NavLaneWithoutAttrFilter;
	(): any;
	(value: any): any;
	prototype: NavLaneWithoutAttrFilter;
}
interface FaceLink
{
	face(): Face;
	link(): Link;
	getFaceId(): number;
	getLinkId(): number;
	isInverted(): boolean;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var FaceLink:
{
	new (value?: any): FaceLink;
	(): any;
	(value: any): any;
	prototype: FaceLink;
}
interface CrfRoad
{
	navLinks(): Set;
	refCrfIntersection(): CrfIntersection;
	nrefCrfIntersection(): CrfIntersection;
	navFeatures(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CrfRoad:
{
	new (value?: any): CrfRoad;
	(): any;
	(value: any): any;
	prototype: CrfRoad;
}
interface CrfIntersection
{
	isnOrderOrphan(arg0: number): boolean;
	navLinks(): Set;
	navNodes(): Set;
	is1stOrderOrphan(): boolean;
	navFeatures(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CrfIntersection:
{
	new (value?: any): CrfIntersection;
	(): any;
	(value: any): any;
	prototype: CrfIntersection;
}
interface CartoStruct
{
	addAllToMapContext(arg0: CartoStruct, arg1: ModifiableMapContext): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoStruct:
{
	new (value?: any): CartoStruct;
	(): any;
	(value: any): any;
	prototype: CartoStruct;
}
interface CartoStruct
{
	addAllToMapContext(arg0: CartoStruct, arg1: ModifiableMapContext): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoStruct:
{
	new (value?: any): CartoStruct;
	(): any;
	(value: any): any;
	prototype: CartoStruct;
}
interface ModifiableMapContext
{
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	update(arg0: Kernel): void;
	setMetadata(arg0: Metadata): void;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	removeFringe(arg0: MapObject): void;
	updateId(arg0: number, arg1: number): void;
	merger(): Merger;
	addScope(arg0: Scope): void;
	removeScope(): void;
	addFringe(arg0: MapObject): void;
	addIncompleteAdmin(arg0: IncompleteAdminPacket): void;
	removeIncompleteAdmin(arg0: number): void;
	addAdditionalData(arg0: Properties): void;
	setEdgeCandidates(arg0: Set): void;
	addMetricsContext(arg0: MetricContext): void;
	clearMetricsContexts(): void;
	addCustomContext(arg0: Class): void;
	getModifiableDegradationValidationContext(): ModifiableDegradationValidationContext;
	extensions(): Set;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number): FeaturePoint;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: NavNode): boolean;
	isIncompleteNode(arg0: Node): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavNode): Set;
	findCrfs(arg0: NavLink): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(): Iterator;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointSize(): number;
	featurePointSize(arg0: FeaturePointType): number;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationSize(): number;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	hasCustomContext(arg0: Class): boolean;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
}
declare var ModifiableMapContext:
{
	new (value?: any): ModifiableMapContext;
	(): any;
	(value: any): any;
	prototype: ModifiableMapContext;
}
interface MapComponentAbstr
{
	toString(): string;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	equals(arg0: any): boolean;
	accept(arg0: KernelVisitor): void;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapComponentVisitor): void;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
}
declare var MapComponentAbstr:
{
	new (value?: any): MapComponentAbstr;
	(): any;
	(value: any): any;
	prototype: MapComponentAbstr;
}
interface RoadLink
{
	toString(): string;
	roadName(): RoadName;
	navLink(): NavLink;
	setLeftAddressRange(arg0: AddressRange): void;
	setRightAddressRange(arg0: AddressRange): void;
	setAddressRangeType(arg0: number): void;
	setNameSource(arg0: number): void;
	refRoadLink(): RoadLink;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	getNavLinkId(): number;
	isValidUnnamed(): boolean;
	getAddressRangeType(): number;
	getLeftAddressRange(): AddressRange;
	getRightAddressRange(): AddressRange;
	getRoadNameId(): number;
	getRefRoadLinkId(): number;
	getRoadLinkPvid(): number;
	getNameSource(): number;
	isExitName(): boolean;
	isExplicatable(): boolean;
	isJunctionName(): boolean;
	isPostalName(): boolean;
	isCommonName(): boolean;
	isScenicName(): boolean;
	isStaleName(): boolean;
	isVanityName(): boolean;
	isBicycleRouteName(): boolean;
	getAttrNameStatus(): number;
}
declare var RoadLink:
{
	new (value?: any): RoadLink;
	(): any;
	(value: any): any;
	prototype: RoadLink;
}
interface NavLanesCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var NavLanesCompositeUoW:
{
	new (value?: any): NavLanesCompositeUoW;
	(): any;
	(value: any): any;
	prototype: NavLanesCompositeUoW;
}
interface PostalAreaAdminPlace
{
	getPostalAreaId(): number;
	getAdminPlaceId(): number;
	postalArea(): PostalArea;
	adminPlace(): AdminPlace;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PostalAreaAdminPlace:
{
	new (value?: any): PostalAreaAdminPlace;
	(): any;
	(value: any): any;
	prototype: PostalAreaAdminPlace;
}
interface LaneLevelCondition
{
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	appliesToLane(arg0: number, arg1: number): boolean;
	hasLaneInfo(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var LaneLevelCondition:
{
	new (value?: any): LaneLevelCondition;
	(): any;
	(value: any): any;
	prototype: LaneLevelCondition;
}
interface MapContextAware
{
	setMapContext(arg0: MapContext): void;
}
declare var MapContextAware:
{
	new (value?: any): MapContextAware;
	(): any;
	(value: any): any;
	prototype: MapContextAware;
}
interface AddVirtualConnectionUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddVirtualConnectionUoW:
{
	new (value?: any): AddVirtualConnectionUoW;
	(): any;
	(value: any): any;
	prototype: AddVirtualConnectionUoW;
}
interface BasicCrfRoad
{
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getLandmarkPoint(): GeoPoint;
	setValidUnnamed(arg0: boolean): void;
	setState(arg0: MapContext, arg1: CompositeRoadFeatureKernel): void;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	refCrfIntersection(): CrfIntersection;
	nrefCrfIntersection(): CrfIntersection;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	getType(): string;
	equivalent(arg0: Kernel): boolean;
	navFeatures(): Set;
	getNavNodeIds(): Set;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getAttachedFiles(): Set;
	navLinks(): Set;
	navNodes(): Set;
	getNavLinkIds(): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	getExtendedAttributes(): Set;
	setType(arg0: string): void;
	makeFlat(): FlatCompositeRoadFeature;
	makeFlat(): FlatKernel;
	getFeatureType(): number;
	getNames(arg0: string): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicCrfRoad:
{
	new (value?: any): BasicCrfRoad;
	(): any;
	(value: any): any;
	prototype: BasicCrfRoad;
}
interface UpdatePointOfInterestUoW
{
	toString(): string;
	setPointOfInterest(arg0: PointOfInterestKernel): void;
	findExceptions(arg0: number, arg1: string, arg2: MapContext): ValidationException;
	updateNGValChangeMessage(arg0: FlatPointOfInterest, arg1: FlatPointOfInterest, arg2: MapContext): void;
	updateNGValMoveMessage(arg0: FlatPointOfInterest, arg1: FlatPointOfInterest, arg2: MapContext): void;
	getLongName(arg0: Metadata, arg1: string, arg2: any): string;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdatePointOfInterestUoW:
{
	new (value?: any): UpdatePointOfInterestUoW;
	(): any;
	(value: any): any;
	prototype: UpdatePointOfInterestUoW;
}
interface ExtendedAttributesUtil
{
	invert(arg0: Set): boolean;
	getExtendedAttribute(arg0: Set, arg1: number): ExtendedAttribute;
	getExtendedAttribute(arg0: Set, arg1: number, arg2: string): ExtendedAttribute;
	getExtendedAttributeWithDefaultValue(arg0: Set, arg1: number, arg2: string): string;
	getAttributeValue(arg0: Set, arg1: number): string;
	containsAttr(arg0: number, arg1: Set): boolean;
	containsAttr(arg0: number, arg1: string, arg2: Set): boolean;
	removeExtendedAttribute(arg0: Set, arg1: number): void;
	removeExtendedAttribute(arg0: Set, arg1: number, arg2: string): void;
	getExpandedInclusionNewAttribute(): ExtendedAttribute;
	removeExpandedInclusionNewAttribute(arg0: Set): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ExtendedAttributesUtil:
{
	new (value?: any): ExtendedAttributesUtil;
	(): any;
	(value: any): any;
	prototype: ExtendedAttributesUtil;
}
interface AddRoadLinkAndNameUoW
{
	toString(): string;
	id(): number;
	named(): boolean;
	setRoadLink(arg0: RoadLinkKernel): void;
	setRoadName(arg0: RoadNameKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddRoadLinkAndNameUoW:
{
	new (value?: any): AddRoadLinkAndNameUoW;
	(): any;
	(value: any): any;
	prototype: AddRoadLinkAndNameUoW;
}
interface EnvironmentalZoneUtil
{
	getConditionType(): number;
	getEnvironmentalZoneId(arg0: ConditionKernel): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var EnvironmentalZoneUtil:
{
	new (value?: any): EnvironmentalZoneUtil;
	(): any;
	(value: any): any;
	prototype: EnvironmentalZoneUtil;
}
interface ParkingInformationUtil
{
	getSideOfStreet(arg0: ConditionKernel): ParkingSideOfStreet;
	getConditionType(): number;
	getRestrictionApplType(arg0: ConditionKernel): ParkingRestrictionApply;
	getRestrictionType(arg0: ConditionKernel): ParkingType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ParkingInformationUtil:
{
	new (value?: any): ParkingInformationUtil;
	(): any;
	(value: any): any;
	prototype: ParkingInformationUtil;
}
interface FaceIntersecterTrace
{
	setOperand(arg0: Face): void;
	intersect(): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FaceIntersecterTrace:
{
	new (value?: any): FaceIntersecterTrace;
	(): any;
	(value: any): any;
	prototype: FaceIntersecterTrace;
}
interface PetrolPoiAttributeFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PetrolPoiAttributeFilter:
{
	new (value?: any): PetrolPoiAttributeFilter;
	(): any;
	(value: any): any;
	prototype: PetrolPoiAttributeFilter;
}
interface RemoveConditionUoW
{
	toString(): string;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveConditionUoW:
{
	new (value?: any): RemoveConditionUoW;
	(): any;
	(value: any): any;
	prototype: RemoveConditionUoW;
}
interface BasicCrfObject
{
	getLandmarkPoint(): GeoPoint;
	setValidUnnamed(arg0: boolean): void;
	setState(arg0: MapContext, arg1: CompositeRoadFeatureKernel): void;
	lon(): number;
	lat(): number;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	getType(): string;
	equivalent(arg0: Kernel): boolean;
	isValidUnnamed(): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	navFeatures(): Set;
	getNavNodeIds(): Set;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getAttachedFiles(): Set;
	navLinks(): Set;
	navNodes(): Set;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	getExtendedAttributes(): Set;
	setType(arg0: string): void;
	makeFlat(): FlatCompositeRoadFeature;
	makeFlat(): FlatKernel;
	names(arg0: string): Set;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicCrfObject:
{
	new (value?: any): BasicCrfObject;
	(): any;
	(value: any): any;
	prototype: BasicCrfObject;
}
interface RouteGuidanceFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var RouteGuidanceFilter:
{
	new (value?: any): RouteGuidanceFilter;
	(): any;
	(value: any): any;
	prototype: RouteGuidanceFilter;
}
interface UsageFeeRequired
{
	getTollSystemType(): number;
	getTollFeatureType(): TollFeatureType;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	appliesToLane(arg0: number, arg1: number): boolean;
	hasLaneInfo(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var UsageFeeRequired:
{
	new (value?: any): UsageFeeRequired;
	(): any;
	(value: any): any;
	prototype: UsageFeeRequired;
}
interface TollFeatureType
{
	toString(): string;
	values(): TollFeatureType;
	valueOf(arg0: string): TollFeatureType;
	getValue(): number;
	getFriendlyName(): string;
	toTollFeatureType(arg0: string): TollFeatureType;
	toTollFeatureType(arg0: number): TollFeatureType;
	name(): string;
	equals(arg0: any): boolean;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var TollFeatureType:
{
	new (value?: any): TollFeatureType;
	(): any;
	(value: any): any;
	prototype: TollFeatureType;
}
interface ThreeDJunctionFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ThreeDJunctionFilter:
{
	new (value?: any): ThreeDJunctionFilter;
	(): any;
	(value: any): any;
	prototype: ThreeDJunctionFilter;
}
interface NatGuidAssocCompositeUoW
{
	toString(): string;
	isIMIExit(): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var NatGuidAssocCompositeUoW:
{
	new (value?: any): NatGuidAssocCompositeUoW;
	(): any;
	(value: any): any;
	prototype: NatGuidAssocCompositeUoW;
}
interface UpdateNGLinkToPOIAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNGLinkToPOIAssociationUoW:
{
	new (value?: any): UpdateNGLinkToPOIAssociationUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNGLinkToPOIAssociationUoW;
}
interface JunctionViewFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var JunctionViewFilter:
{
	new (value?: any): JunctionViewFilter;
	(): any;
	(value: any): any;
	prototype: JunctionViewFilter;
}
interface AddZoneAssociationUoW
{
	toString(): string;
	setZone(arg0: Zone): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddZoneAssociationUoW:
{
	new (value?: any): AddZoneAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddZoneAssociationUoW;
}
interface FilteredMapContext
{
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	update(arg0: Kernel): void;
	extensions(): Set;
	applyFilter(arg0: MapContextFilter): void;
	findCrfsByNavLink(arg0: NavLink): Set;
	findCrfsByNavNode(arg0: NavNode): Set;
	findPoiByRoadLink(arg0: RoadLink): Set;
	updateIdInTables(arg0: MapObject, arg1: number, arg2: number): void;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findRoadName(arg0: number): RoadName;
	findPoi(arg0: number): PointOfInterest;
	findPoi(arg0: RoadLink): Set;
	findNavStrand(arg0: number): NavStrand;
	trimBarrenNodesAndLinks(): void;
	leaveBarrenNodesAndLinks(): void;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	setMetadata(arg0: Metadata): void;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: NavNode): boolean;
	isIncompleteNode(arg0: Node): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointIterator(): Iterator;
	featurePointSize(arg0: FeaturePointType): number;
	featurePointSize(): number;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationSize(): number;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	adder(): Adder;
	remover(): Remover;
	updater(): Updater;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	hasCustomContext(arg0: Class): boolean;
	streetTypeFactory(): StreetTypeFactory;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
	removeFringe(arg0: MapObject): void;
	updateId(arg0: number, arg1: number): void;
	merger(): Merger;
	addScope(arg0: Scope): void;
	removeScope(): void;
	addFringe(arg0: MapObject): void;
	addIncompleteAdmin(arg0: IncompleteAdminPacket): void;
	removeIncompleteAdmin(arg0: number): void;
	addAdditionalData(arg0: Properties): void;
	setEdgeCandidates(arg0: Set): void;
	addMetricsContext(arg0: MetricContext): void;
	clearMetricsContexts(): void;
	addCustomContext(arg0: Class): void;
	getModifiableDegradationValidationContext(): ModifiableDegradationValidationContext;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FilteredMapContext:
{
	new (value?: any): FilteredMapContext;
	(): any;
	(value: any): any;
	prototype: FilteredMapContext;
}
interface MapContextFilter
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
}
declare var MapContextFilter:
{
	new (value?: any): MapContextFilter;
	(): any;
	(value: any): any;
	prototype: MapContextFilter;
}
interface Adder
{
	add(arg0: Kernel): void;
}
declare var Adder:
{
	new (value?: any): Adder;
	(): any;
	(value: any): any;
	prototype: Adder;
}
interface Remover
{
	remove(arg0: number): void;
}
declare var Remover:
{
	new (value?: any): Remover;
	(): any;
	(value: any): any;
	prototype: Remover;
}
interface Updater
{
	update(arg0: Kernel): void;
	versionableCollection(): MapContext;
}
declare var Updater:
{
	new (value?: any): Updater;
	(): any;
	(value: any): any;
	prototype: Updater;
}
interface Merger
{
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
}
declare var Merger:
{
	new (value?: any): Merger;
	(): any;
	(value: any): any;
	prototype: Merger;
}
interface MetricContext
{
	type(): string;
	clear(): void;
	initialize(arg0: MapContext): void;
	initialize(arg0: MapContext, arg1: MetricSet): void;
	metricSet(): MetricSet;
}
declare var MetricContext:
{
	new (value?: any): MetricContext;
	(): any;
	(value: any): any;
	prototype: MetricContext;
}
interface ModifiableDegradationValidationContext
{
	add(arg0: DegradationValidationReferenceData): void;
	cartoFeatures(): Map;
	carto(): Map;
	coverageIndicator(): Map;
	poiOnIpdNo(): Set;
	namedPlacePoiCapitalIndicator(): Map;
	namedPlacePoiPopulation(): Map;
	cartoAdmin(): Map;
	oceanArea(): Map;
	oceanAdmin(): Map;
	poiLocation(): Map;
	zLevelsAtPoint(arg0: number, arg1: number): number;
	disputedFeature(): Map;
	disputedFeatureAdmin(): Map;
	bridgeTunnelEILink(): Map;
	navLinkRCFC(): Map;
	landmarks(): Map;
	poiCarto3DLMFiles(): Map;
	featureNames(): Map;
	rdmCondition(): Map;
	moAssocGPData(): Map;
	ltcConditions(): Map;
	navLinkAttribute(): Map;
	alignedLinks(): Map;
	alignedNodes(): Map;
	rampedNavLinkSpeedCategory(): Map;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ModifiableDegradationValidationContext:
{
	new (value?: any): ModifiableDegradationValidationContext;
	(): any;
	(value: any): any;
	prototype: ModifiableDegradationValidationContext;
}
interface MetricSet
{
	excludeFromIntegrate(): boolean;
	metricsContextClassName(): string;
	metrics(): Collection;
}
declare var MetricSet:
{
	new (value?: any): MetricSet;
	(): any;
	(value: any): any;
	prototype: MetricSet;
}
interface FilterSpec
{
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FilterSpec:
{
	new (value?: any): FilterSpec;
	(): any;
	(value: any): any;
	prototype: FilterSpec;
}
interface AdminIpdSettings
{
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AdminIpdSettings:
{
	new (value?: any): AdminIpdSettings;
	(): any;
	(value: any): any;
	prototype: AdminIpdSettings;
}
interface SpecialExplicationImpl
{
	getConditionType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var SpecialExplicationImpl:
{
	new (value?: any): SpecialExplicationImpl;
	(): any;
	(value: any): any;
	prototype: SpecialExplicationImpl;
}
interface NavStrand
{
	navLinks(): List;
	condition(): Condition;
	orientedStrand(): OrientedStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getNavLinkIds(): List;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var NavStrand:
{
	new (value?: any): NavStrand;
	(): any;
	(value: any): any;
	prototype: NavStrand;
}
interface CIManager
{
	reset(): void;
	addToMap(arg0: number, arg1: CIDelta): void;
	getCI(arg0: number): CIDelta;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CIManager:
{
	new (value?: any): CIManager;
	(): any;
	(value: any): any;
	prototype: CIManager;
}
interface CIDelta
{
	getCurrCI(): string;
	getPrevCI(): string;
	setCurrCI(arg0: string): void;
	setPrevCI(arg0: string): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CIDelta:
{
	new (value?: any): CIDelta;
	(): any;
	(value: any): any;
	prototype: CIDelta;
}
interface AddPointAddressCompositeUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddPointAddressCompositeUoW:
{
	new (value?: any): AddPointAddressCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddPointAddressCompositeUoW;
}
interface RemoveDistanceMarkerToRoadLinkAssocUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveDistanceMarkerToRoadLinkAssocUoW:
{
	new (value?: any): RemoveDistanceMarkerToRoadLinkAssocUoW;
	(): any;
	(value: any): any;
	prototype: RemoveDistanceMarkerToRoadLinkAssocUoW;
}
interface NoOvertakingUtil
{
	getConditionType(): number;
	getWeatherType(arg0: ConditionKernel): WeatherType;
	getDirectionType(arg0: ConditionKernel): DirectionType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NoOvertakingUtil:
{
	new (value?: any): NoOvertakingUtil;
	(): any;
	(value: any): any;
	prototype: NoOvertakingUtil;
}
interface WeatherType
{
	values(): WeatherType;
	valueOf(arg0: string): WeatherType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var WeatherType:
{
	new (value?: any): WeatherType;
	(): any;
	(value: any): any;
	prototype: WeatherType;
}
interface DirectionType
{
	values(): DirectionType;
	valueOf(arg0: string): DirectionType;
	getValue(): string;
	getValue(): any;
	getType(arg0: number): DirectionType;
	reverse(): DirectionType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var DirectionType:
{
	new (value?: any): DirectionType;
	(): any;
	(value: any): any;
	prototype: DirectionType;
}
interface FeatureFileFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	typesFiltered(): Set;
	findTypeValuesForFeatureFileTypeNames(arg0: MapContext, arg1: Set): Set;
	findTypesPresent(arg0: Set): Set;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FeatureFileFilter:
{
	new (value?: any): FeatureFileFilter;
	(): any;
	(value: any): any;
	prototype: FeatureFileFilter;
}
interface TieredQualityScoreFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TieredQualityScoreFilter:
{
	new (value?: any): TieredQualityScoreFilter;
	(): any;
	(value: any): any;
	prototype: TieredQualityScoreFilter;
}
interface UpdateCartoFeatureUoW
{
	toString(): string;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateCartoFeatureUoW:
{
	new (value?: any): UpdateCartoFeatureUoW;
	(): any;
	(value: any): any;
	prototype: UpdateCartoFeatureUoW;
}
interface NGCartoAssocPrefNamesToPoiNamesCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var NGCartoAssocPrefNamesToPoiNamesCompositeUoW:
{
	new (value?: any): NGCartoAssocPrefNamesToPoiNamesCompositeUoW;
	(): any;
	(value: any): any;
	prototype: NGCartoAssocPrefNamesToPoiNamesCompositeUoW;
}
interface DiscoverCitiesOnlyFilter
{
	filter(arg0: MapObject): UnitOfWork;
	discoverCitiesPoiTypes(): Set;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DiscoverCitiesOnlyFilter:
{
	new (value?: any): DiscoverCitiesOnlyFilter;
	(): any;
	(value: any): any;
	prototype: DiscoverCitiesOnlyFilter;
}
interface CIDelta
{
	getCurrCI(): string;
	getPrevCI(): string;
	setCurrCI(arg0: string): void;
	setPrevCI(arg0: string): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CIDelta:
{
	new (value?: any): CIDelta;
	(): any;
	(value: any): any;
	prototype: CIDelta;
}
interface UpdatePostalAreaUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdatePostalAreaUoW:
{
	new (value?: any): UpdatePostalAreaUoW;
	(): any;
	(value: any): any;
	prototype: UpdatePostalAreaUoW;
}
interface BasicThroughRoute
{
	getConditionType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicThroughRoute:
{
	new (value?: any): BasicThroughRoute;
	(): any;
	(value: any): any;
	prototype: BasicThroughRoute;
}
interface UpdateGuidancePointFeaturePointUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateGuidancePointFeaturePointUoW:
{
	new (value?: any): UpdateGuidancePointFeaturePointUoW;
	(): any;
	(value: any): any;
	prototype: UpdateGuidancePointFeaturePointUoW;
}
interface ThroughRoute
{
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var ThroughRoute:
{
	new (value?: any): ThroughRoute;
	(): any;
	(value: any): any;
	prototype: ThroughRoute;
}
interface AddDistanceMarkerCompositeUoW
{
	toString(): string;
	id(): number;
	assocId(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddDistanceMarkerCompositeUoW:
{
	new (value?: any): AddDistanceMarkerCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddDistanceMarkerCompositeUoW;
}
interface PrunerFilter
{
	filter(arg0: MapObject): UnitOfWork;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	description(): string;
}
declare var PrunerFilter:
{
	new (value?: any): PrunerFilter;
	(): any;
	(value: any): any;
	prototype: PrunerFilter;
}
interface DirectedNavLink
{
	equals(arg0: any): boolean;
	navLink(): NavLink;
	endNode(): NavNode;
	toString(): string;
	getClass(): Class;
}
declare var DirectedNavLink:
{
	new (value?: any): DirectedNavLink;
	(): any;
	(value: any): any;
	prototype: DirectedNavLink;
}
interface AddNavLinkUoW
{
	toString(): string;
	id(): number;
	setLink(arg0: NavLinkKernel): void;
	setNavLink(arg0: NavLinkKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddNavLinkUoW:
{
	new (value?: any): AddNavLinkUoW;
	(): any;
	(value: any): any;
	prototype: AddNavLinkUoW;
}
interface UpdateGPToCartoAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateGPToCartoAssociationUoW:
{
	new (value?: any): UpdateGPToCartoAssociationUoW;
	(): any;
	(value: any): any;
	prototype: UpdateGPToCartoAssociationUoW;
}
interface DateTimeMaskFactory
{
	makeDateTimeMask(arg0: string, arg1: string, arg2: string): DateTimeMask;
	makeDateTimeMask(arg0: FlatDateTimeModifier): DateTimeMask;
	makeFlatDateTimeModifier(arg0: DateTimeMask): FlatDateTimeModifier;
	makeFlatCartoValidityModifier(arg0: DateTimeMask): FlatNaturalGuidanceLinkToCartoValidityPeriod;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DateTimeMaskFactory:
{
	new (value?: any): DateTimeMaskFactory;
	(): any;
	(value: any): any;
	prototype: DateTimeMaskFactory;
}
interface FlatNaturalGuidanceLinkToCartoValidityPeriod
{
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FlatNaturalGuidanceLinkToCartoValidityPeriod:
{
	new (value?: any): FlatNaturalGuidanceLinkToCartoValidityPeriod;
	(): any;
	(value: any): any;
	prototype: FlatNaturalGuidanceLinkToCartoValidityPeriod;
}
interface PostalAreaUtil
{
	getFeatureType(arg0: PostalAreaKernel): number;
	applicableAdmins(arg0: PostalAreaKernel): Set;
	allComponents(arg0: PostalArea): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PostalAreaUtil:
{
	new (value?: any): PostalAreaUtil;
	(): any;
	(value: any): any;
	prototype: PostalAreaUtil;
}
interface RemoveRoadPointAddressUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveRoadPointAddressUoW:
{
	new (value?: any): RemoveRoadPointAddressUoW;
	(): any;
	(value: any): any;
	prototype: RemoveRoadPointAddressUoW;
}
interface AddManeuverPointCompositeUoW
{
	toString(): string;
	id(): number;
	assocId(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddManeuverPointCompositeUoW:
{
	new (value?: any): AddManeuverPointCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddManeuverPointCompositeUoW;
}
interface ProtectedOvertaking
{
	getDirectionType(): DirectionType;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var ProtectedOvertaking:
{
	new (value?: any): ProtectedOvertaking;
	(): any;
	(value: any): any;
	prototype: ProtectedOvertaking;
}
interface JunctionViewUtil
{
	getConditionType(): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var JunctionViewUtil:
{
	new (value?: any): JunctionViewUtil;
	(): any;
	(value: any): any;
	prototype: JunctionViewUtil;
}
interface RemoveNodeUoW
{
	toString(): string;
	id(): number;
	setNode(arg0: NodeKernel): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveNodeUoW:
{
	new (value?: any): RemoveNodeUoW;
	(): any;
	(value: any): any;
	prototype: RemoveNodeUoW;
}
interface MapContextPruner
{
	pruneOne(arg0: MapObject): void;
	pruneAll(arg0: Collection): void;
	removeObjects(arg0: Collection): void;
	pruneMapObjectAndDependents(arg0: MapObject): void;
	selectByType(arg0: Collection, arg1: Class): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapContextPruner:
{
	new (value?: any): MapContextPruner;
	(): any;
	(value: any): any;
	prototype: MapContextPruner;
}
interface EvacuationRouteFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var EvacuationRouteFilter:
{
	new (value?: any): EvacuationRouteFilter;
	(): any;
	(value: any): any;
	prototype: EvacuationRouteFilter;
}
interface NavLinkImpl
{
	toString(): string;
	length(): double;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	access(): Set;
	getPriority(): number;
	isPrivate(): boolean;
	getOffset(): number;
	equivalent(arg0: Kernel): boolean;
	isPoiAccess(): boolean;
	edge(): GeoEdge;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	setId(arg0: number): void;
	getFeatureType(): number;
	getToRefPhysicalLanes(): number;
	getToRefNumberLanes(): number;
	getFromRefPhysicalLanes(): number;
	getFromRefNumberLanes(): number;
	isStubLink(): boolean;
	refNavNode(): NavNode;
	nrefNavNode(): NavNode;
	firstNavNode(): NavNode;
	lastNavNode(): NavNode;
	getNRefNavNodeId(): number;
	getRefNavNodeId(): number;
	getLinkId(): number;
	getSupplementalGeoBits(): number;
	getFunctionalClass(): number;
	isInProcessData(): boolean;
	productAdmin(): AdminPlace;
	addLaneAttribute(arg0: LaneAttribute): void;
	removeLaneAttribute(arg0: LaneAttribute): void;
	isMapEdge(): boolean;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	setScenicRoute(arg0: boolean): void;
	setSpeedCategorySource(arg0: number): void;
	componentIds(): Collection;
	cost(): number;
	display(): Set;
	hasAccess(arg0: number): boolean;
	hasDisplay(arg0: number): boolean;
	hasSpecialAttr(arg0: string): boolean;
	specialAttr(): Set;
	hasSameAttributes(arg0: NavLinkKernel): boolean;
	roadLinks(): List;
	isDivided(): boolean;
	getToNavLanes(): List;
	getFromNavLanes(): List;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	allComponents(): Set;
	getToRefExtendedLanes(): number;
	getFromRefExtendedLanes(): number;
	getCenterDividerMarker(): DividerMarkerType;
	getDivider(): string;
	isReversible(): boolean;
	getProductAdminId(): number;
	getConfidenceScore(): number;
	getExtendedAttributes(): Set;
	setAccess(arg0: number, arg1: boolean): void;
	setTollway(arg0: boolean): void;
	getDirectionOfTravel(): number;
	isRamp(): boolean;
	isPaved(): boolean;
	setDividerLegal(arg0: boolean): void;
	setInProcessData(arg0: boolean): void;
	setPaved(arg0: boolean): void;
	setPrivate(arg0: boolean): void;
	setRamp(arg0: boolean): void;
	setPoiAccess(arg0: boolean): void;
	setControlledAccess(arg0: boolean): void;
	setBoatFerry(arg0: boolean): void;
	setRailFerry(arg0: boolean): void;
	setMultiDig(arg0: boolean): void;
	replaceAllDividerGaps(arg0: List): void;
	setDividerGap(arg0: float): void;
	removeDividerGap(arg0: float): void;
	setFunctionalClass(arg0: number): void;
	setDirectionOfTravel(arg0: number): void;
	setFromRefSpeedLimit(arg0: number): void;
	setToRefSpeedLimit(arg0: number): void;
	setSpeedCategory(arg0: number): void;
	setLaneCategory(arg0: number): void;
	setFromRefNumberLanes(arg0: number): void;
	setToRefNumberLanes(arg0: number): void;
	setFuncClassSource(arg0: number): void;
	setDirOfTravelSource(arg0: number): void;
	setSpeedLimitSource(arg0: number): void;
	setSpeedLimitDate(arg0: number): void;
	setNumberLanesSource(arg0: number): void;
	setDividerSource(arg0: number): void;
	setFrontageRoad(arg0: boolean): void;
	setAdasPrecisionCategory(arg0: string): void;
	setAdasGeometrySource(arg0: number): void;
	setAdasGeometryDate(arg0: number): void;
	setStubLinkBatch(arg0: boolean): void;
	addRoadLink(arg0: RoadLink): void;
	removeRoadLink(arg0: RoadLink): void;
	setDivider(arg0: string): void;
	setLongHaulBatch(arg0: boolean): void;
	setIntersectionCategory(arg0: string): void;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): number;
	getLaneCategory(): number;
	getDirOfTravelSource(): number;
	getDividerSource(): number;
	getNumberLanesSource(): number;
	getSpeedLimitSource(): number;
	getFuncClassSource(): number;
	getSpeedCategorySource(): number;
	isTollway(): boolean;
	isDividerLegal(): boolean;
	isFourWheelDrive(): boolean;
	isHistoricalUSFourWheelDrive(): boolean;
	isControlledAccess(): boolean;
	isBoatFerry(): boolean;
	isRailFerry(): boolean;
	isMultiDig(): boolean;
	getDividerGaps(): List;
	isFrontageRoad(): boolean;
	getAdasPrecisionCategory(): string;
	getAdasGeometrySource(): number;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getIntersectionCategory(): string;
	isMotorway(): boolean;
	isScenicRoute(): boolean;
	getLaneAttributes(): Set;
	isExpressLanes(): boolean;
	isCarpoolRoad(): boolean;
	isParkingLotRoad(): boolean;
	isTransportVerified(): boolean;
	isPublicAccess(): boolean;
	getLowMobility(): number;
	getPrioritySource(): number;
	getGradeCategory(): number;
	getCTlastUpdated(): Date;
	getRoadClass(): number;
	getOverUnderPassIndicator(): number;
	isDeliveryRoad(): boolean;
	getPedestrianPreferred(): number;
	isLimitedAccessRoad(): boolean;
	getBUARoad(): string;
	link(): Link;
	getNavLane(arg0: number, arg1: string): NavLane;
	makeFlat(): FlatNavLink;
	makeFlat(): FlatKernel;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	isAccessMotorcycles(): boolean;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	id(): number;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var NavLinkImpl:
{
	new (value?: any): NavLinkImpl;
	(): any;
	(value: any): any;
	prototype: NavLinkImpl;
}
interface PoiUtility
{
	getEstimatedGeoPoint(arg0: PointOfInterest, arg1: MapContext): GeoPoint;
	getEstimatedLinkPoint(arg0: PointOfInterest, arg1: MapContext): GeoPoint;
	getLinkPoint(arg0: PointOfInterest, arg1: MapContext): GeoPoint;
	orthogonalOffsetFromPFRN(arg0: double, arg1: string, arg2: number, arg3: Link, arg4: boolean): GeoPoint;
	orthogonalOffsetFromPoint(arg0: GeoPoint, arg1: string, arg2: number, arg3: Link, arg4: boolean): GeoPoint;
	actualAddressRange(arg0: RoadLink, arg1: string, arg2: Metadata): AddressRange;
	actualAddressRange(arg0: RoadLink, arg1: string, arg2: Metadata, arg3: boolean): AddressRange;
	findSourceCode70(arg0: Link): boolean;
	getPoiAdmin(arg0: PointOfInterest): AdminPlace;
	getPoiPreferredLang(arg0: PointOfInterest): string;
	getPoiCountry(arg0: PointOfInterest): Country;
	getDefaultLangBaseName(arg0: PointOfInterest): FeatureName;
	getDefltMultilingualBaseName(arg0: PointOfInterest, arg1: Metadata): FeatureName;
	getGeoPoint(arg0: PointOfInterest, arg1: MapContext, arg2: number): GeoPoint;
	getGeoPoint(arg0: PointOfInterest, arg1: MapContext): GeoPoint;
	getGeoPoint(arg0: PointOfInterest, arg1: MapContext, arg2: boolean): GeoPoint;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PoiUtility:
{
	new (value?: any): PoiUtility;
	(): any;
	(value: any): any;
	prototype: PoiUtility;
}
interface RemoveVirtualConnectionUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveVirtualConnectionUoW:
{
	new (value?: any): RemoveVirtualConnectionUoW;
	(): any;
	(value: any): any;
	prototype: RemoveVirtualConnectionUoW;
}
interface RemovePoiAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemovePoiAssociationUoW:
{
	new (value?: any): RemovePoiAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemovePoiAssociationUoW;
}
interface MapContextPartition
{
	removeNode(arg0: Node): void;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	addLaneStrand(arg0: LaneStrand): void;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	indexFace(arg0: Face): void;
	unindexFace(arg0: Face): void;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: Node): boolean;
	isIncompleteNode(arg0: NavNode): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	partialIterator(): Iterator;
	cartoFaceIterator(): Iterator;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	findRoadPoint(arg0: RoadLink): Set;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointIterator(): Iterator;
	featurePointSize(arg0: FeaturePointType): number;
	featurePointSize(): number;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	mapObjectAssociationSize(): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	addAnnotation(arg0: Annotation): void;
	removeNavLink(arg0: NavLink): void;
	addNavLink(arg0: NavLink): void;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	mapContext(): MapContext;
	addRoadLink(arg0: RoadLink): void;
	removeRoadLink(arg0: RoadLink): void;
	indexLink(arg0: Link): void;
	unindexLink(arg0: Link): void;
	addFace(arg0: Face): void;
	removeFace(arg0: Face): void;
	addFaceLink(arg0: FaceLink): void;
	removeFaceLink(arg0: FaceLink): void;
	indexFaceLink(arg0: FaceLink): void;
	unindexFaceLink(arg0: FaceLink): void;
	addNode(arg0: Node): void;
	indexNode(arg0: Node): void;
	unindexNode(arg0: Node): void;
	indexNavLink(arg0: NavLink): void;
	unindexNavLink(arg0: NavLink): void;
	addNavNode(arg0: NavNode): void;
	removeNavNode(arg0: NavNode): void;
	indexNavNode(arg0: NavNode): void;
	unindexNavNode(arg0: NavNode): void;
	addNavStrand(arg0: NavStrand): void;
	removeNavStrand(arg0: NavStrand): void;
	indexNavStrand(arg0: NavStrand): void;
	unindexNavStrand(arg0: NavStrand): void;
	indexRoadLink(arg0: RoadLink): void;
	unindexRoadLink(arg0: RoadLink): void;
	removeSign(arg0: Sign): void;
	indexSign(arg0: Sign): void;
	unindexSign(arg0: Sign): void;
	removeCartoFeature(arg0: CartoFeature): void;
	indexCartoFeature(arg0: CartoFeature): void;
	unindexCartoFeature(arg0: CartoFeature): void;
	addPoiCarto(arg0: PoiCarto): void;
	removePoiCarto(arg0: PoiCarto): void;
	unindexPoiCarto(arg0: PoiCarto): void;
	indexPoiCarto(arg0: PoiCarto): void;
	removePoi(arg0: PointOfInterest): void;
	indexPoi(arg0: PointOfInterest): void;
	unindexPoi(arg0: PointOfInterest): void;
	addPoiAssoc(arg0: PoiAssoc): void;
	removePoiAssoc(arg0: PoiAssoc): void;
	indexPoiAssoc(arg0: PoiAssoc): void;
	unindexPoiAssoc(arg0: PoiAssoc): void;
	addCondition(arg0: Condition): void;
	removeCondition(arg0: Condition): void;
	indexCondition(arg0: Condition): void;
	unindexCondition(arg0: Condition): void;
	addCrf(arg0: CompositeRoadFeature): void;
	removeCrf(arg0: CompositeRoadFeature): void;
	indexCrf(arg0: CompositeRoadFeature): void;
	unindexCrf(arg0: CompositeRoadFeature): void;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	removePostalArea(arg0: PostalArea): void;
	indexPostalArea(arg0: PostalArea): void;
	unindexPostalArea(arg0: PostalArea): void;
	removeZone(arg0: Zone): void;
	indexZone(arg0: Zone): void;
	unindexZone(arg0: Zone): void;
	addValidationException(arg0: ValidationException): void;
	removeValidationException(arg0: ValidationException): void;
	indexValidationException(arg0: ValidationException): void;
	unindexValidationException(arg0: ValidationException): void;
	findPartials(arg0: number): Set;
	addCartoLink(arg0: CartoLink): void;
	removeCartoLink(arg0: CartoLink): void;
	indexCartoLink(arg0: CartoLink): void;
	unindexCartoLink(arg0: CartoLink): void;
	addCartoFace(arg0: CartoFace): void;
	removeCartoFace(arg0: CartoFace): void;
	indexCartoFace(arg0: CartoFace): void;
	unindexCartoFace(arg0: CartoFace): void;
	addRoadPoint(arg0: RoadPoint): void;
	removeRoadPoint(arg0: RoadPoint): void;
	indexRoadPoint(arg0: RoadPoint): void;
	unindexRoadPoint(arg0: RoadPoint): void;
	addPostalAreaZone(arg0: PostalAreaZone): void;
	removePostalAreaZone(arg0: PostalAreaZone): void;
	indexPostalAreaZone(arg0: PostalAreaZone): void;
	unindexPostalAreaZone(arg0: PostalAreaZone): void;
	addPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	removePostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	indexPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	unindexPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	addZoneAdminPlace(arg0: ZoneAdminPlace): void;
	removeZoneAdminPlace(arg0: ZoneAdminPlace): void;
	indexZoneAdminPlace(arg0: ZoneAdminPlace): void;
	unindexZoneAdminPlace(arg0: ZoneAdminPlace): void;
	addFeaturePoint(arg0: FeaturePoint): void;
	removeFeaturePoint(arg0: FeaturePoint): void;
	indexFeaturePoint(arg0: FeaturePoint): void;
	unindexFeaturePoint(arg0: FeaturePoint): void;
	addMapObjectAssociation(arg0: MapObjectAssociation): void;
	removeMapObjectAssociation(arg0: MapObjectAssociation): void;
	indexMapObjectAssociation(arg0: MapObjectAssociation): void;
	unindexMapObjectAssociation(arg0: MapObjectAssociation): void;
	removeAnnotation(arg0: Annotation): void;
	indexAnnotation(arg0: Annotation): void;
	unindexAnnotation(arg0: Annotation): void;
	addNavLane(arg0: NavLane): void;
	removeNavLane(arg0: NavLane): void;
	indexNavLane(arg0: NavLane): void;
	unindexNavLane(arg0: NavLane): void;
	removeLaneStrand(arg0: LaneStrand): void;
	indexLaneStrand(arg0: LaneStrand): void;
	unindexLaneStrand(arg0: LaneStrand): void;
	addUnvalidatedChange(arg0: UnvalidatedChange): void;
	removeUnvalidatedChange(arg0: UnvalidatedChange): void;
	indexUnvalidatedChange(arg0: UnvalidatedChange): void;
	unindexUnvalidatedChange(arg0: UnvalidatedChange): void;
	updateAnnotation(arg0: Annotation): void;
	updateCartoFace(arg0: CartoFace): void;
	updateCartoFeature(arg0: CartoFeature): void;
	updateCartoLink(arg0: CartoLink): void;
	updateCompositeRoadFeature(arg0: CompositeRoadFeature): void;
	updateCondition(arg0: Condition): void;
	updateFace(arg0: Face): void;
	updateFaceLink(arg0: FaceLink): void;
	updateFeaturePoint(arg0: FeaturePoint): void;
	updateLaneStrand(arg0: LaneStrand): void;
	updateLink(arg0: Link): void;
	updateMapObjectAssociation(arg0: MapObjectAssociation): void;
	updateNavLane(arg0: NavLane): void;
	updateNavLink(arg0: NavLink): void;
	updateNavNode(arg0: NavNode): void;
	updateNavStrand(arg0: NavStrand): void;
	updateNode(arg0: Node): void;
	updatePoiAssoc(arg0: PoiAssoc): void;
	updatePoiCarto(arg0: PoiCarto): void;
	updatePointOfInterest(arg0: PointOfInterest): void;
	updatePostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	updatePostalArea(arg0: PostalArea): void;
	updatePostalAreaZone(arg0: PostalAreaZone): void;
	updateRoadLink(arg0: RoadLink): void;
	updateRoadPoint(arg0: RoadPoint): void;
	updateSign(arg0: Sign): void;
	updateValidationException(arg0: ValidationException): void;
	updateZoneAdminPlace(arg0: ZoneAdminPlace): void;
	updateZone(arg0: Zone): void;
	addViaArea(arg0: ViaArea): void;
	removeViaArea(arg0: ViaArea): void;
	updateViaArea(arg0: ViaArea): void;
	indexViaArea(arg0: ViaArea): void;
	unindexViaArea(arg0: ViaArea): void;
	addViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	removeViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	updateViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	indexViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	unindexViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	addViaAreaRLLink(arg0: ViaAreaRLLink): void;
	removeViaAreaRLLink(arg0: ViaAreaRLLink): void;
	updateViaAreaRLLink(arg0: ViaAreaRLLink): void;
	indexViaAreaRLLink(arg0: ViaAreaRLLink): void;
	unindexViaAreaRLLink(arg0: ViaAreaRLLink): void;
	addVirtualConnection(arg0: VirtualConnection): void;
	removeVirtualConnection(arg0: VirtualConnection): void;
	updateVirtualConnection(arg0: VirtualConnection): void;
	indexVirtualConnection(arg0: VirtualConnection): void;
	unindexVirtualConnection(arg0: VirtualConnection): void;
	addTopologySegment(arg0: TopologySegment): void;
	removeTopologySegment(arg0: TopologySegment): void;
	indexTopologySegment(arg0: TopologySegment): void;
	unindexTopologySegment(arg0: TopologySegment): void;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	addLink(arg0: Link): void;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	removeLink(arg0: Link): void;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
}
declare var MapContextPartition:
{
	new (value?: any): MapContextPartition;
	(): any;
	(value: any): any;
	prototype: MapContextPartition;
}
interface BasicGuidanceFeaturePoint
{
	toString(): string;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: FeaturePointTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): FeaturePointType;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	setFeaturePointState(arg0: MapContext, arg1: FeaturePointKernel): void;
	makeFlat(): FlatGuidancePointFeaturePoint;
	makeFlat(): FlatKernel;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	directionOfTravel(): DirectionOfTravel;
	accept(arg0: KernelVisitor): void;
	setState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeatureType(): number;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	calcPercentFromRef(): double;
	allComponents(): Set;
	link(): Link;
	getPoint(): GeoPoint;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicGuidanceFeaturePoint:
{
	new (value?: any): BasicGuidanceFeaturePoint;
	(): any;
	(value: any): any;
	prototype: BasicGuidanceFeaturePoint;
}
interface FlatGuidancePointFeaturePoint
{
	toString(): string;
	accept(arg0: FeaturePointTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: GuidancePointFeaturePointKernel, arg1: GuidancePointFeaturePointKernel): boolean;
	compositeKernelType(): FeaturePointType;
	compositeKernelType(): CompositeKernelType;
	kernelType(): Class;
	setFeaturePointState(arg0: FeaturePointKernel): void;
	isFeaturePointCleared(): boolean;
	clearFeaturePoint(): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatGuidancePointFeaturePoint;
	getDataPacketType(): DataPacketType;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	setPoint(arg0: GeoPoint): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	getLinkId(): number;
	setFeaturePointPvid(arg0: number): void;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	cleared(): boolean;
	invert(): void;
	setLinkSide(arg0: LinkSide): void;
	getPoint(): GeoPoint;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatGuidancePointFeaturePoint:
{
	new (value?: any): FlatGuidancePointFeaturePoint;
	(): any;
	(value: any): any;
	prototype: FlatGuidancePointFeaturePoint;
}
interface OrientedNavLink
{
	length(): double;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	access(): Set;
	getPriority(): number;
	isPrivate(): boolean;
	names(arg0: string): Set;
	getOffset(): number;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	isValidUnnamed(): boolean;
	orientedLink(): OrientedLink;
	isPoiAccess(): boolean;
	setValidUnnamed(arg0: boolean): void;
	edge(): GeoEdge;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	getFeatureType(): number;
	getToRefPhysicalLanes(): number;
	getToRefNumberLanes(): number;
	getFromRefPhysicalLanes(): number;
	getFromRefNumberLanes(): number;
	navLink(): NavLink;
	isStubLink(): boolean;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	refNavNode(): NavNode;
	nrefNavNode(): NavNode;
	firstNavNode(): NavNode;
	lastNavNode(): NavNode;
	getNRefNavNodeId(): number;
	getRefNavNodeId(): number;
	getLinkId(): number;
	fromNode(): Node;
	toNode(): Node;
	getSupplementalGeoBits(): number;
	getFunctionalClass(): number;
	isInProcessData(): boolean;
	productAdmin(): AdminPlace;
	isMapEdge(): boolean;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	cost(): number;
	display(): Set;
	hasAccess(arg0: number): boolean;
	hasDisplay(arg0: number): boolean;
	hasSpecialAttr(arg0: string): boolean;
	specialAttr(): Set;
	hasSameAttributes(arg0: NavLinkKernel): boolean;
	roadLinks(): List;
	isDivided(): boolean;
	getToNavLanes(): List;
	getFromNavLanes(): List;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	allComponents(): Set;
	getToRefExtendedLanes(): number;
	getFromRefExtendedLanes(): number;
	getCenterDividerMarker(): DividerMarkerType;
	getDivider(): string;
	isReversible(): boolean;
	getProductAdminId(): number;
	getConfidenceScore(): number;
	getExtendedAttributes(): Set;
	setAccess(arg0: number, arg1: boolean): void;
	setTollway(arg0: boolean): void;
	getDirectionOfTravel(): number;
	isRamp(): boolean;
	isPaved(): boolean;
	setDividerLegal(arg0: boolean): void;
	setInProcessData(arg0: boolean): void;
	setPaved(arg0: boolean): void;
	setPrivate(arg0: boolean): void;
	setRamp(arg0: boolean): void;
	setPoiAccess(arg0: boolean): void;
	setControlledAccess(arg0: boolean): void;
	setBoatFerry(arg0: boolean): void;
	setRailFerry(arg0: boolean): void;
	setMultiDig(arg0: boolean): void;
	replaceAllDividerGaps(arg0: List): void;
	setDividerGap(arg0: float): void;
	removeDividerGap(arg0: float): void;
	setFunctionalClass(arg0: number): void;
	setDirectionOfTravel(arg0: number): void;
	setFromRefSpeedLimit(arg0: number): void;
	setToRefSpeedLimit(arg0: number): void;
	setSpeedCategory(arg0: number): void;
	setLaneCategory(arg0: number): void;
	setFromRefNumberLanes(arg0: number): void;
	setToRefNumberLanes(arg0: number): void;
	setFuncClassSource(arg0: number): void;
	setDirOfTravelSource(arg0: number): void;
	setSpeedLimitSource(arg0: number): void;
	setSpeedLimitDate(arg0: number): void;
	setNumberLanesSource(arg0: number): void;
	setDividerSource(arg0: number): void;
	setFrontageRoad(arg0: boolean): void;
	setAdasPrecisionCategory(arg0: string): void;
	setAdasGeometrySource(arg0: number): void;
	setAdasGeometryDate(arg0: number): void;
	setStubLinkBatch(arg0: boolean): void;
	addRoadLink(arg0: RoadLink): void;
	removeRoadLink(arg0: RoadLink): void;
	setDivider(arg0: string): void;
	setLongHaulBatch(arg0: boolean): void;
	setIntersectionCategory(arg0: string): void;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): number;
	getLaneCategory(): number;
	getDirOfTravelSource(): number;
	getDividerSource(): number;
	getNumberLanesSource(): number;
	getSpeedLimitSource(): number;
	getFuncClassSource(): number;
	getSpeedCategorySource(): number;
	isTollway(): boolean;
	isDividerLegal(): boolean;
	isFourWheelDrive(): boolean;
	isHistoricalUSFourWheelDrive(): boolean;
	isControlledAccess(): boolean;
	isBoatFerry(): boolean;
	isRailFerry(): boolean;
	isMultiDig(): boolean;
	getDividerGaps(): List;
	isFrontageRoad(): boolean;
	getAdasPrecisionCategory(): string;
	getAdasGeometrySource(): number;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getIntersectionCategory(): string;
	isMotorway(): boolean;
	isScenicRoute(): boolean;
	getLaneAttributes(): Set;
	isExpressLanes(): boolean;
	isCarpoolRoad(): boolean;
	isParkingLotRoad(): boolean;
	isTransportVerified(): boolean;
	isPublicAccess(): boolean;
	getLowMobility(): number;
	getPrioritySource(): number;
	getGradeCategory(): number;
	getCTlastUpdated(): Date;
	getRoadClass(): number;
	getOverUnderPassIndicator(): number;
	isDeliveryRoad(): boolean;
	getPedestrianPreferred(): number;
	isLimitedAccessRoad(): boolean;
	getBUARoad(): string;
	getInProcessData(): boolean;
	link(): Link;
	getNavLane(arg0: number, arg1: string): NavLane;
	makeFlat(): FlatNavLink;
	makeFlat(): FlatKernel;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	isAccessMotorcycles(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OrientedNavLink:
{
	new (value?: any): OrientedNavLink;
	(): any;
	(value: any): any;
	prototype: OrientedNavLink;
}
interface SignDestination
{
	destinationNavLink(): NavLink;
	signEntries(): List;
	isStraightOn(): boolean;
	destinationNavLinkId(): number;
	exitNumber(): string;
	getTransliterations(): Set;
	getSignExitCells(): List;
	alternateExitNumber(): string;
	exitNumberLanguageCode(): string;
}
declare var SignDestination:
{
	new (value?: any): SignDestination;
	(): any;
	(value: any): any;
	prototype: SignDestination;
}
interface UpdateViaAreaAssocUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateViaAreaAssocUoW:
{
	new (value?: any): UpdateViaAreaAssocUoW;
	(): any;
	(value: any): any;
	prototype: UpdateViaAreaAssocUoW;
}
interface AddViaAreaToRoadLinkAssociationUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddViaAreaToRoadLinkAssociationUoW:
{
	new (value?: any): AddViaAreaToRoadLinkAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddViaAreaToRoadLinkAssociationUoW;
}
interface PoiCategoryFilter
{
	toString(): string;
	filter(arg0: MapObject): UnitOfWork;
	isExcludedType(arg0: PointOfInterest): boolean;
	getFacilityTypesIndexedByCountry(arg0: MapContext): Map;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var PoiCategoryFilter:
{
	new (value?: any): PoiCategoryFilter;
	(): any;
	(value: any): any;
	prototype: PoiCategoryFilter;
}
interface BasicPostalAreaAdminPlace
{
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getPostalAreaId(): number;
	setState(arg0: MapContext, arg1: PostalAreaAdminPlaceKernel): void;
	getAdminPlaceId(): number;
	postalArea(): PostalArea;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	adminPlace(): AdminPlace;
	makeFlat(): FlatPostalAreaAdminPlace;
	makeFlat(): FlatKernel;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicPostalAreaAdminPlace:
{
	new (value?: any): BasicPostalAreaAdminPlace;
	(): any;
	(value: any): any;
	prototype: BasicPostalAreaAdminPlace;
}
interface UpdateNavNodeUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNavNodeUoW:
{
	new (value?: any): UpdateNavNodeUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNavNodeUoW;
}
interface UpdateAdminPlaceUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateAdminPlaceUoW:
{
	new (value?: any): UpdateAdminPlaceUoW;
	(): any;
	(value: any): any;
	prototype: UpdateAdminPlaceUoW;
}
interface PoiAssocUtil
{
	getMissingIds(arg0: PoiAssoc, arg1: MapContext): Set;
	isPartial(arg0: PoiAssoc): boolean;
	getPrimaryPois(arg0: PoiAssocKernel, arg1: MapContext): Set;
	getSecondaryPois(arg0: PoiAssocKernel, arg1: MapContext): Set;
	getPois(arg0: PoiAssoc, arg1: MapContext): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PoiAssocUtil:
{
	new (value?: any): PoiAssocUtil;
	(): any;
	(value: any): any;
	prototype: PoiAssocUtil;
}
interface BasicTrafficSignal
{
	getConditionType(): number;
	naturalGuidanceImportance(): number;
	setSignalLocation(arg0: number): void;
	signalLocation(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicTrafficSignal:
{
	new (value?: any): BasicTrafficSignal;
	(): any;
	(value: any): any;
	prototype: BasicTrafficSignal;
}
interface BasicBlackspot
{
	getConditionType(): number;
	getDirectionType(): DirectionType;
	getSourceType(): SourceType;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicBlackspot:
{
	new (value?: any): BasicBlackspot;
	(): any;
	(value: any): any;
	prototype: BasicBlackspot;
}
interface SourceType
{
	values(): SourceType;
	valueOf(arg0: string): SourceType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var SourceType:
{
	new (value?: any): SourceType;
	(): any;
	(value: any): any;
	prototype: SourceType;
}
interface SecurityCheckVisitorAdaptor
{
	visitMapObjectAssociationKernel(arg0: MapObjectAssociationKernel): void;
	visitConditionKernel(arg0: ConditionKernel): void;
	visitNavStrandKernel(arg0: NavStrandKernel): void;
	visitNavLinkKernel(arg0: NavLinkKernel): void;
	visitLinkKernel(arg0: LinkKernel): void;
	visitNodeKernel(arg0: NodeKernel): void;
	visitFaceKernel(arg0: FaceKernel): void;
	visitPoiCartoKernel(arg0: PoiCartoKernel): void;
	visitFaceLinkKernel(arg0: FaceLinkKernel): void;
	visitAdminPlaceKernel(arg0: AdminPlaceKernel): void;
	visitCartoFeatureKernel(arg0: CartoFeatureKernel): void;
	visitCountryKernel(arg0: CountryKernel): void;
	visitSignKernel(arg0: SignKernel): void;
	visitNavNodeKernel(arg0: NavNodeKernel): void;
	visitRoadLinkKernel(arg0: RoadLinkKernel): void;
	visitPointOfInterestKernel(arg0: PointOfInterestKernel): void;
	visitCompositeRoadFeatureKernel(arg0: CompositeRoadFeatureKernel): void;
	visitStreetTypeKernel(arg0: StreetTypeKernel): void;
	visitRuleInfoKernel(arg0: RuleInfoKernel): void;
	visitPostalAreaKernel(arg0: PostalAreaKernel): void;
	visitZoneKernel(arg0: ZoneKernel): void;
	visitValidationExceptionKernel(arg0: ValidationExceptionKernel): void;
	visitComboKernel(arg0: ComboKernel): void;
	visitDomainKernel(arg0: DomainKernel): void;
	visitDomainComboKernel(arg0: DomainComboKernel): void;
	visitRoadNameKernel(arg0: RoadNameKernel): void;
	visitCartoLinkKernel(arg0: CartoLinkKernel): void;
	visitCartoFaceKernel(arg0: CartoFaceKernel): void;
	visitRoadPointKernel(arg0: RoadPointKernel): void;
	visitPostalAreaAdminPlaceKernel(arg0: PostalAreaAdminPlaceKernel): void;
	visitPostalAreaZoneKernel(arg0: PostalAreaZoneKernel): void;
	visitZoneAdminPlaceKernel(arg0: ZoneAdminPlaceKernel): void;
	visitPoiAssocKernel(arg0: PoiAssocKernel): void;
	visitFeaturePointKernel(arg0: FeaturePointKernel): void;
	visitAnnotationKernel(arg0: AnnotationKernel): void;
	visitNavLaneKernel(arg0: NavLaneKernel): void;
	visitLaneStrandKernel(arg0: LaneStrandKernel): void;
	visitUVCKernel(arg0: UnvalidatedChangeKernel): void;
	visitViaAreaKernel(arg0: ViaAreaKernel): void;
	visitVirtualConnectionKernel(arg0: VirtualConnectionKernel): void;
	visitViaAreaPoiLinkKernel(arg0: ViaAreaPoiLinkKernel): void;
	visitViaAreaRLLinkKernel(arg0: ViaAreaRLLinkKernel): void;
	visitTopologySegmentKernel(arg0: TopologySegmentKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SecurityCheckVisitorAdaptor:
{
	new (value?: any): SecurityCheckVisitorAdaptor;
	(): any;
	(value: any): any;
	prototype: SecurityCheckVisitorAdaptor;
}
interface PointOfInterest
{
	vanityCities(): Set;
	children(): Set;
	roadLink(): RoadLink;
	parents(): Set;
	namedPlace(): NamedPlace;
	isPremium(): boolean;
	parentAssocType(arg0: PointOfInterest): string;
	childAssocType(arg0: PointOfInterest): string;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getAddress(): string;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isPrivate(): boolean;
	getAttributes(): Set;
	getStreetSide(): string;
	getPoiPvid(): number;
	getLinkPoint(): GeoPoint;
	getPercentFromRef(): number;
	getAddressFormat(): string;
	getDataSource(): number;
	getAttachedFiles(): Set;
	getAllActualAddress(): Set;
	getAllFullHouseNumber(): Set;
	getAllParsedActualAddress(): Set;
	isLongHaul(): boolean;
	isChanged(): boolean;
	getNGValChangeMessage(): string;
	getNGValMoveMessage(): string;
	isChangeStatus(): boolean;
	getDisplayPoint(): GeoPoint;
	getChainId(): number;
	getLocationScore(): number;
	getPlaceScore(): number;
	getCalculatedLevel(): number;
	getNextReviewDate(): number;
	getPhoneNumber(): string;
	isNationalImportance(): boolean;
	isInVicinity(): boolean;
	isLongHaulBatch(): boolean;
	getLongHaulManual(): string;
	getActualAddress(): FlatPointOfInterestText;
	getThirdPartyData(): Set;
	getNotes(): List;
	getParsedActualAddress(): FlatPOIParsedAddress;
	getActualAddressTransliterations(): Set;
	getContacts(): Set;
	getProtectedId(): string;
	getFullHouseNumber(): FlatPointOfInterestText;
	makeFlat(): FlatPointOfInterest;
	getFlatParents(): Set;
	getFlatChildren(): Set;
	getRoadLinkId(): number;
	getVanityCityIds(): Set;
	getNamedPlaceId(): number;
	getNamedPlaceType(): string;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PointOfInterest:
{
	new (value?: any): PointOfInterest;
	(): any;
	(value: any): any;
	prototype: PointOfInterest;
}
interface NoOvertaking
{
	getWeatherType(): WeatherType;
	getDirectionType(): DirectionType;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var NoOvertaking:
{
	new (value?: any): NoOvertaking;
	(): any;
	(value: any): any;
	prototype: NoOvertaking;
}
interface NamedFeatureAbstr
{
	toString(): string;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	accept(arg0: KernelVisitor): void;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	allComponents(): Set;
}
declare var NamedFeatureAbstr:
{
	new (value?: any): NamedFeatureAbstr;
	(): any;
	(value: any): any;
	prototype: NamedFeatureAbstr;
}
interface NavNodeUtil
{
	getFeatureType(arg0: NavNode): number;
	navLinks(arg0: NavNode): List;
	valence(arg0: NavNode): number;
	navlinks(arg0: NavNode): List;
	allComponents(arg0: NavNode): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: NavNodeKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NavNodeUtil:
{
	new (value?: any): NavNodeUtil;
	(): any;
	(value: any): any;
	prototype: NavNodeUtil;
}
interface CopyConditionUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyConditionUoW:
{
	new (value?: any): CopyConditionUoW;
	(): any;
	(value: any): any;
	prototype: CopyConditionUoW;
}
interface ModifiableDelegatingMapContext
{
	setMetadata(arg0: Metadata): void;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	removeFringe(arg0: MapObject): void;
	updateId(arg0: number, arg1: number): void;
	merger(): Merger;
	addScope(arg0: Scope): void;
	removeScope(): void;
	addFringe(arg0: MapObject): void;
	addIncompleteAdmin(arg0: IncompleteAdminPacket): void;
	removeIncompleteAdmin(arg0: number): void;
	addAdditionalData(arg0: Properties): void;
	setEdgeCandidates(arg0: Set): void;
	addMetricsContext(arg0: MetricContext): void;
	clearMetricsContexts(): void;
	getModifiableDegradationValidationContext(): ModifiableDegradationValidationContext;
	add(arg0: MapObject): void;
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	update(arg0: MapObject): void;
	update(arg0: Kernel): void;
	extensions(): Set;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: number): PointOfInterest;
	findPoi(arg0: RoadLink): Set;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: Node): boolean;
	isIncompleteNode(arg0: NavNode): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointIterator(): Iterator;
	featurePointSize(arg0: FeaturePointType): number;
	featurePointSize(): number;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	mapObjectAssociationSize(): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	hasCustomContext(arg0: Class): boolean;
	addCustomContext(arg0: Class): void;
}
declare var ModifiableDelegatingMapContext:
{
	new (value?: any): ModifiableDelegatingMapContext;
	(): any;
	(value: any): any;
	prototype: ModifiableDelegatingMapContext;
}
interface AdjacentLockFilter
{
	accept(arg0: MapObject): boolean;
	visit(arg0: Node): boolean;
	visit(arg0: Link): boolean;
	accept(arg0: number): boolean;
	visit(arg0: LinkPoints): boolean;
	visit(arg0: NavStrand): boolean;
	visit(arg0: RoadLink): boolean;
	visit(arg0: NavLink): boolean;
	visit(arg0: Condition): boolean;
	visit(arg0: PointOfInterest): boolean;
	update(arg0: number, arg1: MapObject): void;
	reset(): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AdjacentLockFilter:
{
	new (value?: any): AdjacentLockFilter;
	(): any;
	(value: any): any;
	prototype: AdjacentLockFilter;
}
interface LinkPoints
{
	equals(arg0: any): boolean;
	length(): double;
	accept(arg0: MapComponentVisitor): void;
	accept(arg0: KernelVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isBridge(): boolean;
	bits(): BitSet;
	id(): number;
	cartoFeatures(): Set;
	setLinkPvid(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	angle(arg0: Link, arg1: Node): double;
	leftPostalArea(): PostalArea;
	rightPostalArea(): PostalArea;
	isUrban(): boolean;
	getLinkProductBoundaryOverrides(): Set;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	viaAreas(): Set;
	setDetailedCity(arg0: boolean): void;
	getGeometrySource(): number;
	setUrban(arg0: boolean): void;
	setGeometrySource(arg0: number): void;
	edge(): GeoEdge;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	features(): Set;
	bearing(arg0: Node): double;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	rightAdminPlace(): AdminPlace;
	isDetailedCity(): boolean;
	refNode(): Node;
	nrefNode(): Node;
	getShape(): List;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	rightAlternateNamedPlaces(): Set;
	leftAlternateNamedPlaces(): Set;
	getRightAlternateNamedPlaceIds(): Set;
	getLeftAlternateNamedPlaceIds(): Set;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	getLinkPvid(): number;
	getExtendedAttributes(): Set;
	link(): Link;
	leftAdminPlace(): AdminPlace;
	makeFlat(): FlatLink;
	makeFlat(): FlatKernel;
	isAligned(): boolean;
	getMapEdgeId(): number;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	assignEdge(arg0: GeoEdge): void;
	bitsCount(): number;
	setEdge(arg0: GeoEdge): void;
	setAdminPlace(arg0: AdminPlace, arg1: number): void;
	isBoundary(): boolean;
	nextShape(arg0: Node): GeoPoint;
	hasAdasHeight(): boolean;
	getLinkStats(): LinkStats;
	toString(): string;
	getClass(): Class;
}
declare var LinkPoints:
{
	new (value?: any): LinkPoints;
	(): any;
	(value: any): any;
	prototype: LinkPoints;
}
interface CartoLinkUtil
{
	length(arg0: CartoLink): double;
	getMissingIds(arg0: CartoLink, arg1: MapContext): Set;
	isPartial(arg0: CartoLink): boolean;
	edge(arg0: CartoLink): GeoEdge;
	hasFeatures(arg0: CartoLink): boolean;
	hasFeature(arg0: CartoLink, arg1: MapFeature): boolean;
	geometry(arg0: CartoLink): GeoShape;
	onAdminPlaceBorder(arg0: CartoLink): boolean;
	firstPoint(arg0: CartoLink): GeoPoint;
	lastPoint(arg0: CartoLink): GeoPoint;
	oriented(arg0: CartoLink): boolean;
	invert(arg0: CartoLink): void;
	isInverted(arg0: CartoLink): boolean;
	checkStructuralIntegrity(arg0: MapContext, arg1: CartoLinkKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoLinkUtil:
{
	new (value?: any): CartoLinkUtil;
	(): any;
	(value: any): any;
	prototype: CartoLinkUtil;
}
interface AddViaAreaRLLinkUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddViaAreaRLLinkUoW:
{
	new (value?: any): AddViaAreaRLLinkUoW;
	(): any;
	(value: any): any;
	prototype: AddViaAreaRLLinkUoW;
}
interface BasicVariableSpeedLimit
{
	getConditionType(): number;
	getVssId(): string;
	getDirectionofTravel(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicVariableSpeedLimit:
{
	new (value?: any): BasicVariableSpeedLimit;
	(): any;
	(value: any): any;
	prototype: BasicVariableSpeedLimit;
}
interface DayOfYear
{
	toString(): string;
	day(): number;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	isValidDayOfYear(arg0: number): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DayOfYear:
{
	new (value?: any): DayOfYear;
	(): any;
	(value: any): any;
	prototype: DayOfYear;
}
interface BasicRailwayCrossing
{
	getConditionType(): number;
	crossingType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicRailwayCrossing:
{
	new (value?: any): BasicRailwayCrossing;
	(): any;
	(value: any): any;
	prototype: BasicRailwayCrossing;
}
interface BasicTransportPreferredRoute
{
	getConditionType(): number;
	getWeightDependentValue(): number;
	getDirectionType(): DirectionType;
	getPreferredRouteType(): PreferredRouteType;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicTransportPreferredRoute:
{
	new (value?: any): BasicTransportPreferredRoute;
	(): any;
	(value: any): any;
	prototype: BasicTransportPreferredRoute;
}
interface PreferredRouteType
{
	values(): PreferredRouteType;
	valueOf(arg0: string): PreferredRouteType;
	getValue(): string;
	getValue(): any;
	getIntValue(): number;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var PreferredRouteType:
{
	new (value?: any): PreferredRouteType;
	(): any;
	(value: any): any;
	prototype: PreferredRouteType;
}
interface BasicJunctionView
{
	getConditionType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicJunctionView:
{
	new (value?: any): BasicJunctionView;
	(): any;
	(value: any): any;
	prototype: BasicJunctionView;
}
interface UpdateLaneStrandUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateLaneStrandUoW:
{
	new (value?: any): UpdateLaneStrandUoW;
	(): any;
	(value: any): any;
	prototype: UpdateLaneStrandUoW;
}
interface NavLaneUtil
{
	checkForHOVLane(arg0: NavLane): boolean;
	checkForConditionOnLane(arg0: NavLane, arg1: ConditionType): boolean;
	checkStructuralIntegrity(arg0: MapContext, arg1: NavLaneKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NavLaneUtil:
{
	new (value?: any): NavLaneUtil;
	(): any;
	(value: any): any;
	prototype: NavLaneUtil;
}
interface ConditionType
{
	values(): ConditionType;
	valueOf(arg0: string): ConditionType;
	getValue(): number;
	getKey(): any;
	getKey(): number;
	getTypeFromValue(arg0: number): ConditionType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var ConditionType:
{
	new (value?: any): ConditionType;
	(): any;
	(value: any): any;
	prototype: ConditionType;
}
interface UnitOfWork
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
}
declare var UnitOfWork:
{
	new (value?: any): UnitOfWork;
	(): any;
	(value: any): any;
	prototype: UnitOfWork;
}
interface MapFeatureAbstr
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
}
declare var MapFeatureAbstr:
{
	new (value?: any): MapFeatureAbstr;
	(): any;
	(value: any): any;
	prototype: MapFeatureAbstr;
}
interface UpdateNavLinkPhysicalLanesUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNavLinkPhysicalLanesUoW:
{
	new (value?: any): UpdateNavLinkPhysicalLanesUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNavLinkPhysicalLanesUoW;
}
interface EdgeVisitor
{
	visit(arg0: PointOfInterest): boolean;
	visit(arg0: NavStrand): boolean;
	visit(arg0: Condition): boolean;
	visit(arg0: LinkPoints): boolean;
	visit(arg0: Link): boolean;
	visit(arg0: Node): boolean;
	visit(arg0: RoadLink): boolean;
	visit(arg0: NavLink): boolean;
}
declare var EdgeVisitor:
{
	new (value?: any): EdgeVisitor;
	(): any;
	(value: any): any;
	prototype: EdgeVisitor;
}
interface AddAnnotationUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddAnnotationUoW:
{
	new (value?: any): AddAnnotationUoW;
	(): any;
	(value: any): any;
	prototype: AddAnnotationUoW;
}
interface ReadOnlyFilter
{
	update(arg0: number, arg1: MapObject): void;
	accept(arg0: number): boolean;
	accept(arg0: MapObject): boolean;
	reset(): void;
	visit(arg0: MapObjectAssociation): void;
	visit(arg0: GuidancePointFeaturePoint): void;
	visit(arg0: ManeuverPointFeaturePoint): void;
	visit(arg0: GuidancePointToPoiAssociation): void;
	visit(arg0: ViaAreaToPoiAssociation): void;
	visit(arg0: GuidancePointToMOAssociation): void;
	visit(arg0: Sign): void;
	visit(arg0: FeaturePoint): void;
	visit(arg0: Annotation): void;
	visit(arg0: NaturalGuidanceLinkToCartoAssociation): void;
	visit(arg0: NaturalGuidanceLinkToMOAssociation): void;
	visit(arg0: ViaAreaPoiLink): void;
	visit(arg0: VirtualConnection): void;
	visit(arg0: ViaArea): void;
	visit(arg0: ViaAreaToRoadLinkAssociation): void;
	visit(arg0: GuidancePointToCartoAssociation): void;
	visit(arg0: ViaAreaRLLink): void;
	visit(arg0: NaturalGuidanceLinkToPoiAssociation): void;
	visit(arg0: CartoFace): void;
	visit(arg0: CartoLink): void;
	visit(arg0: AdminPlace): void;
	visit(arg0: Zone): void;
	visit(arg0: PostalArea): void;
	visit(arg0: CartoFeature): void;
	visit(arg0: PoiAssoc): void;
	visit(arg0: Link): void;
	visit(arg0: Node): void;
	visit(arg0: Face): void;
	visit(arg0: FaceLink): void;
	visit(arg0: CompositeRoadFeature): void;
	visit(arg0: Condition): void;
	visit(arg0: NavNode): void;
	visit(arg0: NavStrand): void;
	visit(arg0: LaneStrand): void;
	visit(arg0: RoadLink): void;
	visit(arg0: NavLane): void;
	visit(arg0: NavLink): void;
	visit(arg0: PointOfInterest): void;
	visit(arg0: RoadPoint): void;
	visit(arg0: PoiCarto): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ReadOnlyFilter:
{
	new (value?: any): ReadOnlyFilter;
	(): any;
	(value: any): any;
	prototype: ReadOnlyFilter;
}
interface GuidancePointFeaturePoint
{
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	directionOfTravel(): DirectionOfTravel;
	calcPercentFromRef(): double;
	link(): Link;
}
declare var GuidancePointFeaturePoint:
{
	new (value?: any): GuidancePointFeaturePoint;
	(): any;
	(value: any): any;
	prototype: GuidancePointFeaturePoint;
}
interface GuidancePointToPoiAssociation
{
	guidancePoint(): GuidancePointFeaturePoint;
	poi(): PointOfInterest;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	guidancePointId(): number;
	poiId(): number;
}
declare var GuidancePointToPoiAssociation:
{
	new (value?: any): GuidancePointToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: GuidancePointToPoiAssociation;
}
interface GuidancePointToMOAssociation
{
	guidancePoint(): GuidancePointFeaturePoint;
	mapObject(): MapObject;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	guidancePointId(): number;
	moId(): number;
	getMapObjectType(): MapObjectType;
	getMapObjAttrType(): AttributeType;
}
declare var GuidancePointToMOAssociation:
{
	new (value?: any): GuidancePointToMOAssociation;
	(): any;
	(value: any): any;
	prototype: GuidancePointToMOAssociation;
}
interface NaturalGuidanceLinkToCartoAssociation
{
	guidancePointToCarto(): GuidancePointToCartoAssociation;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	gpCartoAssocId(): number;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	dateTimeMasks(): List;
	getManeuverPoints(): Set;
	link(): Link;
	getManeuverPointAssociations(): Set;
}
declare var NaturalGuidanceLinkToCartoAssociation:
{
	new (value?: any): NaturalGuidanceLinkToCartoAssociation;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkToCartoAssociation;
}
interface NaturalGuidanceLinkToMOAssociation
{
	guidancePointToMapObject(): GuidancePointToMOAssociation;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	gpMOAssocId(): number;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	dateTimeMasks(): List;
	getManeuverPoints(): Set;
	link(): Link;
	getManeuverPointAssociations(): Set;
}
declare var NaturalGuidanceLinkToMOAssociation:
{
	new (value?: any): NaturalGuidanceLinkToMOAssociation;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkToMOAssociation;
}
interface GuidancePointToCartoAssociation
{
	guidancePoint(): GuidancePointFeaturePoint;
	cartoFeature(): CartoFeature;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	guidancePointId(): number;
	cartoId(): number;
}
declare var GuidancePointToCartoAssociation:
{
	new (value?: any): GuidancePointToCartoAssociation;
	(): any;
	(value: any): any;
	prototype: GuidancePointToCartoAssociation;
}
interface NaturalGuidanceLinkToPoiAssociation
{
	guidancePointToPoi(): GuidancePointToPoiAssociation;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	gpPoiAssocId(): number;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	dateTimeMasks(): List;
	getManeuverPoints(): Set;
	link(): Link;
	getManeuverPointAssociations(): Set;
}
declare var NaturalGuidanceLinkToPoiAssociation:
{
	new (value?: any): NaturalGuidanceLinkToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkToPoiAssociation;
}
interface UpdateCartoLinkUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateCartoLinkUoW:
{
	new (value?: any): UpdateCartoLinkUoW;
	(): any;
	(value: any): any;
	prototype: UpdateCartoLinkUoW;
}
interface RoadPointUtil
{
	getMissingIds(arg0: RoadPoint, arg1: MapContext): Set;
	isPartial(arg0: RoadPoint): boolean;
	allComponents(arg0: RoadPoint): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: RoadPointKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var RoadPointUtil:
{
	new (value?: any): RoadPointUtil;
	(): any;
	(value: any): any;
	prototype: RoadPointUtil;
}
interface SignText
{
	type(): string;
	toString(): string;
	text(): string;
	languageCode(): string;
	isBranch(): boolean;
	isToward(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var SignText:
{
	new (value?: any): SignText;
	(): any;
	(value: any): any;
	prototype: SignText;
}
interface NaturalGuidanceLinkToPoiAssociation
{
	guidancePointToPoi(): GuidancePointToPoiAssociation;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	gpPoiAssocId(): number;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	dateTimeMasks(): List;
	getManeuverPoints(): Set;
	link(): Link;
	getManeuverPointAssociations(): Set;
}
declare var NaturalGuidanceLinkToPoiAssociation:
{
	new (value?: any): NaturalGuidanceLinkToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkToPoiAssociation;
}
interface DayOfWeek
{
	toString(): string;
	day(): number;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	isValidDayOfWeek(arg0: number): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DayOfWeek:
{
	new (value?: any): DayOfWeek;
	(): any;
	(value: any): any;
	prototype: DayOfWeek;
}
interface CopyRoadLinkUow
{
	toString(): string;
	id(): number;
	named(): boolean;
	setRoadLink(arg0: RoadLinkKernel): void;
	setRoadName(arg0: RoadNameKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyRoadLinkUow:
{
	new (value?: any): CopyRoadLinkUow;
	(): any;
	(value: any): any;
	prototype: CopyRoadLinkUow;
}
interface ValidationExceptionUtil
{
	getMissingIds(arg0: ValidationException, arg1: MapContext): Set;
	isPartial(arg0: ValidationException): boolean;
	rule(arg0: ValidationException, arg1: MapContext): Rule;
	kernels(arg0: ValidationException, arg1: MapContext): Kernel;
	getRuleResult(arg0: ValidationException): RuleResult;
	checkStructuralIntegrity(arg0: MapContext, arg1: ValidationExceptionKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ValidationExceptionUtil:
{
	new (value?: any): ValidationExceptionUtil;
	(): any;
	(value: any): any;
	prototype: ValidationExceptionUtil;
}
interface UpdateDistanceMarkerToRoadLinkAssocUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateDistanceMarkerToRoadLinkAssocUoW:
{
	new (value?: any): UpdateDistanceMarkerToRoadLinkAssocUoW;
	(): any;
	(value: any): any;
	prototype: UpdateDistanceMarkerToRoadLinkAssocUoW;
}
interface UpdateCountryUoW
{
	toString(): string;
	isCountryValid(arg0: CountryKernel): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateCountryUoW:
{
	new (value?: any): UpdateCountryUoW;
	(): any;
	(value: any): any;
	prototype: UpdateCountryUoW;
}
interface AdasFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AdasFilter:
{
	new (value?: any): AdasFilter;
	(): any;
	(value: any): any;
	prototype: AdasFilter;
}
interface ParkingLotRoadFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ParkingLotRoadFilter:
{
	new (value?: any): ParkingLotRoadFilter;
	(): any;
	(value: any): any;
	prototype: ParkingLotRoadFilter;
}
interface FaceLinkUtil
{
	getMissingIds(arg0: FaceLink, arg1: MapContext): Set;
	isPartial(arg0: FaceLink): boolean;
	hasFeatures(arg0: FaceLink): boolean;
	hasFeature(arg0: FaceLink, arg1: MapFeature): boolean;
	geometry(arg0: FaceLink): GeoShape;
	onAdminPlaceBorder(arg0: FaceLink): boolean;
	checkStructuralIntegrity(arg0: MapContext, arg1: FaceLinkKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FaceLinkUtil:
{
	new (value?: any): FaceLinkUtil;
	(): any;
	(value: any): any;
	prototype: FaceLinkUtil;
}
interface MapObjectAbstr
{
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
}
declare var MapObjectAbstr:
{
	new (value?: any): MapObjectAbstr;
	(): any;
	(value: any): any;
	prototype: MapObjectAbstr;
}
interface DiCiUtilities
{
	setGoldPlateFlag(arg0: FlatNode): void;
	isDiciPlugin(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DiCiUtilities:
{
	new (value?: any): DiCiUtilities;
	(): any;
	(value: any): any;
	prototype: DiCiUtilities;
}
interface PostalAreaZoneUtil
{
	getMissingIds(arg0: PostalAreaZone, arg1: MapContext): Set;
	isPartial(arg0: PostalAreaZone): boolean;
	checkStructuralIntegrity(arg0: MapContext, arg1: PostalAreaZoneKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PostalAreaZoneUtil:
{
	new (value?: any): PostalAreaZoneUtil;
	(): any;
	(value: any): any;
	prototype: PostalAreaZoneUtil;
}
interface RemovePointOfInterestUoW
{
	toString(): string;
	id(): number;
	setPointOfInterest(arg0: PointOfInterestKernel): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemovePointOfInterestUoW:
{
	new (value?: any): RemovePointOfInterestUoW;
	(): any;
	(value: any): any;
	prototype: RemovePointOfInterestUoW;
}
interface NaturalGuidanceLinkToCartoAssociation
{
	guidancePointToCarto(): GuidancePointToCartoAssociation;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	gpCartoAssocId(): number;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	dateTimeMasks(): List;
	getManeuverPoints(): Set;
	link(): Link;
	getManeuverPointAssociations(): Set;
}
declare var NaturalGuidanceLinkToCartoAssociation:
{
	new (value?: any): NaturalGuidanceLinkToCartoAssociation;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkToCartoAssociation;
}
interface AddNGLinkToMOAssociationUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddNGLinkToMOAssociationUoW:
{
	new (value?: any): AddNGLinkToMOAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddNGLinkToMOAssociationUoW;
}
interface AddZoneAdminPlaceAssocUoW
{
	toString(): string;
	id(): number;
	setZoneAdminPlace(arg0: ZoneAdminPlaceKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddZoneAdminPlaceAssocUoW:
{
	new (value?: any): AddZoneAdminPlaceAssocUoW;
	(): any;
	(value: any): any;
	prototype: AddZoneAdminPlaceAssocUoW;
}
interface FeatureFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FeatureFilter:
{
	new (value?: any): FeatureFilter;
	(): any;
	(value: any): any;
	prototype: FeatureFilter;
}
interface BasicRoadLink
{
	toString(): string;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	equivalent(arg0: Kernel): boolean;
	roadName(): RoadName;
	getNavLinkId(): number;
	getAddressRangeType(): number;
	getLeftAddressRange(): AddressRange;
	getRightAddressRange(): AddressRange;
	getRoadNameId(): number;
	getRefRoadLinkId(): number;
	navLink(): NavLink;
	isMapEdge(): boolean;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatRoadLink;
	getRoadLinkPvid(): number;
	getNameSource(): number;
	setLeftAddressRange(arg0: AddressRange): void;
	setRightAddressRange(arg0: AddressRange): void;
	setAddressRangeType(arg0: number): void;
	setNameSource(arg0: number): void;
	isExitName(): boolean;
	isExplicatable(): boolean;
	isJunctionName(): boolean;
	isPostalName(): boolean;
	isCommonName(): boolean;
	isScenicName(): boolean;
	isStaleName(): boolean;
	isVanityName(): boolean;
	isBicycleRouteName(): boolean;
	getAttrNameStatus(): number;
	refRoadLink(): RoadLink;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicRoadLink:
{
	new (value?: any): BasicRoadLink;
	(): any;
	(value: any): any;
	prototype: BasicRoadLink;
}
interface ConfidenceLevelFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ConfidenceLevelFilter:
{
	new (value?: any): ConfidenceLevelFilter;
	(): any;
	(value: any): any;
	prototype: ConfidenceLevelFilter;
}
interface UpdateRoadPointAddressUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateRoadPointAddressUoW:
{
	new (value?: any): UpdateRoadPointAddressUoW;
	(): any;
	(value: any): any;
	prototype: UpdateRoadPointAddressUoW;
}
interface MapContextPartitionImpl
{
	equals(arg0: any): boolean;
	dependencies(arg0: ViaArea): List;
	dependencies(arg0: TopologySegment): List;
	dependencies(arg0: Link): List;
	dependencies(arg0: VirtualConnection): List;
	removeNode(arg0: Node): void;
	indexDynamicExtension(arg0: MapObject): void;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	unindexDynamicExtension(arg0: MapObject): void;
	addLaneStrand(arg0: LaneStrand): void;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	indexFace(arg0: Face): void;
	unindexFace(arg0: Face): void;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: NavNode): boolean;
	isIncompleteNode(arg0: Node): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	partialIterator(): Iterator;
	cartoFaceIterator(): Iterator;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointIterator(): Iterator;
	featurePointSize(): number;
	featurePointSize(arg0: FeaturePointType): number;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	mapObjectAssociationSize(): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	addAnnotation(arg0: Annotation): void;
	removeNavLink(arg0: NavLink): void;
	addNavLink(arg0: NavLink): void;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	updateNavLinkId(arg0: MapObject, arg1: number): void;
	updateLinkId(arg0: MapObject, arg1: number): void;
	updateNodeId(arg0: MapObject, arg1: number): void;
	updateFaceLinkId(arg0: MapObject, arg1: number): void;
	updatePoiCartoId(arg0: MapObject, arg1: number): void;
	updateFaceId(arg0: MapObject, arg1: number): void;
	updateCartoFeatureId(arg0: MapObject, arg1: number): void;
	updateCartoLinkId(arg0: MapObject, arg1: number): void;
	updateCartoFaceId(arg0: MapObject, arg1: number): void;
	updateNavNodeId(arg0: MapObject, arg1: number): void;
	updateRoadLinkId(arg0: MapObject, arg1: number): void;
	updatePointOfInterestId(arg0: MapObject, arg1: number): void;
	updatePoiAssocId(arg0: MapObject, arg1: number): void;
	updateNavStrandId(arg0: MapObject, arg1: number): void;
	updateCompositeRoadFeatureId(arg0: MapObject, arg1: number): void;
	updateConditionId(arg0: MapObject, arg1: number): void;
	updateSignId(arg0: MapObject, arg1: number): void;
	updatePostalAreaId(arg0: MapObject, arg1: number): void;
	updateZoneId(arg0: MapObject, arg1: number): void;
	updateLaneStrandId(arg0: MapObject, arg1: number): void;
	updateNavLaneId(arg0: MapObject, arg1: number): void;
	updateValidationExceptionId(arg0: MapObject, arg1: number): void;
	updateUnvalidatedChangeId(arg0: MapObject, arg1: number): void;
	updateExceptionKernelIdMapKey(arg0: number, arg1: number): void;
	updateUnvalidatedChangeKernelIdMapKey(arg0: number, arg1: number): void;
	updateComboId(arg0: MapObject, arg1: number): void;
	updateDomainId(arg0: MapObject, arg1: number): void;
	updateDomainComboId(arg0: MapObject, arg1: number): void;
	updateRuleInfoId(arg0: MapObject, arg1: number): void;
	hashMapEquals(arg0: Map, arg1: Map): boolean;
	updateAddressId(arg0: MapObject, arg1: number): void;
	updatePostalAreaZoneId(arg0: MapObject, arg1: number): void;
	updatePostalAreaAdminPlaceId(arg0: MapObject, arg1: number): void;
	updateZoneAdminPlaceId(arg0: MapObject, arg1: number): void;
	updateFeaturePointId(arg0: MapObject, arg1: number): void;
	updateMapObjectAssociationId(arg0: MapObject, arg1: number): void;
	updateAnnotationId(arg0: MapObject, arg1: number): void;
	updateViaAreaId(arg0: MapObject, arg1: number): void;
	updateVirtualConnectionId(arg0: MapObject, arg1: number): void;
	updateViaAreaPoiLinkId(arg0: MapObject, arg1: number): void;
	updateViaAreaRLLinkId(arg0: MapObject, arg1: number): void;
	mapContext(): MapContext;
	addRoadLink(arg0: RoadLink): void;
	removeRoadLink(arg0: RoadLink): void;
	indexLink(arg0: Link): void;
	unindexLink(arg0: Link): void;
	addFace(arg0: Face): void;
	removeFace(arg0: Face): void;
	addFaceLink(arg0: FaceLink): void;
	removeFaceLink(arg0: FaceLink): void;
	indexFaceLink(arg0: FaceLink): void;
	unindexFaceLink(arg0: FaceLink): void;
	addNode(arg0: Node): void;
	indexNode(arg0: Node): void;
	unindexNode(arg0: Node): void;
	indexNavLink(arg0: NavLink): void;
	unindexNavLink(arg0: NavLink): void;
	addNavNode(arg0: NavNode): void;
	removeNavNode(arg0: NavNode): void;
	indexNavNode(arg0: NavNode): void;
	unindexNavNode(arg0: NavNode): void;
	addNavStrand(arg0: NavStrand): void;
	removeNavStrand(arg0: NavStrand): void;
	indexNavStrand(arg0: NavStrand): void;
	unindexNavStrand(arg0: NavStrand): void;
	indexRoadLink(arg0: RoadLink): void;
	unindexRoadLink(arg0: RoadLink): void;
	removeSign(arg0: Sign): void;
	indexSign(arg0: Sign): void;
	unindexSign(arg0: Sign): void;
	removeCartoFeature(arg0: CartoFeature): void;
	indexCartoFeature(arg0: CartoFeature): void;
	unindexCartoFeature(arg0: CartoFeature): void;
	addPoiCarto(arg0: PoiCarto): void;
	removePoiCarto(arg0: PoiCarto): void;
	unindexPoiCarto(arg0: PoiCarto): void;
	indexPoiCarto(arg0: PoiCarto): void;
	removePoi(arg0: PointOfInterest): void;
	indexPoi(arg0: PointOfInterest): void;
	unindexPoi(arg0: PointOfInterest): void;
	addPoiAssoc(arg0: PoiAssoc): void;
	removePoiAssoc(arg0: PoiAssoc): void;
	indexPoiAssoc(arg0: PoiAssoc): void;
	unindexPoiAssoc(arg0: PoiAssoc): void;
	addCondition(arg0: Condition): void;
	removeCondition(arg0: Condition): void;
	indexCondition(arg0: Condition): void;
	unindexCondition(arg0: Condition): void;
	addCrf(arg0: CompositeRoadFeature): void;
	removeCrf(arg0: CompositeRoadFeature): void;
	indexCrf(arg0: CompositeRoadFeature): void;
	unindexCrf(arg0: CompositeRoadFeature): void;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	removePostalArea(arg0: PostalArea): void;
	indexPostalArea(arg0: PostalArea): void;
	unindexPostalArea(arg0: PostalArea): void;
	removeZone(arg0: Zone): void;
	indexZone(arg0: Zone): void;
	unindexZone(arg0: Zone): void;
	addValidationException(arg0: ValidationException): void;
	removeValidationException(arg0: ValidationException): void;
	indexValidationException(arg0: ValidationException): void;
	unindexValidationException(arg0: ValidationException): void;
	findPartials(arg0: number): Set;
	addCartoLink(arg0: CartoLink): void;
	removeCartoLink(arg0: CartoLink): void;
	indexCartoLink(arg0: CartoLink): void;
	unindexCartoLink(arg0: CartoLink): void;
	addCartoFace(arg0: CartoFace): void;
	removeCartoFace(arg0: CartoFace): void;
	indexCartoFace(arg0: CartoFace): void;
	unindexCartoFace(arg0: CartoFace): void;
	addRoadPoint(arg0: RoadPoint): void;
	removeRoadPoint(arg0: RoadPoint): void;
	indexRoadPoint(arg0: RoadPoint): void;
	unindexRoadPoint(arg0: RoadPoint): void;
	addPostalAreaZone(arg0: PostalAreaZone): void;
	removePostalAreaZone(arg0: PostalAreaZone): void;
	indexPostalAreaZone(arg0: PostalAreaZone): void;
	unindexPostalAreaZone(arg0: PostalAreaZone): void;
	addPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	removePostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	indexPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	unindexPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	addZoneAdminPlace(arg0: ZoneAdminPlace): void;
	removeZoneAdminPlace(arg0: ZoneAdminPlace): void;
	indexZoneAdminPlace(arg0: ZoneAdminPlace): void;
	unindexZoneAdminPlace(arg0: ZoneAdminPlace): void;
	addFeaturePoint(arg0: FeaturePoint): void;
	removeFeaturePoint(arg0: FeaturePoint): void;
	indexFeaturePoint(arg0: FeaturePoint): void;
	unindexFeaturePoint(arg0: FeaturePoint): void;
	addMapObjectAssociation(arg0: MapObjectAssociation): void;
	removeMapObjectAssociation(arg0: MapObjectAssociation): void;
	indexMapObjectAssociation(arg0: MapObjectAssociation): void;
	unindexMapObjectAssociation(arg0: MapObjectAssociation): void;
	removeAnnotation(arg0: Annotation): void;
	indexAnnotation(arg0: Annotation): void;
	unindexAnnotation(arg0: Annotation): void;
	addNavLane(arg0: NavLane): void;
	removeNavLane(arg0: NavLane): void;
	indexNavLane(arg0: NavLane): void;
	unindexNavLane(arg0: NavLane): void;
	removeLaneStrand(arg0: LaneStrand): void;
	indexLaneStrand(arg0: LaneStrand): void;
	unindexLaneStrand(arg0: LaneStrand): void;
	addUnvalidatedChange(arg0: UnvalidatedChange): void;
	removeUnvalidatedChange(arg0: UnvalidatedChange): void;
	indexUnvalidatedChange(arg0: UnvalidatedChange): void;
	unindexUnvalidatedChange(arg0: UnvalidatedChange): void;
	updateAnnotation(arg0: Annotation): void;
	updateCartoFace(arg0: CartoFace): void;
	updateCartoFeature(arg0: CartoFeature): void;
	updateCartoLink(arg0: CartoLink): void;
	updateCompositeRoadFeature(arg0: CompositeRoadFeature): void;
	updateCondition(arg0: Condition): void;
	updateFace(arg0: Face): void;
	updateFaceLink(arg0: FaceLink): void;
	updateFeaturePoint(arg0: FeaturePoint): void;
	updateLaneStrand(arg0: LaneStrand): void;
	updateLink(arg0: Link): void;
	updateMapObjectAssociation(arg0: MapObjectAssociation): void;
	updateNavLane(arg0: NavLane): void;
	updateNavLink(arg0: NavLink): void;
	updateNavNode(arg0: NavNode): void;
	updateNavStrand(arg0: NavStrand): void;
	updateNode(arg0: Node): void;
	updatePoiAssoc(arg0: PoiAssoc): void;
	updatePoiCarto(arg0: PoiCarto): void;
	updatePointOfInterest(arg0: PointOfInterest): void;
	updatePostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	updatePostalArea(arg0: PostalArea): void;
	updatePostalAreaZone(arg0: PostalAreaZone): void;
	updateRoadLink(arg0: RoadLink): void;
	updateRoadPoint(arg0: RoadPoint): void;
	updateSign(arg0: Sign): void;
	updateValidationException(arg0: ValidationException): void;
	updateZoneAdminPlace(arg0: ZoneAdminPlace): void;
	updateZone(arg0: Zone): void;
	addViaArea(arg0: ViaArea): void;
	removeViaArea(arg0: ViaArea): void;
	updateViaArea(arg0: ViaArea): void;
	indexViaArea(arg0: ViaArea): void;
	unindexViaArea(arg0: ViaArea): void;
	addViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	removeViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	updateViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	indexViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	unindexViaAreaPoiLink(arg0: ViaAreaPoiLink): void;
	addViaAreaRLLink(arg0: ViaAreaRLLink): void;
	removeViaAreaRLLink(arg0: ViaAreaRLLink): void;
	updateViaAreaRLLink(arg0: ViaAreaRLLink): void;
	indexViaAreaRLLink(arg0: ViaAreaRLLink): void;
	unindexViaAreaRLLink(arg0: ViaAreaRLLink): void;
	addVirtualConnection(arg0: VirtualConnection): void;
	removeVirtualConnection(arg0: VirtualConnection): void;
	updateVirtualConnection(arg0: VirtualConnection): void;
	indexVirtualConnection(arg0: VirtualConnection): void;
	unindexVirtualConnection(arg0: VirtualConnection): void;
	addTopologySegment(arg0: TopologySegment): void;
	removeTopologySegment(arg0: TopologySegment): void;
	indexTopologySegment(arg0: TopologySegment): void;
	unindexTopologySegment(arg0: TopologySegment): void;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	addLink(arg0: Link): void;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	removeLink(arg0: Link): void;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
	toString(): string;
	getClass(): Class;
}
declare var MapContextPartitionImpl:
{
	new (value?: any): MapContextPartitionImpl;
	(): any;
	(value: any): any;
	prototype: MapContextPartitionImpl;
}
interface AddGuidancePointToMOAssociationUow
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddGuidancePointToMOAssociationUow:
{
	new (value?: any): AddGuidancePointToMOAssociationUow;
	(): any;
	(value: any): any;
	prototype: AddGuidancePointToMOAssociationUow;
}
interface AddViaAreaCompositeUoW
{
	toString(): string;
	id(): number;
	assocId(): number;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddViaAreaCompositeUoW:
{
	new (value?: any): AddViaAreaCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddViaAreaCompositeUoW;
}
interface UpdatePoiAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdatePoiAssociationUoW:
{
	new (value?: any): UpdatePoiAssociationUoW;
	(): any;
	(value: any): any;
	prototype: UpdatePoiAssociationUoW;
}
interface AddFaceUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddFaceUoW:
{
	new (value?: any): AddFaceUoW;
	(): any;
	(value: any): any;
	prototype: AddFaceUoW;
}
interface AdminPlaceImpl
{
	toString(): string;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: AdminPlaceKernel): void;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	adminCode(): string;
	clipLevelAdminPlaces(): Set;
	centerPoint(): PointOfInterest;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	setDummyAdmin(arg0: boolean): void;
	setAdminShort(arg0: number): void;
	toStringWithChildren(): string;
	setNamedPlacePvid(arg0: number): void;
	setDstObserved(arg0: string): void;
	setDstStartDay(arg0: number): void;
	setDstStartWeekday(arg0: number): void;
	setDstStartMonth(arg0: number): void;
	setDstStartTime(arg0: number): void;
	setDstEndDay(arg0: number): void;
	setDstEndWeekday(arg0: number): void;
	setDstEndMonth(arg0: number): void;
	setDstEndTime(arg0: number): void;
	getTimeZone(): string;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	getUserCode(): string;
	getAdminLevel(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatAdminPlace;
	makeFlat(): FlatKernel;
	parent(): AdminPlace;
	getDisplayName(): string;
	country(): Country;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getParentId(): number;
	addChild(arg0: AdminPlace): void;
	removeChild(arg0: AdminPlace): void;
	printChildren(): string;
	listChildren(arg0: string): string;
	simpleFormat(): string;
	listParents(): string;
	children(): Set;
	allComponents(): Set;
	names(arg0: string): Set;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var AdminPlaceImpl:
{
	new (value?: any): AdminPlaceImpl;
	(): any;
	(value: any): any;
	prototype: AdminPlaceImpl;
}
interface NodeUtil
{
	features(arg0: Node): Set;
	hasFeatures(arg0: Node): boolean;
	hasFeature(arg0: Node, arg1: MapFeature): boolean;
	geometry(arg0: Node): GeoShape;
	onAdminPlaceBorder(arg0: Node): boolean;
	isBivalent(arg0: NavNode): boolean;
	links(arg0: Node): List;
	isRefNode(arg0: Node, arg1: Node): boolean;
	isReference(arg0: Node, arg1: Link): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NodeUtil:
{
	new (value?: any): NodeUtil;
	(): any;
	(value: any): any;
	prototype: NodeUtil;
}
interface GuidancePointToMOAssociation
{
	guidancePoint(): GuidancePointFeaturePoint;
	mapObject(): MapObject;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	guidancePointId(): number;
	moId(): number;
	getMapObjectType(): MapObjectType;
	getMapObjAttrType(): AttributeType;
}
declare var GuidancePointToMOAssociation:
{
	new (value?: any): GuidancePointToMOAssociation;
	(): any;
	(value: any): any;
	prototype: GuidancePointToMOAssociation;
}
interface NavLink
{
	length(): double;
	access(): Set;
	refNavNode(): NavNode;
	nrefNavNode(): NavNode;
	firstNavNode(): NavNode;
	lastNavNode(): NavNode;
	productAdmin(): AdminPlace;
	cost(): number;
	display(): Set;
	hasAccess(arg0: number): boolean;
	hasDisplay(arg0: number): boolean;
	hasSpecialAttr(arg0: string): boolean;
	specialAttr(): Set;
	hasSameAttributes(arg0: NavLinkKernel): boolean;
	roadLinks(): List;
	isDivided(): boolean;
	getToNavLanes(): List;
	getFromNavLanes(): List;
	getToRefExtendedLanes(): number;
	getFromRefExtendedLanes(): number;
	getCenterDividerMarker(): DividerMarkerType;
	setAccess(arg0: number, arg1: boolean): void;
	setTollway(arg0: boolean): void;
	setDividerLegal(arg0: boolean): void;
	setInProcessData(arg0: boolean): void;
	setPaved(arg0: boolean): void;
	setPrivate(arg0: boolean): void;
	setRamp(arg0: boolean): void;
	setPoiAccess(arg0: boolean): void;
	setControlledAccess(arg0: boolean): void;
	setBoatFerry(arg0: boolean): void;
	setRailFerry(arg0: boolean): void;
	setMultiDig(arg0: boolean): void;
	replaceAllDividerGaps(arg0: List): void;
	setDividerGap(arg0: float): void;
	removeDividerGap(arg0: float): void;
	setFunctionalClass(arg0: number): void;
	setDirectionOfTravel(arg0: number): void;
	setFromRefSpeedLimit(arg0: number): void;
	setToRefSpeedLimit(arg0: number): void;
	setSpeedCategory(arg0: number): void;
	setLaneCategory(arg0: number): void;
	setFromRefNumberLanes(arg0: number): void;
	setToRefNumberLanes(arg0: number): void;
	setFuncClassSource(arg0: number): void;
	setDirOfTravelSource(arg0: number): void;
	setSpeedLimitSource(arg0: number): void;
	setSpeedLimitDate(arg0: number): void;
	setNumberLanesSource(arg0: number): void;
	setDividerSource(arg0: number): void;
	setFrontageRoad(arg0: boolean): void;
	setAdasPrecisionCategory(arg0: string): void;
	setAdasGeometrySource(arg0: number): void;
	setAdasGeometryDate(arg0: number): void;
	setStubLinkBatch(arg0: boolean): void;
	addRoadLink(arg0: RoadLink): void;
	removeRoadLink(arg0: RoadLink): void;
	setDivider(arg0: string): void;
	setLongHaulBatch(arg0: boolean): void;
	setIntersectionCategory(arg0: string): void;
	link(): Link;
	getNavLane(arg0: number, arg1: string): NavLane;
	getPriority(): number;
	isPrivate(): boolean;
	getOffset(): number;
	isPoiAccess(): boolean;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getToRefPhysicalLanes(): number;
	getToRefNumberLanes(): number;
	getFromRefPhysicalLanes(): number;
	getFromRefNumberLanes(): number;
	isStubLink(): boolean;
	getNRefNavNodeId(): number;
	getRefNavNodeId(): number;
	getLinkId(): number;
	getSupplementalGeoBits(): number;
	getFunctionalClass(): number;
	isInProcessData(): boolean;
	kernelType(): Class;
	getDivider(): string;
	isReversible(): boolean;
	getProductAdminId(): number;
	getConfidenceScore(): number;
	getDirectionOfTravel(): number;
	isRamp(): boolean;
	isPaved(): boolean;
	getFromRefSpeedLimit(): number;
	getToRefSpeedLimit(): number;
	getSpeedCategory(): number;
	getLaneCategory(): number;
	getDirOfTravelSource(): number;
	getDividerSource(): number;
	getNumberLanesSource(): number;
	getSpeedLimitSource(): number;
	getFuncClassSource(): number;
	getSpeedCategorySource(): number;
	isTollway(): boolean;
	isDividerLegal(): boolean;
	isFourWheelDrive(): boolean;
	isHistoricalUSFourWheelDrive(): boolean;
	isControlledAccess(): boolean;
	isBoatFerry(): boolean;
	isRailFerry(): boolean;
	isMultiDig(): boolean;
	getDividerGaps(): List;
	isFrontageRoad(): boolean;
	getAdasPrecisionCategory(): string;
	getAdasGeometrySource(): number;
	getAdasGeometryDate(): number;
	getSpeedLimitDate(): number;
	getIntersectionCategory(): string;
	isMotorway(): boolean;
	isScenicRoute(): boolean;
	getLaneAttributes(): Set;
	isExpressLanes(): boolean;
	isCarpoolRoad(): boolean;
	isParkingLotRoad(): boolean;
	isTransportVerified(): boolean;
	isPublicAccess(): boolean;
	getLowMobility(): number;
	getPrioritySource(): number;
	getGradeCategory(): number;
	getCTlastUpdated(): Date;
	getRoadClass(): number;
	getOverUnderPassIndicator(): number;
	isDeliveryRoad(): boolean;
	getPedestrianPreferred(): number;
	isLimitedAccessRoad(): boolean;
	getBUARoad(): string;
	makeFlat(): FlatNavLink;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	isAccessMotorcycles(): boolean;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getExtendedAttributes(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	edge(): GeoEdge;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
}
declare var NavLink:
{
	new (value?: any): NavLink;
	(): any;
	(value: any): any;
	prototype: NavLink;
}
interface BasicViaArea
{
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getFeatureType(): number;
	getViaAreaType(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicViaArea:
{
	new (value?: any): BasicViaArea;
	(): any;
	(value: any): any;
	prototype: BasicViaArea;
}
interface AddLinkUoW
{
	toString(): string;
	id(): number;
	setLink(arg0: LinkKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddLinkUoW:
{
	new (value?: any): AddLinkUoW;
	(): any;
	(value: any): any;
	prototype: AddLinkUoW;
}
interface CrfXFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CrfXFilter:
{
	new (value?: any): CrfXFilter;
	(): any;
	(value: any): any;
	prototype: CrfXFilter;
}
interface GuidancePointFeaturePoint
{
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	directionOfTravel(): DirectionOfTravel;
	calcPercentFromRef(): double;
	link(): Link;
}
declare var GuidancePointFeaturePoint:
{
	new (value?: any): GuidancePointFeaturePoint;
	(): any;
	(value: any): any;
	prototype: GuidancePointFeaturePoint;
}
interface AddPoiCartoCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddPoiCartoCompositeUoW:
{
	new (value?: any): AddPoiCartoCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddPoiCartoCompositeUoW;
}
interface BasicExternalDateMask
{
	dateValue2(): string;
	externalDateFile(): string;
	isExternalDateMask(): boolean;
	type(): string;
	isDateIntervalMask(): boolean;
	isDayMask(): boolean;
	timeInterval(): TimeInterval;
	indicatesExcludeDate(): boolean;
	indicatesFromEnd(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BasicExternalDateMask:
{
	new (value?: any): BasicExternalDateMask;
	(): any;
	(value: any): any;
	prototype: BasicExternalDateMask;
}
interface TimeInterval
{
	startTime(): TimeUnit;
	endTime(): TimeUnit;
	timeInterval(): TimeInterval;
	setStartTime(arg0: TimeUnit): void;
	setEndTime(arg0: TimeUnit): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TimeInterval:
{
	new (value?: any): TimeInterval;
	(): any;
	(value: any): any;
	prototype: TimeInterval;
}
interface RemovableFilter
{
	accept(arg0: MapObject): boolean;
	visit(arg0: MapObjectAssociation): void;
	visit(arg0: GuidancePointFeaturePoint): void;
	visit(arg0: GuidancePointToPoiAssociation): void;
	visit(arg0: GuidancePointToCartoAssociation): void;
	visit(arg0: GuidancePointToMOAssociation): void;
	visit(arg0: PoiAssoc): void;
	visit(arg0: FeaturePoint): void;
	visit(arg0: RoadLink): void;
	visit(arg0: Sign): void;
	visit(arg0: NaturalGuidanceLinkToMOAssociation): void;
	visit(arg0: ViaArea): void;
	visit(arg0: VirtualConnection): void;
	visit(arg0: ViaAreaPoiLink): void;
	visit(arg0: ViaAreaRLLink): void;
	visit(arg0: ViaAreaToPoiAssociation): void;
	visit(arg0: ViaAreaToRoadLinkAssociation): void;
	visit(arg0: NaturalGuidanceLinkToPoiAssociation): void;
	visit(arg0: NaturalGuidanceLinkToCartoAssociation): void;
	visit(arg0: CartoFace): void;
	visit(arg0: CartoLink): void;
	visit(arg0: AdminPlace): void;
	visit(arg0: PostalArea): void;
	visit(arg0: Zone): void;
	visit(arg0: CartoFeature): void;
	visit(arg0: Node): void;
	visit(arg0: Link): void;
	visit(arg0: Annotation): void;
	visit(arg0: Face): void;
	visit(arg0: FaceLink): void;
	visit(arg0: CompositeRoadFeature): void;
	visit(arg0: Condition): void;
	visit(arg0: NavNode): void;
	visit(arg0: NavStrand): void;
	visit(arg0: LaneStrand): void;
	visit(arg0: NavLink): void;
	visit(arg0: NavLane): void;
	visit(arg0: PoiCarto): void;
	visit(arg0: PointOfInterest): void;
	visit(arg0: RoadPoint): void;
	update(arg0: number, arg1: MapObject): void;
	accept(arg0: number): boolean;
	reset(): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var RemovableFilter:
{
	new (value?: any): RemovableFilter;
	(): any;
	(value: any): any;
	prototype: RemovableFilter;
}
interface PartialFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PartialFilter:
{
	new (value?: any): PartialFilter;
	(): any;
	(value: any): any;
	prototype: PartialFilter;
}
interface ScenicNameFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ScenicNameFilter:
{
	new (value?: any): ScenicNameFilter;
	(): any;
	(value: any): any;
	prototype: ScenicNameFilter;
}
interface ExternalDateMask
{
	dateValue2(): string;
	externalDateFile(): string;
	type(): string;
	isDateIntervalMask(): boolean;
	isDayMask(): boolean;
	timeInterval(): TimeInterval;
	isExternalDateMask(): boolean;
	indicatesExcludeDate(): boolean;
	indicatesFromEnd(): boolean;
}
declare var ExternalDateMask:
{
	new (value?: any): ExternalDateMask;
	(): any;
	(value: any): any;
	prototype: ExternalDateMask;
}
interface MapContextStats
{
	computeStats(): void;
	getXmlDocument(): Document;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapContextStats:
{
	new (value?: any): MapContextStats;
	(): any;
	(value: any): any;
	prototype: MapContextStats;
}
interface MonthOfYear
{
	equals(arg0: any): boolean;
	toString(): string;
	isValid(arg0: CalendarUnit): boolean;
	month(): number;
	isValidMonthOfYear(arg0: number): boolean;
	calendarUnit(): CalendarUnit;
	toMonthOfYear(arg0: string): MonthOfYear;
	getClass(): Class;
}
declare var MonthOfYear:
{
	new (value?: any): MonthOfYear;
	(): any;
	(value: any): any;
	prototype: MonthOfYear;
}
interface MonthOfYear
{
	equals(arg0: any): boolean;
	toString(): string;
	isValid(arg0: CalendarUnit): boolean;
	month(): number;
	isValidMonthOfYear(arg0: number): boolean;
	calendarUnit(): CalendarUnit;
	toMonthOfYear(arg0: string): MonthOfYear;
	getClass(): Class;
}
declare var MonthOfYear:
{
	new (value?: any): MonthOfYear;
	(): any;
	(value: any): any;
	prototype: MonthOfYear;
}
interface BasicZoneAdminPlace
{
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getAdminPlace(): AdminPlace;
	setState(arg0: MapContext, arg1: ZoneAdminPlaceKernel): void;
	getAdminPlaceId(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getZoneId(): number;
	getZone(): Zone;
	makeFlat(): FlatKernel;
	makeFlat(): FlatZoneAdminPlace;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicZoneAdminPlace:
{
	new (value?: any): BasicZoneAdminPlace;
	(): any;
	(value: any): any;
	prototype: BasicZoneAdminPlace;
}
interface DistanceMarkerFeaturePoint
{
	getLanguageCode(): string;
	getDistanceValue(): string;
	getVerified(): DmVerified;
	getUnitOfMeasure(): SystemOfMeasurement;
	getTransliterations(): Set;
	getDirectionOnSign(): DirectionOnSign;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	directionOfTravel(): DirectionOfTravel;
	calcPercentFromRef(): double;
	link(): Link;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var DistanceMarkerFeaturePoint:
{
	new (value?: any): DistanceMarkerFeaturePoint;
	(): any;
	(value: any): any;
	prototype: DistanceMarkerFeaturePoint;
}
interface PartitionedAdminPlace
{
	borderingNeighbors(): Set;
	parent(): AdminPlace;
	getDisplayName(): string;
	country(): Country;
	clipLevelAdminPlaces(): Set;
	centerPoint(): PointOfInterest;
	getUserCode(): string;
	listChildren(arg0: string): string;
	simpleFormat(): string;
	listParents(): string;
	children(): Set;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getParentId(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	getTimeZone(): string;
	getAdminLevel(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
}
declare var PartitionedAdminPlace:
{
	new (value?: any): PartitionedAdminPlace;
	(): any;
	(value: any): any;
	prototype: PartitionedAdminPlace;
}
interface Face
{
	area(): double;
	getOrientedLinkIds(): Set;
	enclaves(): number;
	exteriorBoundary(): List;
	enclaveBoundary(arg0: number): List;
	polygon(): GeoPolygon;
	boundaryComponents(): List;
	boundaryFragments(): List;
	closedBoundaryComponents(): List;
	isBroken(): boolean;
	isComplete(): boolean;
	hasPartialFaceLink(): boolean;
	cartoFeatures(): Set;
	boundaryAsPoints(): List;
	faceLinks(): Set;
	getLinkIds(): Set;
	mbr(): GeoRectangle;
	boundary(): List;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getFacePvid(): number;
}
declare var Face:
{
	new (value?: any): Face;
	(): any;
	(value: any): any;
	prototype: Face;
}
interface TransactionalMapContext
{
	remove(arg0: number, arg1: Set): void;
	beginTransaction(): void;
	endTransaction(): void;
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	update(arg0: Kernel): void;
	setMetadata(arg0: Metadata): void;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	removeFringe(arg0: MapObject): void;
	updateId(arg0: number, arg1: number): void;
	merger(): Merger;
	addScope(arg0: Scope): void;
	removeScope(): void;
	addFringe(arg0: MapObject): void;
	addIncompleteAdmin(arg0: IncompleteAdminPacket): void;
	removeIncompleteAdmin(arg0: number): void;
	addAdditionalData(arg0: Properties): void;
	setEdgeCandidates(arg0: Set): void;
	addMetricsContext(arg0: MetricContext): void;
	clearMetricsContexts(): void;
	addCustomContext(arg0: Class): void;
	getModifiableDegradationValidationContext(): ModifiableDegradationValidationContext;
	extensions(): Set;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number): FeaturePoint;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: NavNode): boolean;
	isIncompleteNode(arg0: Node): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavNode): Set;
	findCrfs(arg0: NavLink): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(): Iterator;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointSize(): number;
	featurePointSize(arg0: FeaturePointType): number;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationSize(): number;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	hasCustomContext(arg0: Class): boolean;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
}
declare var TransactionalMapContext:
{
	new (value?: any): TransactionalMapContext;
	(): any;
	(value: any): any;
	prototype: TransactionalMapContext;
}
interface SignAsRealFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SignAsRealFilter:
{
	new (value?: any): SignAsRealFilter;
	(): any;
	(value: any): any;
	prototype: SignAsRealFilter;
}
interface DetailRecordManager
{
	copyAdminPlaceDetails(arg0: Set): Set;
	getDetailRecords(arg0: ZoneDetailTypeEnum, arg1: Zone): Set;
	getDetailRecords(arg0: AdminPlaceDetailTypeEnum, arg1: AdminPlace): Set;
	copyZoneDetails(arg0: Set): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DetailRecordManager:
{
	new (value?: any): DetailRecordManager;
	(): any;
	(value: any): any;
	prototype: DetailRecordManager;
}
interface DayOfWeekOfMonth
{
	toString(): string;
	dayOfWeek(): DayOfWeek;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	weekOfMonth(): WeekOfMonth;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DayOfWeekOfMonth:
{
	new (value?: any): DayOfWeekOfMonth;
	(): any;
	(value: any): any;
	prototype: DayOfWeekOfMonth;
}
interface DayOfWeek
{
	toString(): string;
	day(): number;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	isValidDayOfWeek(arg0: number): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DayOfWeek:
{
	new (value?: any): DayOfWeek;
	(): any;
	(value: any): any;
	prototype: DayOfWeek;
}
interface WeekOfMonth
{
	toString(): string;
	isValidWeekOfMonth(arg0: number): boolean;
	week(): number;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var WeekOfMonth:
{
	new (value?: any): WeekOfMonth;
	(): any;
	(value: any): any;
	prototype: WeekOfMonth;
}
interface VssIDUtil
{
	setDirectionOfTravel(arg0: VariableSpeedLimit, arg1: NavLink, arg2: number): FlatCondition;
	getEmptyMap(): Map;
	getVssIdsForCETApply(arg0: NavLink, arg1: MapContextProxy): Set;
	isDestinationOfVSS(arg0: NavLink): boolean;
	isVSLLink(arg0: NavLink): boolean;
	getVssIdsForVsl(arg0: NavLink, arg1: NavNode, arg2: List, arg3: MapContextProxy): Map;
	getVssDestination(arg0: NavLink, arg1: NavNode): VariableSpeedSign;
	filterNavLinksWithCAOrLARPriority(arg0: List): List;
	filterNavLinks(arg0: List, arg1: List): List;
	getVssOrVslOnNavLink(arg0: NavLink, arg1: NavLink, arg2: NavNode, arg3: ConditionType): Set;
	getNavLinksOnNode(arg0: NavNode, arg1: NavLink, arg2: ConditionType): List;
	getCommonNode(arg0: NavLink, arg1: NavLink): NavNode;
	getOtherNode(arg0: NavLink, arg1: NavNode): NavNode;
	getDOT(arg0: NavLink, arg1: NavNode, arg2: boolean): string;
	isOriginOfVSS(arg0: NavLink): boolean;
	getNodeTowardsDirOfVSL(arg0: NavLink, arg1: number): NavNode;
	getNodeAccordingToDir(arg0: NavLink, arg1: number): NavNode;
	getDotToUseInVSL(arg0: string): number;
	getDotFromVSL(arg0: number): string;
	getDOTVSSDestLink(arg0: VariableSpeedSign): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var VssIDUtil:
{
	new (value?: any): VssIDUtil;
	(): any;
	(value: any): any;
	prototype: VssIDUtil;
}
interface VariableSpeedLimit
{
	getConditionType(): number;
	getVssId(): string;
	getDirectionofTravel(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var VariableSpeedLimit:
{
	new (value?: any): VariableSpeedLimit;
	(): any;
	(value: any): any;
	prototype: VariableSpeedLimit;
}
interface VariableSpeedSign
{
	getVssId(): string;
	speedSignLocation(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var VariableSpeedSign:
{
	new (value?: any): VariableSpeedSign;
	(): any;
	(value: any): any;
	prototype: VariableSpeedSign;
}
interface Serializer
{
	write(): void;
	close(): void;
	setTextMode(arg0: boolean): void;
	textMode(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var Serializer:
{
	new (value?: any): Serializer;
	(): any;
	(value: any): any;
	prototype: Serializer;
}
interface BasicFaceLink
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapComponentVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: FaceLinkKernel): void;
	face(): Face;
	getFaceId(): number;
	getLinkId(): number;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	isInverted(): boolean;
	link(): Link;
	makeFlat(): FlatFaceLink;
	makeFlat(): FlatKernel;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicFaceLink:
{
	new (value?: any): BasicFaceLink;
	(): any;
	(value: any): any;
	prototype: BasicFaceLink;
}
interface SpecialSpeedSituationUtil
{
	timeOverride(arg0: ConditionKernel): number;
	getConditionType(): number;
	getSpeedLimit(arg0: ConditionKernel): number;
	speedSituationType(arg0: ConditionKernel): number;
	dependentSpeedType(arg0: ConditionKernel): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SpecialSpeedSituationUtil:
{
	new (value?: any): SpecialSpeedSituationUtil;
	(): any;
	(value: any): any;
	prototype: SpecialSpeedSituationUtil;
}
interface PointOfInterestAssociation
{
	equals(arg0: any): boolean;
	setPointOfInterest(arg0: PointOfInterest): void;
	assocType(): string;
	setAssocType(arg0: string): void;
	pointOfInterest(): PointOfInterest;
	toString(): string;
	getClass(): Class;
}
declare var PointOfInterestAssociation:
{
	new (value?: any): PointOfInterestAssociation;
	(): any;
	(value: any): any;
	prototype: PointOfInterestAssociation;
}
interface CompositeRoadFeatureUtil
{
	getMissingIds(arg0: CompositeRoadFeature, arg1: MapContext): Set;
	isPartial(arg0: CompositeRoadFeature): boolean;
	navFeatures(arg0: CompositeRoadFeature, arg1: MapContext): Set;
	allComponents(arg0: CompositeRoadFeature): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CompositeRoadFeatureUtil:
{
	new (value?: any): CompositeRoadFeatureUtil;
	(): any;
	(value: any): any;
	prototype: CompositeRoadFeatureUtil;
}
interface CopyConditionsCompositeUoW
{
	toString(): string;
	getConditionIds(): List;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyConditionsCompositeUoW:
{
	new (value?: any): CopyConditionsCompositeUoW;
	(): any;
	(value: any): any;
	prototype: CopyConditionsCompositeUoW;
}
interface GateUtil
{
	getConditionType(): number;
	gateType(arg0: ConditionKernel): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GateUtil:
{
	new (value?: any): GateUtil;
	(): any;
	(value: any): any;
	prototype: GateUtil;
}
interface Link
{
	length(): double;
	cartoFeatures(): Set;
	setLinkPvid(arg0: number): void;
	angle(arg0: Link, arg1: Node): double;
	leftPostalArea(): PostalArea;
	rightPostalArea(): PostalArea;
	viaAreas(): Set;
	setDetailedCity(arg0: boolean): void;
	setUrban(arg0: boolean): void;
	setGeometrySource(arg0: number): void;
	edge(): GeoEdge;
	bearing(arg0: Node): double;
	rightAdminPlace(): AdminPlace;
	refNode(): Node;
	nrefNode(): Node;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	rightAlternateNamedPlaces(): Set;
	leftAlternateNamedPlaces(): Set;
	leftAdminPlace(): AdminPlace;
	assignEdge(arg0: GeoEdge): void;
	setAdminPlace(arg0: AdminPlace, arg1: number): void;
	isBoundary(): boolean;
	nextShape(arg0: Node): GeoPoint;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isBridge(): boolean;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	isUrban(): boolean;
	getLinkProductBoundaryOverrides(): Set;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	getGeometrySource(): number;
	isDetailedCity(): boolean;
	getShape(): List;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	getRightAlternateNamedPlaceIds(): Set;
	getLeftAlternateNamedPlaceIds(): Set;
	getLinkPvid(): number;
	makeFlat(): FlatLink;
	isAligned(): boolean;
	getMapEdgeId(): number;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	hasAdasHeight(): boolean;
	getLinkStats(): LinkStats;
	getExtendedAttributes(): Set;
}
declare var Link:
{
	new (value?: any): Link;
	(): any;
	(value: any): any;
	prototype: Link;
}
interface VssIdUtilMap
{
	getVssIdsForVsl(arg0: NavLink, arg1: NavNode, arg2: List, arg3: Map, arg4: MapContextProxy): Map;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var VssIdUtilMap:
{
	new (value?: any): VssIdUtilMap;
	(): any;
	(value: any): any;
	prototype: VssIdUtilMap;
}
interface UnitOfWorkAbstr
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UnitOfWorkAbstr:
{
	new (value?: any): UnitOfWorkAbstr;
	(): any;
	(value: any): any;
	prototype: UnitOfWorkAbstr;
}
interface UpdateConditionCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateConditionCompositeUoW:
{
	new (value?: any): UpdateConditionCompositeUoW;
	(): any;
	(value: any): any;
	prototype: UpdateConditionCompositeUoW;
}
interface UpdateDomainComboUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateDomainComboUoW:
{
	new (value?: any): UpdateDomainComboUoW;
	(): any;
	(value: any): any;
	prototype: UpdateDomainComboUoW;
}
interface MapObjectUtilities
{
	inverseMapEdgeSide(arg0: MapEdgeSide): MapEdgeSide;
	getIds(arg0: Collection): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapObjectUtilities:
{
	new (value?: any): MapObjectUtilities;
	(): any;
	(value: any): any;
	prototype: MapObjectUtilities;
}
interface StackedComponent
{
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	component(): MapComponent;
	point(): GeoPoint;
	d96Id(): number;
	isLink(): boolean;
	getClass(): Class;
}
declare var StackedComponent:
{
	new (value?: any): StackedComponent;
	(): any;
	(value: any): any;
	prototype: StackedComponent;
}
interface GateImpl
{
	getConditionType(): number;
	gateType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var GateImpl:
{
	new (value?: any): GateImpl;
	(): any;
	(value: any): any;
	prototype: GateImpl;
}
interface VariableSpeedLimit
{
	getConditionType(): number;
	getVssId(): string;
	getDirectionofTravel(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var VariableSpeedLimit:
{
	new (value?: any): VariableSpeedLimit;
	(): any;
	(value: any): any;
	prototype: VariableSpeedLimit;
}
interface InProcessFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var InProcessFilter:
{
	new (value?: any): InProcessFilter;
	(): any;
	(value: any): any;
	prototype: InProcessFilter;
}
interface BasicUnnameableFeaturePointOnNavLinkAbstr
{
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	directionOfTravel(): DirectionOfTravel;
	accept(arg0: KernelVisitor): void;
	setState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeatureType(): number;
	getLinkId(): number;
	setFeaturePointState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	calcPercentFromRef(): double;
	allComponents(): Set;
	link(): Link;
	getPoint(): GeoPoint;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	compositeKernelType(): CompositeKernelType;
}
declare var BasicUnnameableFeaturePointOnNavLinkAbstr:
{
	new (value?: any): BasicUnnameableFeaturePointOnNavLinkAbstr;
	(): any;
	(value: any): any;
	prototype: BasicUnnameableFeaturePointOnNavLinkAbstr;
}
interface AddMicroPointAddressUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddMicroPointAddressUoW:
{
	new (value?: any): AddMicroPointAddressUoW;
	(): any;
	(value: any): any;
	prototype: AddMicroPointAddressUoW;
}
interface BasicViaAreaRLLink
{
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapComponentVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: ViaAreaRLLinkKernel): void;
	association(): ViaAreaToRoadLinkAssociation;
	getLinkId(): number;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getAssociationId(): number;
	link(): Link;
	makeFlat(): FlatKernel;
	makeFlat(): FlatViaAreaRLLink;
	toString(): string;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicViaAreaRLLink:
{
	new (value?: any): BasicViaAreaRLLink;
	(): any;
	(value: any): any;
	prototype: BasicViaAreaRLLink;
}
interface UpdateGPToPOIAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateGPToPOIAssociationUoW:
{
	new (value?: any): UpdateGPToPOIAssociationUoW;
	(): any;
	(value: any): any;
	prototype: UpdateGPToPOIAssociationUoW;
}
interface PostalArea
{
	country(): Country;
	applicableAdmins(): Set;
	namedPlace(): NamedPlace;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getNamedPlacePvid(): number;
	getPostalCode(): string;
	getCountryId(): number;
	getNamedPlaceId(): number;
}
declare var PostalArea:
{
	new (value?: any): PostalArea;
	(): any;
	(value: any): any;
	prototype: PostalArea;
}
interface UpdateDistanceMarkerUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateDistanceMarkerUoW:
{
	new (value?: any): UpdateDistanceMarkerUoW;
	(): any;
	(value: any): any;
	prototype: UpdateDistanceMarkerUoW;
}
interface UowSecurityModel
{
	getSecurityManager(arg0: MapContext, arg1: string): UoWSecurityManager;
	getInstance(): UowSecurityModel;
	addSecurityManager(arg0: MapContext, arg1: UoWSecurityManager): void;
	removeSecurityManager(arg0: MapContext): void;
	getAllSecurityManagers(arg0: MapContext): Collection;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var UowSecurityModel:
{
	new (value?: any): UowSecurityModel;
	(): any;
	(value: any): any;
	prototype: UowSecurityModel;
}
interface UowSecurityModel
{
	getSecurityManager(arg0: MapContext, arg1: string): UoWSecurityManager;
	getInstance(): UowSecurityModel;
	addSecurityManager(arg0: MapContext, arg1: UoWSecurityManager): void;
	removeSecurityManager(arg0: MapContext): void;
	getAllSecurityManagers(arg0: MapContext): Collection;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var UowSecurityModel:
{
	new (value?: any): UowSecurityModel;
	(): any;
	(value: any): any;
	prototype: UowSecurityModel;
}
interface RemoveViaAreaRLLinkUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveViaAreaRLLinkUoW:
{
	new (value?: any): RemoveViaAreaRLLinkUoW;
	(): any;
	(value: any): any;
	prototype: RemoveViaAreaRLLinkUoW;
}
interface AddCompositeRoadFeatureUoW
{
	toString(): string;
	id(): number;
	setCompositeRoadFeature(arg0: CompositeRoadFeatureKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddCompositeRoadFeatureUoW:
{
	new (value?: any): AddCompositeRoadFeatureUoW;
	(): any;
	(value: any): any;
	prototype: AddCompositeRoadFeatureUoW;
}
interface CasingEngineExtension
{
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	extender(): MapContextExtender;
	getCasingEngine(): CasingEngine;
	mapContext(): MapContext;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CasingEngineExtension:
{
	new (value?: any): CasingEngineExtension;
	(): any;
	(value: any): any;
	prototype: CasingEngineExtension;
}
interface DistanceMarkerToRoadLinkAssociation
{
	roadLink(): RoadLink;
	distanceMarker(): DistanceMarkerFeaturePoint;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	distanceMarkerId(): number;
	roadLinkId(): number;
}
declare var DistanceMarkerToRoadLinkAssociation:
{
	new (value?: any): DistanceMarkerToRoadLinkAssociation;
	(): any;
	(value: any): any;
	prototype: DistanceMarkerToRoadLinkAssociation;
}
interface DistanceMarkerFeaturePoint
{
	getLanguageCode(): string;
	getDistanceValue(): string;
	getVerified(): DmVerified;
	getUnitOfMeasure(): SystemOfMeasurement;
	getTransliterations(): Set;
	getDirectionOnSign(): DirectionOnSign;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	directionOfTravel(): DirectionOfTravel;
	calcPercentFromRef(): double;
	link(): Link;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var DistanceMarkerFeaturePoint:
{
	new (value?: any): DistanceMarkerFeaturePoint;
	(): any;
	(value: any): any;
	prototype: DistanceMarkerFeaturePoint;
}
interface RoadName
{
	formattedName(): string;
	isAttached(): boolean;
	getSuffix(): string;
	getStreetType(): string;
	isPrecedes(): boolean;
	valueEquivalent(arg0: RoadNameKernel): boolean;
	getPrefix(): string;
	getTransliterations(): Set;
	getDirectionOnSign(): string;
	getRouteType(): number;
	makeFlat(): FlatRoadName;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	type(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getType(): string;
	id(): number;
	basename(): string;
	getBasename(): string;
	getLanguageCode(): string;
	sequenceNumber(): number;
	getShortName(): string;
	isExonym(): boolean;
	languageCode(): string;
	cleared(): boolean;
	getNamePvid(): number;
	getPoiKeyword(): string;
	isRoadName(): boolean;
	getRefSequenceNumber(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var RoadName:
{
	new (value?: any): RoadName;
	(): any;
	(value: any): any;
	prototype: RoadName;
}
interface AddNavLaneCompositeUoW
{
	toString(): string;
	id(): number;
	setNavLane(arg0: NavLaneKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddNavLaneCompositeUoW:
{
	new (value?: any): AddNavLaneCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddNavLaneCompositeUoW;
}
interface RemoveLaneStrandUoW
{
	toString(): string;
	id(): number;
	setLaneStrand(arg0: LaneStrandKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveLaneStrandUoW:
{
	new (value?: any): RemoveLaneStrandUoW;
	(): any;
	(value: any): any;
	prototype: RemoveLaneStrandUoW;
}
interface CarPool
{
	minPassengers(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var CarPool:
{
	new (value?: any): CarPool;
	(): any;
	(value: any): any;
	prototype: CarPool;
}
interface BasicMapEdgeVisitor
{
	visitMapObjectAssociationKernel(arg0: MapObjectAssociationKernel): void;
	hasGeoLockedObjects(): boolean;
	visitConditionKernel(arg0: ConditionKernel): void;
	visitNavStrandKernel(arg0: NavStrandKernel): void;
	visitNavLinkKernel(arg0: NavLinkKernel): void;
	visitLinkKernel(arg0: LinkKernel): void;
	visitNodeKernel(arg0: NodeKernel): void;
	visitFaceKernel(arg0: FaceKernel): void;
	visitPoiCartoKernel(arg0: PoiCartoKernel): void;
	visitFaceLinkKernel(arg0: FaceLinkKernel): void;
	visitAdminPlaceKernel(arg0: AdminPlaceKernel): void;
	visitCartoFeatureKernel(arg0: CartoFeatureKernel): void;
	visitCountryKernel(arg0: CountryKernel): void;
	visitSignKernel(arg0: SignKernel): void;
	visitNavNodeKernel(arg0: NavNodeKernel): void;
	visitRoadLinkKernel(arg0: RoadLinkKernel): void;
	visitPointOfInterestKernel(arg0: PointOfInterestKernel): void;
	visitCompositeRoadFeatureKernel(arg0: CompositeRoadFeatureKernel): void;
	visitStreetTypeKernel(arg0: StreetTypeKernel): void;
	visitRuleInfoKernel(arg0: RuleInfoKernel): void;
	visitPostalAreaKernel(arg0: PostalAreaKernel): void;
	visitZoneKernel(arg0: ZoneKernel): void;
	visitValidationExceptionKernel(arg0: ValidationExceptionKernel): void;
	visitComboKernel(arg0: ComboKernel): void;
	visitDomainKernel(arg0: DomainKernel): void;
	visitDomainComboKernel(arg0: DomainComboKernel): void;
	visitRoadNameKernel(arg0: RoadNameKernel): void;
	visitCartoLinkKernel(arg0: CartoLinkKernel): void;
	visitCartoFaceKernel(arg0: CartoFaceKernel): void;
	visitRoadPointKernel(arg0: RoadPointKernel): void;
	visitPostalAreaAdminPlaceKernel(arg0: PostalAreaAdminPlaceKernel): void;
	visitPostalAreaZoneKernel(arg0: PostalAreaZoneKernel): void;
	visitZoneAdminPlaceKernel(arg0: ZoneAdminPlaceKernel): void;
	visitPoiAssocKernel(arg0: PoiAssocKernel): void;
	visitFeaturePointKernel(arg0: FeaturePointKernel): void;
	visitAnnotationKernel(arg0: AnnotationKernel): void;
	visitNavLaneKernel(arg0: NavLaneKernel): void;
	visitLaneStrandKernel(arg0: LaneStrandKernel): void;
	visitUVCKernel(arg0: UnvalidatedChangeKernel): void;
	visitViaAreaKernel(arg0: ViaAreaKernel): void;
	visitVirtualConnectionKernel(arg0: VirtualConnectionKernel): void;
	visitViaAreaPoiLinkKernel(arg0: ViaAreaPoiLinkKernel): void;
	visitViaAreaRLLinkKernel(arg0: ViaAreaRLLinkKernel): void;
	visitTopologySegmentKernel(arg0: TopologySegmentKernel): void;
	findKernel(arg0: number): Kernel;
	visitKernel(arg0: Kernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BasicMapEdgeVisitor:
{
	new (value?: any): BasicMapEdgeVisitor;
	(): any;
	(value: any): any;
	prototype: BasicMapEdgeVisitor;
}
interface RemoveGuidancePointFeaturePointUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveGuidancePointFeaturePointUoW:
{
	new (value?: any): RemoveGuidancePointFeaturePointUoW;
	(): any;
	(value: any): any;
	prototype: RemoveGuidancePointFeaturePointUoW;
}
interface UpdateCartoFaceUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateCartoFaceUoW:
{
	new (value?: any): UpdateCartoFaceUoW;
	(): any;
	(value: any): any;
	prototype: UpdateCartoFaceUoW;
}
interface GuidancePointFeaturePointUtil
{
	compositeKernelType(): FeaturePointType;
	mapObjectType(): MapObjectType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GuidancePointFeaturePointUtil:
{
	new (value?: any): GuidancePointFeaturePointUtil;
	(): any;
	(value: any): any;
	prototype: GuidancePointFeaturePointUtil;
}
interface UpdateNavLaneCompositeUoW
{
	toString(): string;
	id(): number;
	setLane(arg0: NavLaneKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNavLaneCompositeUoW:
{
	new (value?: any): UpdateNavLaneCompositeUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNavLaneCompositeUoW;
}
interface BasicTopologySegment
{
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: TopologySegmentKernel): void;
	getFeatureType(): number;
	getNavLinkIds(): Set;
	firstNavNode(): NavNode;
	lastNavNode(): NavNode;
	getTopologySegmentPvid(): number;
	getFirstNavNodeId(): number;
	getLastNavNodeId(): number;
	getTopologySegmentNavLinks(): List;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	getOrientedTopologySegNavLinks(): List;
	allComponents(): Set;
	makeFlat(): FlatTopologySegment;
	makeFlat(): FlatKernel;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicTopologySegment:
{
	new (value?: any): BasicTopologySegment;
	(): any;
	(value: any): any;
	prototype: BasicTopologySegment;
}
interface Sign
{
	originatingNavLink(): NavLink;
	destinations(): List;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getDataSource(): number;
	getMultiNavPvid(): number;
	getFlatDestinations(): List;
	getOriginatingNavLinkId(): number;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var Sign:
{
	new (value?: any): Sign;
	(): any;
	(value: any): any;
	prototype: Sign;
}
interface AdminPlaceUtil
{
	parent(arg0: AdminPlace, arg1: MapContext): AdminPlace;
	getDisplayName(arg0: AdminPlace): string;
	country(arg0: AdminPlace, arg1: MapContext): Country;
	clipLevelAdminPlaces(arg0: AdminPlace): Set;
	centerPoint(arg0: AdminPlace): PointOfInterest;
	makeTimeZone(arg0: Array<string>): string;
	boundary(arg0: AdminPlace): CartoFeature;
	hasCompletePolygonBoundary(arg0: AdminPlace): boolean;
	getUserCode(arg0: AdminPlace): string;
	listChildren(arg0: AdminPlace, arg1: string): string;
	simpleFormat(arg0: AdminPlace): string;
	listParents(arg0: AdminPlace): string;
	children(arg0: AdminPlace): Set;
	allComponents(arg0: AdminPlace): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: AdminPlaceKernel): void;
	clipLevelAdminPlaceIds(arg0: MapContext, arg1: Iterable): Set;
	clipLevelAdminPlaceKernels(arg0: MapContext, arg1: Iterable): Set;
	clipLevelAdminPlacePvids(arg0: MapContext, arg1: Iterable): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AdminPlaceUtil:
{
	new (value?: any): AdminPlaceUtil;
	(): any;
	(value: any): any;
	prototype: AdminPlaceUtil;
}
interface AddViaAreaUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddViaAreaUoW:
{
	new (value?: any): AddViaAreaUoW;
	(): any;
	(value: any): any;
	prototype: AddViaAreaUoW;
}
interface LonghaulFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LonghaulFilter:
{
	new (value?: any): LonghaulFilter;
	(): any;
	(value: any): any;
	prototype: LonghaulFilter;
}
interface AddNGLinkToPOIAssociationUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddNGLinkToPOIAssociationUoW:
{
	new (value?: any): AddNGLinkToPOIAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddNGLinkToPOIAssociationUoW;
}
interface PrunerFilterAbstr
{
	filter(arg0: MapObject): UnitOfWork;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	description(): string;
}
declare var PrunerFilterAbstr:
{
	new (value?: any): PrunerFilterAbstr;
	(): any;
	(value: any): any;
	prototype: PrunerFilterAbstr;
}
interface CrfFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CrfFilter:
{
	new (value?: any): CrfFilter;
	(): any;
	(value: any): any;
	prototype: CrfFilter;
}
interface FaceImpl
{
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapComponentVisitor): void;
	area(): double;
	getOrientedLinkIds(): Set;
	boundaryPoints(): List;
	enclaves(): number;
	exteriorBoundary(): List;
	enclaveBoundary(arg0: number): List;
	getFacePvid(): number;
	polygon(): GeoPolygon;
	boundaryComponents(): List;
	boundaryFragments(): List;
	closedBoundaryComponents(): List;
	isBroken(): boolean;
	isComplete(): boolean;
	hasPartialFaceLink(): boolean;
	cartoFeatures(): Set;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: FaceKernel): void;
	boundaryAsPoints(): List;
	faceLinks(): Set;
	getLinkIds(): Set;
	features(): Set;
	mbr(): GeoRectangle;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	boundary(): List;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	addDependent(arg0: MapObject): void;
	isMapEdge(): boolean;
	removeDependent(arg0: MapObject): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	makeFlat(): FlatFace;
	toString(): string;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	getClass(): Class;
}
declare var FaceImpl:
{
	new (value?: any): FaceImpl;
	(): any;
	(value: any): any;
	prototype: FaceImpl;
}
interface RdstmcFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var RdstmcFilter:
{
	new (value?: any): RdstmcFilter;
	(): any;
	(value: any): any;
	prototype: RdstmcFilter;
}
interface UpdatePostalAreaAssociationUoW
{
	toString(): string;
	setPostalArea(arg0: PostalAreaKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdatePostalAreaAssociationUoW:
{
	new (value?: any): UpdatePostalAreaAssociationUoW;
	(): any;
	(value: any): any;
	prototype: UpdatePostalAreaAssociationUoW;
}
interface TransportSpecialSpeedSituation
{
	getWeatherType(): WeatherType;
	getWeightDependentValue(): number;
	getDirectionType(): DirectionType;
	getSpeedSituationType(): SpeedSituationType;
	getSpeedLimitValue(): number;
	getHazardousMaterialType(): HazardousMaterialType;
	getTrailerType(): TrailerType;
	getTimeOverrideType(): TimeOverrideType;
	getSpeedLimitType(): SpeedLimitType;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var TransportSpecialSpeedSituation:
{
	new (value?: any): TransportSpecialSpeedSituation;
	(): any;
	(value: any): any;
	prototype: TransportSpecialSpeedSituation;
}
interface SpeedSituationType
{
	values(): SpeedSituationType;
	valueOf(arg0: string): SpeedSituationType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var SpeedSituationType:
{
	new (value?: any): SpeedSituationType;
	(): any;
	(value: any): any;
	prototype: SpeedSituationType;
}
interface HazardousMaterialType
{
	values(): HazardousMaterialType;
	valueOf(arg0: string): HazardousMaterialType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var HazardousMaterialType:
{
	new (value?: any): HazardousMaterialType;
	(): any;
	(value: any): any;
	prototype: HazardousMaterialType;
}
interface TrailerType
{
	values(): TrailerType;
	valueOf(arg0: string): TrailerType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var TrailerType:
{
	new (value?: any): TrailerType;
	(): any;
	(value: any): any;
	prototype: TrailerType;
}
interface TimeOverrideType
{
	values(): TimeOverrideType;
	valueOf(arg0: string): TimeOverrideType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var TimeOverrideType:
{
	new (value?: any): TimeOverrideType;
	(): any;
	(value: any): any;
	prototype: TimeOverrideType;
}
interface SpeedLimitType
{
	values(): SpeedLimitType;
	valueOf(arg0: string): SpeedLimitType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var SpeedLimitType:
{
	new (value?: any): SpeedLimitType;
	(): any;
	(value: any): any;
	prototype: SpeedLimitType;
}
interface RemovePostalAreaUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemovePostalAreaUoW:
{
	new (value?: any): RemovePostalAreaUoW;
	(): any;
	(value: any): any;
	prototype: RemovePostalAreaUoW;
}
interface AdminUnvalidatedChange
{
	isPartial(): boolean;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	unvalidatedMapObjects(): List;
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUser(): string;
	getTimestamp(): string;
	getProjectName(): string;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
}
declare var AdminUnvalidatedChange:
{
	new (value?: any): AdminUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: AdminUnvalidatedChange;
}
interface UpdateNGLinkToCartoAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNGLinkToCartoAssociationUoW:
{
	new (value?: any): UpdateNGLinkToCartoAssociationUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNGLinkToCartoAssociationUoW;
}
interface PoiAssocImpl
{
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: PoiAssocKernel): void;
	getPrimaryPois(): Set;
	getSecondaryPois(): Set;
	getPoiAssocDetails(): Set;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getAssocPvid(): number;
	getAssocType(): number;
	makeFlat(): FlatKernel;
	makeFlat(): FlatPoiAssoc;
	getPois(): Set;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var PoiAssocImpl:
{
	new (value?: any): PoiAssocImpl;
	(): any;
	(value: any): any;
	prototype: PoiAssocImpl;
}
interface OutdoorAttributeUtil
{
	getApplicableOutdoorAttrIds(): Set;
	getOutdoorSuppGeoBitsSumValue(): number;
	populateApplicableOutdoorAttrIds(): void;
	getOutdoorHelper(): FlexibleOutdoorAttributeHelper;
	releaseMetadata(): void;
	getSupGeoToOutdoorAttributesMap(): Map;
	getCommonOutdoorAttributesList(): List;
	getMixedOutdoorAttributeMap(arg0: Set, arg1: Set): Map;
	isOutdoorAttr(arg0: number): boolean;
	checkOnlyOutddorSuppGeoPresent(arg0: number, arg1: number): boolean;
	checkOnlyOutdoorBitsPresent(arg0: number, arg1: number): boolean;
	invert(arg0: Set): boolean;
	getExtendedAttribute(arg0: Set, arg1: number): ExtendedAttribute;
	getExtendedAttribute(arg0: Set, arg1: number, arg2: string): ExtendedAttribute;
	getExtendedAttributeWithDefaultValue(arg0: Set, arg1: number, arg2: string): string;
	getAttributeValue(arg0: Set, arg1: number): string;
	containsAttr(arg0: number, arg1: Set): boolean;
	containsAttr(arg0: number, arg1: string, arg2: Set): boolean;
	removeExtendedAttribute(arg0: Set, arg1: number): void;
	removeExtendedAttribute(arg0: Set, arg1: number, arg2: string): void;
	getExpandedInclusionNewAttribute(): ExtendedAttribute;
	removeExpandedInclusionNewAttribute(arg0: Set): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OutdoorAttributeUtil:
{
	new (value?: any): OutdoorAttributeUtil;
	(): any;
	(value: any): any;
	prototype: OutdoorAttributeUtil;
}
interface FlexibleOutdoorAttributeHelper
{
	getSupGeoBitsFromName(arg0: Set): Set;
	retrieveExtendedAttributeIdsFromSetOfSelector(arg0: List): Set;
	getSupplementalGeoNameVsExtendedAttributeIdsMap(): Map;
	getDomainComboElementsOfIndex(arg0: string, arg1: number): Set;
	getExtendedAttributeInfoOfMapObjectType(arg0: string): Set;
	getNonRequiredExtendedAttributeAssociatedWithSupGeo(arg0: string): Set;
	getNonRequiredExtendedAttributeAssociatedWithSupGeo(arg0: Set): Set;
	getRequiredExtendedAttributeAssociatedWithSupGeo(arg0: Set): Set;
	getAllRequiredExtendedAttributeFromSelector(): Set;
	getApplicableExtendedAttributeOfOutdoor(): Set;
	getSupplementalGeoNameVsExtendedAttributeInfoMap(): Map;
	getSupplier(): FlexibleOutdoorAttributeMetadataSupplier;
	getGenericExtendedAttributeOfOutdoor(): Set;
	getOutdoorSupplementalGeoBits(): Set;
	getSupGeoBitFromName(arg0: Set): number;
	getSupGeoNames(arg0: number): Set;
	getExtendedAttributeFromSupGeo(arg0: string, arg1: boolean): List;
	getExtendedAttributeFromSupGeo(arg0: Set, arg1: boolean): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FlexibleOutdoorAttributeHelper:
{
	new (value?: any): FlexibleOutdoorAttributeHelper;
	(): any;
	(value: any): any;
	prototype: FlexibleOutdoorAttributeHelper;
}
interface AddDistanceMarkerUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddDistanceMarkerUoW:
{
	new (value?: any): AddDistanceMarkerUoW;
	(): any;
	(value: any): any;
	prototype: AddDistanceMarkerUoW;
}
interface FuseLinksCompositeUoW
{
	toString(): string;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var FuseLinksCompositeUoW:
{
	new (value?: any): FuseLinksCompositeUoW;
	(): any;
	(value: any): any;
	prototype: FuseLinksCompositeUoW;
}
interface BasicLaneStrand
{
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: LaneStrandKernel): void;
	condition(): Condition;
	navLanes(): List;
	getConditionId(): number;
	getLaneStrandPvid(): number;
	getLaneStrandElements(): Set;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	navLane(arg0: number): NavLane;
	makeFlat(): FlatLaneStrand;
	makeFlat(): FlatKernel;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicLaneStrand:
{
	new (value?: any): BasicLaneStrand;
	(): any;
	(value: any): any;
	prototype: BasicLaneStrand;
}
interface ViaAreaToMOAssociation
{
	viaArea(): ViaArea;
	associationLinks(): Set;
	getViaAreaId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ViaAreaToMOAssociation:
{
	new (value?: any): ViaAreaToMOAssociation;
	(): any;
	(value: any): any;
	prototype: ViaAreaToMOAssociation;
}
interface MapComponent
{
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var MapComponent:
{
	new (value?: any): MapComponent;
	(): any;
	(value: any): any;
	prototype: MapComponent;
}
interface NaturalGuidanceLinkAssociation
{
	dateTimeMasks(): List;
	getManeuverPoints(): Set;
	link(): Link;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	getManeuverPointAssociations(): Set;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
}
declare var NaturalGuidanceLinkAssociation:
{
	new (value?: any): NaturalGuidanceLinkAssociation;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkAssociation;
}
interface MapContextExtender
{
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	mapContext(): MapContext;
}
declare var MapContextExtender:
{
	new (value?: any): MapContextExtender;
	(): any;
	(value: any): any;
	prototype: MapContextExtender;
}
interface BasicRemover
{
	remove(arg0: number): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BasicRemover:
{
	new (value?: any): BasicRemover;
	(): any;
	(value: any): any;
	prototype: BasicRemover;
}
interface PermittedDrivingManoeuvreImpl
{
	isLegal(): boolean;
	timeOverride(): number;
	getConditionType(): number;
	setState(arg0: ConditionKernel): void;
	getConditionModifiers(): Set;
	pdmType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var PermittedDrivingManoeuvreImpl:
{
	new (value?: any): PermittedDrivingManoeuvreImpl;
	(): any;
	(value: any): any;
	prototype: PermittedDrivingManoeuvreImpl;
}
interface RemovePostalAreaAdminPlaceAssocUoW
{
	toString(): string;
	id(): number;
	setPostalAreaAdminPlace(arg0: PostalAreaAdminPlaceKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemovePostalAreaAdminPlaceAssocUoW:
{
	new (value?: any): RemovePostalAreaAdminPlaceAssocUoW;
	(): any;
	(value: any): any;
	prototype: RemovePostalAreaAdminPlaceAssocUoW;
}
interface MapContextImpl
{
	add(arg0: MapObject): void;
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	equals(arg0: any): boolean;
	update(arg0: Kernel): void;
	update(arg0: MapObject): void;
	extensions(): Set;
	mapContextPartition(): MapContextPartition;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	subsetOf(arg0: MapContext): boolean;
	setAdditionalData(arg0: Properties): void;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	setMetadata(arg0: Metadata): void;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: Node): boolean;
	isIncompleteNode(arg0: NavNode): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	removeAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	indexAdminPlace(arg0: AdminPlace): void;
	unindexAdminPlace(arg0: AdminPlace): void;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: number): RoadPoint;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: RoadLink): Set;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(): Iterator;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointSize(arg0: FeaturePointType): number;
	featurePointSize(): number;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	mapObjectAssociationSize(): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	setRegionInfo(arg0: string, arg1: string): void;
	adder(): Adder;
	remover(): Remover;
	updater(): Updater;
	updateAdminPlaceId(arg0: MapObject, arg1: number): void;
	addRoadName(arg0: RoadNameKernel): void;
	getRegionName(): string;
	setRegionName(arg0: string): void;
	getRegionCode(): string;
	setRegionCode(arg0: string): void;
	getValExceptions(): Set;
	setValExceptions(arg0: Set): void;
	getAdminPlacesById(): Map;
	setAdminPlacesById(arg0: Map): void;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	hasCustomContext(arg0: Class): boolean;
	removeCountry(arg0: Country): void;
	streetTypeFactory(): StreetTypeFactory;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	addCartoLink(arg0: CartoLink): void;
	addCartoFace(arg0: CartoFace): void;
	addPostalAreaZone(arg0: PostalAreaZone): void;
	addPostalAreaAdminPlace(arg0: PostalAreaAdminPlace): void;
	addZoneAdminPlace(arg0: ZoneAdminPlace): void;
	addFeaturePoint(arg0: FeaturePoint): void;
	addMapObjectAssociation(arg0: MapObjectAssociation): void;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: Node): boolean;
	isAligned(arg0: GeoPoint): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
	removeFringe(arg0: MapObject): void;
	updateId(arg0: number, arg1: number): void;
	merger(): Merger;
	addScope(arg0: Scope): void;
	removeScope(): void;
	addFringe(arg0: MapObject): void;
	addIncompleteAdmin(arg0: IncompleteAdminPacket): void;
	removeIncompleteAdmin(arg0: number): void;
	addAdditionalData(arg0: Properties): void;
	setEdgeCandidates(arg0: Set): void;
	addMetricsContext(arg0: MetricContext): void;
	clearMetricsContexts(): void;
	addCustomContext(arg0: Class): void;
	getModifiableDegradationValidationContext(): ModifiableDegradationValidationContext;
	toString(): string;
	getClass(): Class;
}
declare var MapContextImpl:
{
	new (value?: any): MapContextImpl;
	(): any;
	(value: any): any;
	prototype: MapContextImpl;
}
interface BasicTrafficSign
{
	getConditionType(): number;
	getWeatherType(): WeatherType;
	signType(): number;
	preWarning(): Map;
	duration(): Map;
	validityTime(): Map;
	generalWarningSignType(): string;
	signValue(): Map;
	applicableVehiclesMask(): number;
	naturalGuidanceImportance(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicTrafficSign:
{
	new (value?: any): BasicTrafficSign;
	(): any;
	(value: any): any;
	prototype: BasicTrafficSign;
}
interface UpdateAnnotationUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateAnnotationUoW:
{
	new (value?: any): UpdateAnnotationUoW;
	(): any;
	(value: any): any;
	prototype: UpdateAnnotationUoW;
}
interface MapContextTrimmer
{
	trimBarrenNodesAndLinks(): void;
	leaveBarrenNodesAndLinks(): void;
	trimOneLayer(): number;
	isTrimmable(arg0: MapObject): boolean;
	trimAll(): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapContextTrimmer:
{
	new (value?: any): MapContextTrimmer;
	(): any;
	(value: any): any;
	prototype: MapContextTrimmer;
}
interface DistanceGraph
{
	clear(): void;
	isEmpty(): boolean;
	isPartial(): boolean;
	getMapContext(): MapContext;
	createGraphGenerator(): GraphGenerator;
	getOpposingNode(arg0: NavLink, arg1: NavNode): NavNode;
	getConnectingLinks(arg0: NavLink, arg1: NavNode): Collection;
	getGraphGenerator(): GraphGenerator;
	setFilter(arg0: DistanceGraphFilter): void;
	getFilter(): DistanceGraphFilter;
	setMaxTravelDist(arg0: double): void;
	getMaxTravelDist(): double;
	setTerminateOnPartialNode(arg0: boolean): void;
	getTerminateOnPartialNode(): boolean;
	setTerminateOnLinkAdd(arg0: boolean): void;
	getTerminateOnLinkAdd(): boolean;
	setLinkToDistMap(arg0: boolean): void;
	getNavLinks(): Set;
	explore(arg0: NavLink, arg1: boolean): boolean;
	explore(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	getClosestNode(arg0: NavLink): NavNode;
	getDistToNode(arg0: NavNode): Double;
	getDistForLink(arg0: number): Double;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DistanceGraph:
{
	new (value?: any): DistanceGraph;
	(): any;
	(value: any): any;
	prototype: DistanceGraph;
}
interface BuiltUpAreaRoadFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BuiltUpAreaRoadFilter:
{
	new (value?: any): BuiltUpAreaRoadFilter;
	(): any;
	(value: any): any;
	prototype: BuiltUpAreaRoadFilter;
}
interface BasicDistanceMarkerToRoadLinkAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): MapObjectAssociationType;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	roadLink(): RoadLink;
	distanceMarker(): DistanceMarkerFeaturePoint;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	distanceMarkerId(): number;
	makeFlat(): FlatKernel;
	makeFlat(): FlatDistanceMarkerToRoadLinkAssociation;
	roadLinkId(): number;
	accept(arg0: KernelVisitor): void;
	getMissingIds(): Set;
	isPartial(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicDistanceMarkerToRoadLinkAssociation:
{
	new (value?: any): BasicDistanceMarkerToRoadLinkAssociation;
	(): any;
	(value: any): any;
	prototype: BasicDistanceMarkerToRoadLinkAssociation;
}
interface FlatDistanceMarkerToRoadLinkAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: DistanceMarkerToRoadLinkAssociationKernel, arg1: DistanceMarkerToRoadLinkAssociationKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	setRoadLinkId(arg0: number): void;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	setMoaState(arg0: MapObjectAssociationKernel): void;
	kernelType(): Class;
	setDistanceMarkerId(arg0: number): void;
	clearMoa(): void;
	isClearedMoa(): boolean;
	distanceMarkerId(): number;
	makeFlat(): FlatDistanceMarkerToRoadLinkAssociation;
	makeFlat(): FlatKernel;
	roadLinkId(): number;
	getDataPacketType(): DataPacketType;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setSecondMapObjectId(arg0: number): void;
	cleared(): boolean;
	setFirstMapObjectId(arg0: number): void;
	setMapObjectAssociationPvid(arg0: number): void;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatDistanceMarkerToRoadLinkAssociation:
{
	new (value?: any): FlatDistanceMarkerToRoadLinkAssociation;
	(): any;
	(value: any): any;
	prototype: FlatDistanceMarkerToRoadLinkAssociation;
}
interface AddPoiAssociationUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddPoiAssociationUoW:
{
	new (value?: any): AddPoiAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddPoiAssociationUoW;
}
interface BasicNaturalGuidanceLinkToPoiAssociation
{
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): MapObjectAssociationType;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	gpPoiAssocId(): number;
	guidancePointToPoi(): GuidancePointToPoiAssociation;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatNaturalGuidanceLinkToPoiAssociation;
	isValidUnnamed(): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	getFeatureType(): number;
	getNames(): Set;
	getManeuverPoints(): Set;
	link(): Link;
	accept(arg0: KernelVisitor): void;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicNaturalGuidanceLinkToPoiAssociation:
{
	new (value?: any): BasicNaturalGuidanceLinkToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: BasicNaturalGuidanceLinkToPoiAssociation;
}
interface FlatNaturalGuidanceLinkToPoiAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: NaturalGuidanceLinkToPoiAssociationKernel, arg1: NaturalGuidanceLinkToPoiAssociationKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	setMoaState(arg0: MapObjectAssociationKernel): void;
	gpPoiAssocId(): number;
	setGPPoiAssocId(arg0: number): void;
	setManeuverPointsWithEmptySet(): void;
	kernelType(): Class;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	clearMoa(): void;
	isClearedMoa(): boolean;
	setManeuverPointAssociations(arg0: Set): void;
	setValidityPeriods(arg0: Set): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatNaturalGuidanceLinkToPoiAssociation;
	getDataPacketType(): DataPacketType;
	equivalent(arg0: NaturalGuidanceLinkAssociationKernel, arg1: NaturalGuidanceLinkAssociationKernel): boolean;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	setNames(arg0: Set): void;
	linkId(): number;
	setLinkId(arg0: number): void;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	setCalculatedImp(arg0: number): void;
	setDirection(arg0: DirectionOfTravel): void;
	setFeatureExtent(arg0: number): void;
	setGuidanceType(arg0: GuidanceType): void;
	setPermanence(arg0: NaturalGuidancePermanence): void;
	setRelDistance(arg0: NaturalGuidanceRelDistance): void;
	setSeasonality(arg0: NaturalGuidanceSeasonality): void;
	setVisibility(arg0: NaturalGuidanceVisibility): void;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setSecondMapObjectId(arg0: number): void;
	cleared(): boolean;
	setFirstMapObjectId(arg0: number): void;
	setMapObjectAssociationPvid(arg0: number): void;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatNaturalGuidanceLinkToPoiAssociation:
{
	new (value?: any): FlatNaturalGuidanceLinkToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: FlatNaturalGuidanceLinkToPoiAssociation;
}
interface BasicCrfIntersection
{
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	getLandmarkPoint(): GeoPoint;
	setValidUnnamed(arg0: boolean): void;
	isnOrderOrphan(arg0: number): boolean;
	is1stOrderOrphan(): boolean;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	getType(): string;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	navFeatures(): Set;
	getNavNodeIds(): Set;
	setState(arg0: MapContext, arg1: CompositeRoadFeatureKernel): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getAttachedFiles(): Set;
	navLinks(): Set;
	navNodes(): Set;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	getExtendedAttributes(): Set;
	setType(arg0: string): void;
	makeFlat(): FlatCompositeRoadFeature;
	makeFlat(): FlatKernel;
	getFeatureType(): number;
	getNames(arg0: string): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicCrfIntersection:
{
	new (value?: any): BasicCrfIntersection;
	(): any;
	(value: any): any;
	prototype: BasicCrfIntersection;
}
interface BlackspotFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BlackspotFilter:
{
	new (value?: any): BlackspotFilter;
	(): any;
	(value: any): any;
	prototype: BlackspotFilter;
}
interface MoveManyCompoundUoW
{
	toString(): string;
	setGeometrySource(arg0: number): void;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var MoveManyCompoundUoW:
{
	new (value?: any): MoveManyCompoundUoW;
	(): any;
	(value: any): any;
	prototype: MoveManyCompoundUoW;
}
interface MapObjectFilter
{
	update(arg0: number, arg1: MapObject): void;
	accept(arg0: number): boolean;
	accept(arg0: MapObject): boolean;
	reset(): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapObjectFilter:
{
	new (value?: any): MapObjectFilter;
	(): any;
	(value: any): any;
	prototype: MapObjectFilter;
}
interface BasicDayMask
{
	contains(arg0: number): boolean;
	dateValue2(): string;
	isDayMask(): boolean;
	type(): string;
	isDateIntervalMask(): boolean;
	timeInterval(): TimeInterval;
	isExternalDateMask(): boolean;
	indicatesExcludeDate(): boolean;
	indicatesFromEnd(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BasicDayMask:
{
	new (value?: any): BasicDayMask;
	(): any;
	(value: any): any;
	prototype: BasicDayMask;
}
interface CompositeFilter
{
	add(arg0: MapContextFilter): boolean;
	size(): number;
	hasNext(): boolean;
	next(): void;
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	setFreshIterator(): void;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CompositeFilter:
{
	new (value?: any): CompositeFilter;
	(): any;
	(value: any): any;
	prototype: CompositeFilter;
}
interface DiscoverCitiesPedPrefExcludeFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DiscoverCitiesPedPrefExcludeFilter:
{
	new (value?: any): DiscoverCitiesPedPrefExcludeFilter;
	(): any;
	(value: any): any;
	prototype: DiscoverCitiesPedPrefExcludeFilter;
}
interface VariableSpeedSign
{
	getVssId(): string;
	speedSignLocation(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var VariableSpeedSign:
{
	new (value?: any): VariableSpeedSign;
	(): any;
	(value: any): any;
	prototype: VariableSpeedSign;
}
interface TransportPreferredRoute
{
	getWeightDependentValue(): number;
	getDirectionType(): DirectionType;
	getPreferredRouteType(): PreferredRouteType;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var TransportPreferredRoute:
{
	new (value?: any): TransportPreferredRoute;
	(): any;
	(value: any): any;
	prototype: TransportPreferredRoute;
}
interface NavStrandUtil
{
	getMissingIds(arg0: NavStrand, arg1: MapContext): Set;
	isPartial(arg0: NavStrand): boolean;
	getFeatureType(arg0: NavStrand): number;
	navLinks(arg0: NavStrand, arg1: MapContext): List;
	condition(arg0: NavStrand): Condition;
	orientedStrand(arg0: NavStrand): OrientedStrand;
	makeOrientedStrand(arg0: List): OrientedStrand;
	allComponents(arg0: NavStrand): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NavStrandUtil:
{
	new (value?: any): NavStrandUtil;
	(): any;
	(value: any): any;
	prototype: NavStrandUtil;
}
interface LonghaulDowngradeFilter
{
	filter(arg0: MapObject): UnitOfWork;
	findStubLinkFunctionalClassDowngrade(arg0: NavLink): number;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LonghaulDowngradeFilter:
{
	new (value?: any): LonghaulDowngradeFilter;
	(): any;
	(value: any): any;
	prototype: LonghaulDowngradeFilter;
}
interface AddKernelsUoW
{
	toString(): string;
	ids(): List;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddKernelsUoW:
{
	new (value?: any): AddKernelsUoW;
	(): any;
	(value: any): any;
	prototype: AddKernelsUoW;
}
interface DiscoverCitiesExcludedFilter
{
	filter(arg0: MapObject): UnitOfWork;
	discoverCitiesPoiTypes(): Set;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DiscoverCitiesExcludedFilter:
{
	new (value?: any): DiscoverCitiesExcludedFilter;
	(): any;
	(value: any): any;
	prototype: DiscoverCitiesExcludedFilter;
}
interface NavLaneImpl
{
	accept(arg0: KernelVisitor): void;
	getType(): LaneType;
	equivalent(arg0: Kernel): boolean;
	getNavLinkId(): number;
	setState(arg0: MapContext, arg1: NavLaneKernel): void;
	getHeight(): number;
	getNavLanePvid(): number;
	navLink(): NavLink;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getCenterDividerMarker(): DividerMarkerType;
	getLaneDirection(): LaneDirectionType;
	getLaneNumber(): number;
	makeFlat(): FlatNavLane;
	makeFlat(): FlatKernel;
	getAccessBits(): number;
	getDirectionCategoryMarker(): EnumSet;
	getWidth(): number;
	getSpeed(): number;
	getLaneDividerMarker(): DividerMarkerType;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	getLaneFormingEnding(): LaneFormingEnding;
	isAccessMotorcycles(): boolean;
	getLaneCrossingRestrictionType(): LaneCrossingRestrictionType;
	getLaneDirectionOverrideType(): LaneDirectionOverrideType;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var NavLaneImpl:
{
	new (value?: any): NavLaneImpl;
	(): any;
	(value: any): any;
	prototype: NavLaneImpl;
}
interface AddStackedLinksUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddStackedLinksUoW:
{
	new (value?: any): AddStackedLinksUoW;
	(): any;
	(value: any): any;
	prototype: AddStackedLinksUoW;
}
interface ParkingInformation
{
	getParkingType(): ParkingType;
	getParkingApplType(): ParkingRestrictionApply;
	getSideOfStreet(): ParkingSideOfStreet;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var ParkingInformation:
{
	new (value?: any): ParkingInformation;
	(): any;
	(value: any): any;
	prototype: ParkingInformation;
}
interface GoldPlateUpdatePermissionVisitor
{
	isAllowed(): boolean;
	visitConditionKernel(arg0: ConditionKernel): void;
	getReason(): string;
	visitNavLinkKernel(arg0: NavLinkKernel): void;
	visitLinkKernel(arg0: LinkKernel): void;
	visitNodeKernel(arg0: NodeKernel): void;
	visitCartoFeatureKernel(arg0: CartoFeatureKernel): void;
	visitPointOfInterestKernel(arg0: PointOfInterestKernel): void;
	visitCartoLinkKernel(arg0: CartoLinkKernel): void;
	visitCartoFaceKernel(arg0: CartoFaceKernel): void;
	isAccessRestrictionHov(arg0: number, arg1: number): boolean;
	visitMapObjectAssociationKernel(arg0: MapObjectAssociationKernel): void;
	visitNavStrandKernel(arg0: NavStrandKernel): void;
	visitFaceKernel(arg0: FaceKernel): void;
	visitPoiCartoKernel(arg0: PoiCartoKernel): void;
	visitFaceLinkKernel(arg0: FaceLinkKernel): void;
	visitAdminPlaceKernel(arg0: AdminPlaceKernel): void;
	visitCountryKernel(arg0: CountryKernel): void;
	visitSignKernel(arg0: SignKernel): void;
	visitNavNodeKernel(arg0: NavNodeKernel): void;
	visitRoadLinkKernel(arg0: RoadLinkKernel): void;
	visitCompositeRoadFeatureKernel(arg0: CompositeRoadFeatureKernel): void;
	visitStreetTypeKernel(arg0: StreetTypeKernel): void;
	visitRuleInfoKernel(arg0: RuleInfoKernel): void;
	visitPostalAreaKernel(arg0: PostalAreaKernel): void;
	visitZoneKernel(arg0: ZoneKernel): void;
	visitValidationExceptionKernel(arg0: ValidationExceptionKernel): void;
	visitComboKernel(arg0: ComboKernel): void;
	visitDomainKernel(arg0: DomainKernel): void;
	visitDomainComboKernel(arg0: DomainComboKernel): void;
	visitRoadNameKernel(arg0: RoadNameKernel): void;
	visitRoadPointKernel(arg0: RoadPointKernel): void;
	visitPostalAreaAdminPlaceKernel(arg0: PostalAreaAdminPlaceKernel): void;
	visitPostalAreaZoneKernel(arg0: PostalAreaZoneKernel): void;
	visitZoneAdminPlaceKernel(arg0: ZoneAdminPlaceKernel): void;
	visitPoiAssocKernel(arg0: PoiAssocKernel): void;
	visitFeaturePointKernel(arg0: FeaturePointKernel): void;
	visitAnnotationKernel(arg0: AnnotationKernel): void;
	visitNavLaneKernel(arg0: NavLaneKernel): void;
	visitLaneStrandKernel(arg0: LaneStrandKernel): void;
	visitUVCKernel(arg0: UnvalidatedChangeKernel): void;
	visitViaAreaKernel(arg0: ViaAreaKernel): void;
	visitVirtualConnectionKernel(arg0: VirtualConnectionKernel): void;
	visitViaAreaPoiLinkKernel(arg0: ViaAreaPoiLinkKernel): void;
	visitViaAreaRLLinkKernel(arg0: ViaAreaRLLinkKernel): void;
	visitTopologySegmentKernel(arg0: TopologySegmentKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GoldPlateUpdatePermissionVisitor:
{
	new (value?: any): GoldPlateUpdatePermissionVisitor;
	(): any;
	(value: any): any;
	prototype: GoldPlateUpdatePermissionVisitor;
}
interface CopyLinkChainCompositeUoW
{
	toString(): string;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	id(): number;
	setIsSourceRailRoadFeature(arg0: boolean): void;
	setIsSourceWaterFeature(arg0: boolean): void;
	setLinearCartoFeatureKernels(arg0: Map): void;
	setLinearCartoFeatureCIKernels(arg0: Map): void;
	setPolyCartoFeatureExpIncl(arg0: Map): void;
	setLinearCartoFeatureCISrcKernels(arg0: Map): void;
	setPolyCartoFaceCIKernels(arg0: Map): void;
	setPolyCartoFaceCISrcKernels(arg0: Map): void;
	setFaceKernels(arg0: Map): void;
	setFaceIdMap(arg0: Map): void;
	setCartoFeatureIdMap(arg0: Map): void;
	setNavLanes(arg0: List): void;
	setMapEdgeId(arg0: number): void;
	setPolyNameSource(arg0: number): void;
	setDefaults(arg0: LinkKernel): void;
	setUpdateGeoSourceCode(arg0: boolean): void;
	setRoadLinkKernels(arg0: List): void;
	setRoadLinkKernels(arg0: List, arg1: List): void;
	setUpdateDirectionOfTravel(arg0: boolean): void;
	setStartIsReference(arg0: boolean): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyLinkChainCompositeUoW:
{
	new (value?: any): CopyLinkChainCompositeUoW;
	(): any;
	(value: any): any;
	prototype: CopyLinkChainCompositeUoW;
}
interface RailwayCrossing
{
	crossingType(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var RailwayCrossing:
{
	new (value?: any): RailwayCrossing;
	(): any;
	(value: any): any;
	prototype: RailwayCrossing;
}
interface AddRoundaboutUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddRoundaboutUoW:
{
	new (value?: any): AddRoundaboutUoW;
	(): any;
	(value: any): any;
	prototype: AddRoundaboutUoW;
}
interface LaneTypeFilter
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LaneTypeFilter:
{
	new (value?: any): LaneTypeFilter;
	(): any;
	(value: any): any;
	prototype: LaneTypeFilter;
}
interface AddNGLinkToCartoAssociationUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddNGLinkToCartoAssociationUoW:
{
	new (value?: any): AddNGLinkToCartoAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddNGLinkToCartoAssociationUoW;
}
interface BasicRailwayCrossingFeaturePoint
{
	toString(): string;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: FeaturePointTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): FeaturePointType;
	compositeKernelType(): CompositeKernelType;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	setFeaturePointState(arg0: MapContext, arg1: FeaturePointKernel): void;
	makeFlat(): FlatKernel;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	directionOfTravel(): DirectionOfTravel;
	accept(arg0: KernelVisitor): void;
	setState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeatureType(): number;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	calcPercentFromRef(): double;
	allComponents(): Set;
	link(): Link;
	getPoint(): GeoPoint;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicRailwayCrossingFeaturePoint:
{
	new (value?: any): BasicRailwayCrossingFeaturePoint;
	(): any;
	(value: any): any;
	prototype: BasicRailwayCrossingFeaturePoint;
}
interface AddNodeUoW
{
	toString(): string;
	id(): number;
	setNode(arg0: NodeKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddNodeUoW:
{
	new (value?: any): AddNodeUoW;
	(): any;
	(value: any): any;
	prototype: AddNodeUoW;
}
interface BasicCrfJunction
{
	getLandmarkPoint(): GeoPoint;
	setState(arg0: MapContext, arg1: CompositeRoadFeatureKernel): void;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	getType(): string;
	equivalent(arg0: Kernel): boolean;
	isValidUnnamed(): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	navFeatures(): Set;
	getNavNodeIds(): Set;
	setValidUnnamed(arg0: boolean): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getAttachedFiles(): Set;
	navLinks(): Set;
	navNodes(): Set;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	getExtendedAttributes(): Set;
	setType(arg0: string): void;
	makeFlat(): FlatCompositeRoadFeature;
	makeFlat(): FlatKernel;
	names(arg0: string): Set;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicCrfJunction:
{
	new (value?: any): BasicCrfJunction;
	(): any;
	(value: any): any;
	prototype: BasicCrfJunction;
}
interface DayOfMonth
{
	toString(): string;
	day(): number;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	isValidDayOfMonth(arg0: number): boolean;
	isValidDayOfMonth(arg0: number, arg1: number): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DayOfMonth:
{
	new (value?: any): DayOfMonth;
	(): any;
	(value: any): any;
	prototype: DayOfMonth;
}
interface ThreadSafeSpatialIndexExtension
{
	findLinks(arg0: GeoRectangle): Set;
	findFaces(arg0: GeoRectangle): Set;
	findNodes(arg0: GeoRectangle): Set;
	index(arg0: MapObject): void;
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	isEnabled(): boolean;
	setEnabled(arg0: boolean): void;
	extender(): MapContextExtender;
	filterLinks(arg0: GeoRectangle, arg1: Set, arg2: double): Set;
	getIntersectedFaces(arg0: GeoRectangle): Set;
	unindex(arg0: MapObject): void;
	unindexFace(arg0: FaceLink): void;
	mapContext(): MapContext;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ThreadSafeSpatialIndexExtension:
{
	new (value?: any): ThreadSafeSpatialIndexExtension;
	(): any;
	(value: any): any;
	prototype: ThreadSafeSpatialIndexExtension;
}
interface PermittedDrivingManoeuvre
{
	isLegal(): boolean;
	timeOverride(): number;
	pdmType(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var PermittedDrivingManoeuvre:
{
	new (value?: any): PermittedDrivingManoeuvre;
	(): any;
	(value: any): any;
	prototype: PermittedDrivingManoeuvre;
}
interface CityModelFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CityModelFilter:
{
	new (value?: any): CityModelFilter;
	(): any;
	(value: any): any;
	prototype: CityModelFilter;
}
interface UpdatePointAddrsUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdatePointAddrsUoW:
{
	new (value?: any): UpdatePointAddrsUoW;
	(): any;
	(value: any): any;
	prototype: UpdatePointAddrsUoW;
}
interface UsageFeeRequiredUtil
{
	getConditionType(): number;
	getTollSystemType(arg0: ConditionKernel): number;
	getTollFeatureType(arg0: ConditionKernel): TollFeatureType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var UsageFeeRequiredUtil:
{
	new (value?: any): UsageFeeRequiredUtil;
	(): any;
	(value: any): any;
	prototype: UsageFeeRequiredUtil;
}
interface AdjacentFaceUnion
{
	union(): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AdjacentFaceUnion:
{
	new (value?: any): AdjacentFaceUnion;
	(): any;
	(value: any): any;
	prototype: AdjacentFaceUnion;
}
interface CopyNodeUoW
{
	toString(): string;
	id(): number;
	setNode(arg0: NodeKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyNodeUoW:
{
	new (value?: any): CopyNodeUoW;
	(): any;
	(value: any): any;
	prototype: CopyNodeUoW;
}
interface MapFeatureVisitorAdaptor
{
	visit(arg0: NavStrand): void;
	visit(arg0: Condition): void;
	visit(arg0: CompositeRoadFeature): void;
	visit(arg0: PostalArea): void;
	visit(arg0: RoadLink): void;
	visit(arg0: VirtualConnection): void;
	visit(arg0: ViaArea): void;
	visit(arg0: Annotation): void;
	visit(arg0: FeaturePoint): void;
	visit(arg0: PointOfInterest): void;
	visit(arg0: NavLink): void;
	visit(arg0: CartoFeature): void;
	visit(arg0: AdminPlace): void;
	visit(arg0: Sign): void;
	visit(arg0: NavNode): void;
	visit(arg0: Zone): void;
	visit(arg0: RoadPoint): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapFeatureVisitorAdaptor:
{
	new (value?: any): MapFeatureVisitorAdaptor;
	(): any;
	(value: any): any;
	prototype: MapFeatureVisitorAdaptor;
}
interface RemoveCartoFeatureUoW
{
	toString(): string;
	id(): number;
	allowDeleteOfPartial(): void;
	setCartoFeature(arg0: CartoFeatureKernel): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveCartoFeatureUoW:
{
	new (value?: any): RemoveCartoFeatureUoW;
	(): any;
	(value: any): any;
	prototype: RemoveCartoFeatureUoW;
}
interface SpecialExplicationUtil
{
	getConditionType(): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SpecialExplicationUtil:
{
	new (value?: any): SpecialExplicationUtil;
	(): any;
	(value: any): any;
	prototype: SpecialExplicationUtil;
}
interface UpdateCompositeRoadFeatureUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateCompositeRoadFeatureUoW:
{
	new (value?: any): UpdateCompositeRoadFeatureUoW;
	(): any;
	(value: any): any;
	prototype: UpdateCompositeRoadFeatureUoW;
}
interface RemoveRailwayCrossingFPUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveRailwayCrossingFPUoW:
{
	new (value?: any): RemoveRailwayCrossingFPUoW;
	(): any;
	(value: any): any;
	prototype: RemoveRailwayCrossingFPUoW;
}
interface DirectionOfTravelCondition
{
	bearing(): number;
	getDependentAccessType(): DependentAccessType;
	hasDependentAccessType(): boolean;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	appliesToLane(arg0: number, arg1: number): boolean;
	hasLaneInfo(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var DirectionOfTravelCondition:
{
	new (value?: any): DirectionOfTravelCondition;
	(): any;
	(value: any): any;
	prototype: DirectionOfTravelCondition;
}
interface DependentAccessType
{
	values(): DependentAccessType;
	valueOf(arg0: string): DependentAccessType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var DependentAccessType:
{
	new (value?: any): DependentAccessType;
	(): any;
	(value: any): any;
	prototype: DependentAccessType;
}
interface BasicGuidancePointToMOAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	guidancePointId(): number;
	guidancePoint(): GuidancePointFeaturePoint;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): MapObjectAssociationType;
	getMissingIds(): Set;
	isPartial(): boolean;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	moId(): number;
	getMapObjectType(): MapObjectType;
	getMapObjAttrType(): AttributeType;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	mapObject(): MapObject;
	makeFlat(): FlatKernel;
	makeFlat(): FlatGuidancePointToMOAssociation;
	accept(arg0: KernelVisitor): void;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicGuidancePointToMOAssociation:
{
	new (value?: any): BasicGuidancePointToMOAssociation;
	(): any;
	(value: any): any;
	prototype: BasicGuidancePointToMOAssociation;
}
interface FlatGuidancePointToMOAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	setGuidancePointId(arg0: number): void;
	setMapObjectType(arg0: MapObjectType): void;
	setMapObjAttrType(arg0: AttributeType): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: GuidancePointToMOAssociationKernel, arg1: GuidancePointToMOAssociationKernel): boolean;
	guidancePointId(): number;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	setMoaState(arg0: MapObjectAssociationKernel): void;
	moId(): number;
	getMapObjectType(): MapObjectType;
	getMapObjAttrType(): AttributeType;
	setMoId(arg0: number): void;
	kernelType(): Class;
	clearMoa(): void;
	isClearedMoa(): boolean;
	makeFlat(): FlatKernel;
	makeFlat(): FlatGuidancePointToMOAssociation;
	getDataPacketType(): DataPacketType;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setSecondMapObjectId(arg0: number): void;
	cleared(): boolean;
	setFirstMapObjectId(arg0: number): void;
	setMapObjectAssociationPvid(arg0: number): void;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatGuidancePointToMOAssociation:
{
	new (value?: any): FlatGuidancePointToMOAssociation;
	(): any;
	(value: any): any;
	prototype: FlatGuidancePointToMOAssociation;
}
interface EnvironmentalZone
{
	getEnvironmentalZoneId(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var EnvironmentalZone:
{
	new (value?: any): EnvironmentalZone;
	(): any;
	(value: any): any;
	prototype: EnvironmentalZone;
}
interface BasicCrfExtendedLane
{
	isValidUnnamed(): boolean;
	getLandmarkPoint(): GeoPoint;
	setState(arg0: MapContext, arg1: CompositeRoadFeatureKernel): void;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	getType(): string;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	navFeatures(): Set;
	getNavNodeIds(): Set;
	setValidUnnamed(arg0: boolean): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getAttachedFiles(): Set;
	navLinks(): Set;
	navNodes(): Set;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	getExtendedAttributes(): Set;
	setType(arg0: string): void;
	makeFlat(): FlatCompositeRoadFeature;
	makeFlat(): FlatKernel;
	names(arg0: string): Set;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicCrfExtendedLane:
{
	new (value?: any): BasicCrfExtendedLane;
	(): any;
	(value: any): any;
	prototype: BasicCrfExtendedLane;
}
interface FaceStruct
{
	addAllToMapContext(arg0: FaceStruct, arg1: ModifiableMapContext): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FaceStruct:
{
	new (value?: any): FaceStruct;
	(): any;
	(value: any): any;
	prototype: FaceStruct;
}
interface FaceStruct
{
	addAllToMapContext(arg0: FaceStruct, arg1: ModifiableMapContext): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FaceStruct:
{
	new (value?: any): FaceStruct;
	(): any;
	(value: any): any;
	prototype: FaceStruct;
}
interface UpdateValidationExceptionUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateValidationExceptionUoW:
{
	new (value?: any): UpdateValidationExceptionUoW;
	(): any;
	(value: any): any;
	prototype: UpdateValidationExceptionUoW;
}
interface RemovePointOfInterestCompositeUoW
{
	toString(): string;
	id(): number;
	setPointOfInterest(arg0: PointOfInterestKernel): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemovePointOfInterestCompositeUoW:
{
	new (value?: any): RemovePointOfInterestCompositeUoW;
	(): any;
	(value: any): any;
	prototype: RemovePointOfInterestCompositeUoW;
}
interface TrafficSignal
{
	naturalGuidanceImportance(): number;
	signalLocation(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var TrafficSignal:
{
	new (value?: any): TrafficSignal;
	(): any;
	(value: any): any;
	prototype: TrafficSignal;
}
interface BasicSign
{
	toString(): string;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	setOriginatingNavLink(arg0: NavLink): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: SignKernel): void;
	getDataSource(): number;
	getMultiNavPvid(): number;
	getFlatDestinations(): List;
	getOriginatingNavLinkId(): number;
	getFeatureType(): number;
	signParts(): List;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatSign;
	originatingNavLink(): NavLink;
	destinations(): List;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicSign:
{
	new (value?: any): BasicSign;
	(): any;
	(value: any): any;
	prototype: BasicSign;
}
interface ThroughRouteUtil
{
	getConditionType(): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ThroughRouteUtil:
{
	new (value?: any): ThroughRouteUtil;
	(): any;
	(value: any): any;
	prototype: ThroughRouteUtil;
}
interface MapObjectAssociation
{
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var MapObjectAssociation:
{
	new (value?: any): MapObjectAssociation;
	(): any;
	(value: any): any;
	prototype: MapObjectAssociation;
}
interface TimeUnit
{
	equals(arg0: any): boolean;
	min(): number;
	compareTo(arg0: any): number;
	hour(): number;
	isValidHour(arg0: number): boolean;
	isValidMin(arg0: number): boolean;
	isValidTime(arg0: number, arg1: number): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TimeUnit:
{
	new (value?: any): TimeUnit;
	(): any;
	(value: any): any;
	prototype: TimeUnit;
}
interface DistanceMarkerFeaturePointUtil
{
	compositeKernelType(): FeaturePointType;
	mapObjectType(): MapObjectType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DistanceMarkerFeaturePointUtil:
{
	new (value?: any): DistanceMarkerFeaturePointUtil;
	(): any;
	(value: any): any;
	prototype: DistanceMarkerFeaturePointUtil;
}
interface AddCountryUoW
{
	toString(): string;
	id(): number;
	isCountryValid(arg0: CountryKernel): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddCountryUoW:
{
	new (value?: any): AddCountryUoW;
	(): any;
	(value: any): any;
	prototype: AddCountryUoW;
}
interface CountryImpl
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	country(): Country;
	getIsoCode(): string;
	equivalent(arg0: Kernel): boolean;
	adminLevelFeatureType(arg0: number): number;
	getAltSpanningLevel(): number;
	setClipAdminLevel(arg0: number): void;
	getEbuCode(): string;
	getNppoiAtMaxMinus1(): boolean;
	isFullGeometry(): boolean;
	getPhonePrefix(): string;
	getClipAdminLevel(): number;
	description(arg0: number): string;
	getLanguageCode(): string;
	setState(arg0: MapContext, arg1: AdminPlaceKernel): void;
	getDescription(): string;
	getUnitOfMeasure(): string;
	kernelType(): Class;
	getMaxAdminLevel(): number;
	getAdminLevelFeatureType(): number;
	getCurrencyPrecision(): number;
	getCurrencyType(): string;
	getHouseNumberFormat(): string;
	getPhoneCountryCode(): string;
	getSpeedLimitUnit(): string;
	getDrivingSide(): string;
	makeFlat(): FlatKernel;
	makeFlat(): FlatAdminPlace;
	makeFlat(): FlatCountry;
	accept(arg0: MapFeatureVisitor): void;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	adminCode(): string;
	clipLevelAdminPlaces(): Set;
	centerPoint(): PointOfInterest;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	setDummyAdmin(arg0: boolean): void;
	setAdminShort(arg0: number): void;
	toStringWithChildren(): string;
	setNamedPlacePvid(arg0: number): void;
	setDstObserved(arg0: string): void;
	setDstStartDay(arg0: number): void;
	setDstStartWeekday(arg0: number): void;
	setDstStartMonth(arg0: number): void;
	setDstStartTime(arg0: number): void;
	setDstEndDay(arg0: number): void;
	setDstEndWeekday(arg0: number): void;
	setDstEndMonth(arg0: number): void;
	setDstEndTime(arg0: number): void;
	getTimeZone(): string;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	getUserCode(): string;
	getAdminLevel(): number;
	mapObjectType(): MapObjectType;
	hasSameIdentity(arg0: Kernel): boolean;
	parent(): AdminPlace;
	getDisplayName(): string;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getParentId(): number;
	addChild(arg0: AdminPlace): void;
	removeChild(arg0: AdminPlace): void;
	printChildren(): string;
	listChildren(arg0: string): string;
	simpleFormat(): string;
	listParents(): string;
	children(): Set;
	allComponents(): Set;
	names(arg0: string): Set;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var CountryImpl:
{
	new (value?: any): CountryImpl;
	(): any;
	(value: any): any;
	prototype: CountryImpl;
}
interface BasicLaneLevelCondition
{
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: number): boolean;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	hasLaneInfo(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
	getConditionType(): number;
}
declare var BasicLaneLevelCondition:
{
	new (value?: any): BasicLaneLevelCondition;
	(): any;
	(value: any): any;
	prototype: BasicLaneLevelCondition;
}
interface UpdateLinkUoW
{
	toString(): string;
	id(): number;
	setLink(arg0: LinkKernel): void;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	makeNavigable(arg0: Link, arg1: NavLinkKernel, arg2: MapContext, arg3: boolean, arg4: NavLinkKernel): boolean;
	makeNavigable(arg0: Link, arg1: NavLinkKernel, arg2: MapContext): boolean;
	makeNavigable(arg0: Link, arg1: NavLinkKernel, arg2: MapContext, arg3: boolean, arg4: NavLinkKernel, arg5: boolean, arg6: List, arg7: List): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateLinkUoW:
{
	new (value?: any): UpdateLinkUoW;
	(): any;
	(value: any): any;
	prototype: UpdateLinkUoW;
}
interface BasicTransportRDM
{
	getConditionType(): number;
	getRestrictionType(): RestrictionType;
	getWeatherType(): WeatherType;
	getRestrictionValue(): number;
	getHazmatPermitType(): HazmatPermitType;
	getHazardousMaterialType(): HazardousMaterialType;
	getTrailerType(): TrailerType;
	getTimeOverrideType(): TimeOverrideType;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicTransportRDM:
{
	new (value?: any): BasicTransportRDM;
	(): any;
	(value: any): any;
	prototype: BasicTransportRDM;
}
interface RestrictionType
{
	values(): RestrictionType;
	valueOf(arg0: string): RestrictionType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var RestrictionType:
{
	new (value?: any): RestrictionType;
	(): any;
	(value: any): any;
	prototype: RestrictionType;
}
interface HazmatPermitType
{
	values(): HazmatPermitType;
	valueOf(arg0: string): HazmatPermitType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var HazmatPermitType:
{
	new (value?: any): HazmatPermitType;
	(): any;
	(value: any): any;
	prototype: HazmatPermitType;
}
interface AddDistanceMarkerToRoadLinkAssocUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddDistanceMarkerToRoadLinkAssocUoW:
{
	new (value?: any): AddDistanceMarkerToRoadLinkAssocUoW;
	(): any;
	(value: any): any;
	prototype: AddDistanceMarkerToRoadLinkAssocUoW;
}
interface BasicPostalArea
{
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	country(): Country;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: PostalAreaKernel, arg1: PostalAreaKernel): boolean;
	setState(arg0: MapContext, arg1: PostalAreaKernel): void;
	getNamedPlacePvid(): number;
	setNamedPlacePvid(arg0: number): void;
	setPostalCode(arg0: string): void;
	getFeatureType(): number;
	applicableAdmins(): Set;
	getPostalCode(): string;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	getCountryId(): number;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatPostalArea;
	namedPlace(): NamedPlace;
	getNamedPlaceId(): number;
	setNamedPlace(arg0: NamedPlace): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicPostalArea:
{
	new (value?: any): BasicPostalArea;
	(): any;
	(value: any): any;
	prototype: BasicPostalArea;
}
interface CartoFeature
{
	cartoLinks(): Set;
	isLongHaul(): boolean;
	cartoFaces(): Set;
	hasCompletePolygonBoundary(): boolean;
	namedPlace(): NamedPlace;
	hasPartialCartoLinkOrFace(): boolean;
	getCartoFace(arg0: number): CartoFace;
	getCartoLink(arg0: number): CartoLink;
	isGroupedStructure(): boolean;
	poiCartos(): Set;
	getPoiCarto(arg0: number): PoiCarto;
	isWaterFeature(): boolean;
	getAttachedFiles(): Set;
	getRegions(): Set;
	makeFlat(): FlatCartoFeature;
	getNamedPlaceId(): number;
	getDisplayClass(): string;
	getCartoPvid(): number;
	getValidUnnamedSource(): number;
	getNamedPlaceType(): string;
	isSpecialCaseProtected(): boolean;
	getTmcCodes(): Set;
	getEnteredCartoFeatureSubTypes(): Set;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getExtendedAttributes(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var CartoFeature:
{
	new (value?: any): CartoFeature;
	(): any;
	(value: any): any;
	prototype: CartoFeature;
}
interface AddZoneUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddZoneUoW:
{
	new (value?: any): AddZoneUoW;
	(): any;
	(value: any): any;
	prototype: AddZoneUoW;
}
interface AutoTransliterator
{
	main(arg0: Array<string>): void;
	transliteration(arg0: string, arg1: string, arg2: string): string;
	mixedCaseTransliteration(arg0: string, arg1: string, arg2: string): string;
	transliterate(arg0: string, arg1: string, arg2: string, arg3: boolean): string;
	getNormalizedText(arg0: string): string;
	latin1TransType(arg0: string): string;
	reportInvalidCharacters(arg0: string, arg1: string): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AutoTransliterator:
{
	new (value?: any): AutoTransliterator;
	(): any;
	(value: any): any;
	prototype: AutoTransliterator;
}
interface CartoFaceUtil
{
	getMissingIds(arg0: CartoFace, arg1: MapContext): Set;
	isPartial(arg0: CartoFace): boolean;
	hasFeatures(arg0: CartoFace): boolean;
	hasFeature(arg0: CartoFace, arg1: MapFeature): boolean;
	geometry(arg0: CartoFace): GeoShape;
	onAdminPlaceBorder(arg0: CartoFace): boolean;
	checkStructuralIntegrity(arg0: MapContext, arg1: CartoFaceKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoFaceUtil:
{
	new (value?: any): CartoFaceUtil;
	(): any;
	(value: any): any;
	prototype: CartoFaceUtil;
}
interface MultiExentGenerator
{
	expandMultiMbrsForLinks(arg0: Set, arg1: Map): Map;
	expandMbrFromMultiMbrMap(arg0: Map, arg1: GeoRectangle): GeoRectangle;
	expandMultiMbrsForRectangle(arg0: GeoSimpleRectangle, arg1: Map): Map;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MultiExentGenerator:
{
	new (value?: any): MultiExentGenerator;
	(): any;
	(value: any): any;
	prototype: MultiExentGenerator;
}
interface GeoSimpleRectangle
{
	equals(arg0: any): boolean;
	toString(): string;
	contains(arg0: GeoShape): boolean;
	expand(arg0: GeoPoint): void;
	expand(arg0: List): void;
	expand(arg0: GeoRectangle): void;
	left(): number;
	right(): number;
	intersects(arg0: GeoShape): boolean;
	area(): double;
	enclaves(): number;
	exteriorBoundary(): List;
	enclaveBoundary(arg0: number): List;
	lower(): number;
	upper(): number;
	boundaryAsPoints(): List;
	perimeter(): double;
	touches(arg0: GeoShape): boolean;
	sameShape(arg0: GeoShape): boolean;
	geodeticSystem(): string;
	intersection(arg0: GeoShape): Set;
	connected(): boolean;
	lowerLeft(): GeoPoint;
	upperRight(): GeoPoint;
	height(): number;
	mbr(): GeoRectangle;
	boundary(): List;
	containsPoint(arg0: GeoPoint): boolean;
	isDegenerate(): boolean;
	containsRectangle(arg0: GeoRectangle): boolean;
	distance(arg0: GeoShape): double;
	center(): GeoPoint;
	intersectsRectangle(arg0: GeoRectangle): boolean;
	intersectionRectangle(arg0: GeoRectangle): GeoRectangle;
	intersectsPolyline(arg0: GeoPolyline): boolean;
	hadCode(arg0: GeoPoint): boolean;
	width(): number;
	getClass(): Class;
}
declare var GeoSimpleRectangle:
{
	new (value?: any): GeoSimpleRectangle;
	(): any;
	(value: any): any;
	prototype: GeoSimpleRectangle;
}
interface ViaArea
{
	getViaAreaType(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var ViaArea:
{
	new (value?: any): ViaArea;
	(): any;
	(value: any): any;
	prototype: ViaArea;
}
interface UpdateDomainUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateDomainUoW:
{
	new (value?: any): UpdateDomainUoW;
	(): any;
	(value: any): any;
	prototype: UpdateDomainUoW;
}
interface DelNodeCompositeUoW
{
	toString(): string;
	setGeometrySource(arg0: number): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DelNodeCompositeUoW:
{
	new (value?: any): DelNodeCompositeUoW;
	(): any;
	(value: any): any;
	prototype: DelNodeCompositeUoW;
}
interface RemoveCompositeRoadFeatureUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveCompositeRoadFeatureUoW:
{
	new (value?: any): RemoveCompositeRoadFeatureUoW;
	(): any;
	(value: any): any;
	prototype: RemoveCompositeRoadFeatureUoW;
}
interface BasicPostalAreaZone
{
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getPostalAreaId(): number;
	setState(arg0: MapContext, arg1: PostalAreaZoneKernel): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getZoneId(): number;
	getZone(): Zone;
	getPostalArea(): PostalArea;
	makeFlat(): FlatKernel;
	makeFlat(): FlatPostalAreaZone;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicPostalAreaZone:
{
	new (value?: any): BasicPostalAreaZone;
	(): any;
	(value: any): any;
	prototype: BasicPostalAreaZone;
}
interface BasicLinkProductBoundaryOverride
{
	equals(arg0: any): boolean;
	toString(): string;
	getAdminPlace(): AdminPlace;
	isUrban(): boolean;
	setState(arg0: MapContext, arg1: FlatLinkProductBoundaryOverride): void;
	getAdminPlaceId(): number;
	isDetailedCity(): boolean;
	getClass(): Class;
}
declare var BasicLinkProductBoundaryOverride:
{
	new (value?: any): BasicLinkProductBoundaryOverride;
	(): any;
	(value: any): any;
	prototype: BasicLinkProductBoundaryOverride;
}
interface BasicZone
{
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	getType(): string;
	equivalent(arg0: Kernel): boolean;
	isValidUnnamed(): boolean;
	setUserCode(arg0: string): void;
	setGovernmentCode(arg0: number): void;
	setValidUnnamed(arg0: boolean): void;
	setState(arg0: MapContext, arg1: ZoneKernel): void;
	getAdminPlaceId(): number;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	getIncludedRegions(): Set;
	getExcludedRegions(): Set;
	getZoneDetails(): Set;
	setNamedPlacePvid(arg0: number): void;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	getUserCode(): string;
	applicableAdmins(): Set;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	allComponents(): Set;
	adminPlace(): AdminPlace;
	setType(arg0: string): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatZone;
	setAdminPlace(arg0: AdminPlace): void;
	toString(): string;
	names(arg0: string): Set;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicZone:
{
	new (value?: any): BasicZone;
	(): any;
	(value: any): any;
	prototype: BasicZone;
}
interface UpdateComboUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateComboUoW:
{
	new (value?: any): UpdateComboUoW;
	(): any;
	(value: any): any;
	prototype: UpdateComboUoW;
}
interface RemovePoiCartoAssocUoW
{
	toString(): string;
	id(): number;
	setPoiCarto(arg0: PoiCartoKernel): void;
	removePoiCartos(arg0: MapContext, arg1: Set, arg2: boolean): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemovePoiCartoAssocUoW:
{
	new (value?: any): RemovePoiCartoAssocUoW;
	(): any;
	(value: any): any;
	prototype: RemovePoiCartoAssocUoW;
}
interface GoldPlatedChecker
{
	isSpecialCase(arg0: Kernel): boolean;
	hasGoldPlatedDependents(arg0: Kernel): boolean;
	getGoldPlatedDependents(arg0: Kernel): Set;
	isGoldPlated(arg0: Kernel): boolean;
	getGoldPlatedReasons(arg0: Kernel): EnumSet;
	isUndecidable(arg0: Kernel): boolean;
	getUndecidabledReasons(arg0: Kernel): EnumSet;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GoldPlatedChecker:
{
	new (value?: any): GoldPlatedChecker;
	(): any;
	(value: any): any;
	prototype: GoldPlatedChecker;
}
interface LaneWidthFilter
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LaneWidthFilter:
{
	new (value?: any): LaneWidthFilter;
	(): any;
	(value: any): any;
	prototype: LaneWidthFilter;
}
interface ZoneUtil
{
	boundary(arg0: Zone): CartoFeature;
	hasCompletePolygonBoundary(arg0: Zone): boolean;
	getUserCode(arg0: Zone): string;
	applicableAdmins(arg0: Zone): Set;
	allComponents(arg0: Zone): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: ZoneKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ZoneUtil:
{
	new (value?: any): ZoneUtil;
	(): any;
	(value: any): any;
	prototype: ZoneUtil;
}
interface TollBoothUtil
{
	getConditionType(): number;
	getStructureType(arg0: ConditionKernel): TollStructureType;
	getPaymentMethod(arg0: ConditionKernel): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TollBoothUtil:
{
	new (value?: any): TollBoothUtil;
	(): any;
	(value: any): any;
	prototype: TollBoothUtil;
}
interface TollStructureType
{
	toString(): string;
	values(): TollStructureType;
	valueOf(arg0: string): TollStructureType;
	getValue(): number;
	toTollStructureType(arg0: string): TollStructureType;
	toTollStructureType(arg0: number): TollStructureType;
	name(): string;
	equals(arg0: any): boolean;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var TollStructureType:
{
	new (value?: any): TollStructureType;
	(): any;
	(value: any): any;
	prototype: TollStructureType;
}
interface FourWheelDriveNavLinkFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FourWheelDriveNavLinkFilter:
{
	new (value?: any): FourWheelDriveNavLinkFilter;
	(): any;
	(value: any): any;
	prototype: FourWheelDriveNavLinkFilter;
}
interface MixedCaseFilter
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	visitMapObjectAssociationKernel(arg0: MapObjectAssociationKernel): void;
	description(): string;
	visitConditionKernel(arg0: ConditionKernel): void;
	namesOfFilteredDomains(): Set;
	namesOfFilteredDomainCombos(): Set;
	getDomainsToCase(arg0: Metadata): Set;
	getDomainCombosToCase(arg0: Metadata): Set;
	visitNavStrandKernel(arg0: NavStrandKernel): void;
	visitNavLinkKernel(arg0: NavLinkKernel): void;
	visitLinkKernel(arg0: LinkKernel): void;
	visitNodeKernel(arg0: NodeKernel): void;
	visitFaceKernel(arg0: FaceKernel): void;
	visitPoiCartoKernel(arg0: PoiCartoKernel): void;
	visitFaceLinkKernel(arg0: FaceLinkKernel): void;
	visitAdminPlaceKernel(arg0: AdminPlaceKernel): void;
	visitCartoFeatureKernel(arg0: CartoFeatureKernel): void;
	visitCountryKernel(arg0: CountryKernel): void;
	visitSignKernel(arg0: SignKernel): void;
	visitNavNodeKernel(arg0: NavNodeKernel): void;
	visitRoadLinkKernel(arg0: RoadLinkKernel): void;
	visitPointOfInterestKernel(arg0: PointOfInterestKernel): void;
	visitCompositeRoadFeatureKernel(arg0: CompositeRoadFeatureKernel): void;
	visitStreetTypeKernel(arg0: StreetTypeKernel): void;
	visitRuleInfoKernel(arg0: RuleInfoKernel): void;
	visitPostalAreaKernel(arg0: PostalAreaKernel): void;
	visitZoneKernel(arg0: ZoneKernel): void;
	visitValidationExceptionKernel(arg0: ValidationExceptionKernel): void;
	visitComboKernel(arg0: ComboKernel): void;
	visitDomainKernel(arg0: DomainKernel): void;
	visitDomainComboKernel(arg0: DomainComboKernel): void;
	visitRoadNameKernel(arg0: RoadNameKernel): void;
	visitCartoLinkKernel(arg0: CartoLinkKernel): void;
	visitCartoFaceKernel(arg0: CartoFaceKernel): void;
	visitRoadPointKernel(arg0: RoadPointKernel): void;
	visitPostalAreaAdminPlaceKernel(arg0: PostalAreaAdminPlaceKernel): void;
	visitPostalAreaZoneKernel(arg0: PostalAreaZoneKernel): void;
	visitZoneAdminPlaceKernel(arg0: ZoneAdminPlaceKernel): void;
	visitPoiAssocKernel(arg0: PoiAssocKernel): void;
	visitFeaturePointKernel(arg0: FeaturePointKernel): void;
	visitAnnotationKernel(arg0: AnnotationKernel): void;
	visitNavLaneKernel(arg0: NavLaneKernel): void;
	visitLaneStrandKernel(arg0: LaneStrandKernel): void;
	visitUVCKernel(arg0: UnvalidatedChangeKernel): void;
	visitViaAreaKernel(arg0: ViaAreaKernel): void;
	visitVirtualConnectionKernel(arg0: VirtualConnectionKernel): void;
	visitViaAreaPoiLinkKernel(arg0: ViaAreaPoiLinkKernel): void;
	visitViaAreaRLLinkKernel(arg0: ViaAreaRLLinkKernel): void;
	visitTopologySegmentKernel(arg0: TopologySegmentKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MixedCaseFilter:
{
	new (value?: any): MixedCaseFilter;
	(): any;
	(value: any): any;
	prototype: MixedCaseFilter;
}
interface SplitALinkUoW
{
	toString(): string;
	newNode(): Node;
	getDestinationNavLinkForShortestPath(arg0: List): NavLink;
	getShortestRoutingPath(arg0: MapContext, arg1: Set, arg2: Set): NavLinkRoute;
	isLaneTraversalOrientedFromRef(): boolean;
	isLaneTraversalOrientedTowardRef(): boolean;
	setFromNavLinkOrientation(arg0: NavLink, arg1: NavStrand): void;
	setToNavLinkOrientation(arg0: NavLink, arg1: NavStrand): void;
	setCreateNewNode(arg0: boolean): void;
	duplicateUsingLink(arg0: MapContext): SplitALinkUoW;
	getSplitLinkIds(): Map;
	clearSplitLinkIds(): void;
	newLinks(arg0: Array<Link>): boolean;
	newLinks(): List;
	setPoint(arg0: GeoPoint): void;
	setGeometrySource(arg0: number): void;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var SplitALinkUoW:
{
	new (value?: any): SplitALinkUoW;
	(): any;
	(value: any): any;
	prototype: SplitALinkUoW;
}
interface SplitALinkUoW
{
	toString(): string;
	newNode(): Node;
	getDestinationNavLinkForShortestPath(arg0: List): NavLink;
	getShortestRoutingPath(arg0: MapContext, arg1: Set, arg2: Set): NavLinkRoute;
	isLaneTraversalOrientedFromRef(): boolean;
	isLaneTraversalOrientedTowardRef(): boolean;
	setFromNavLinkOrientation(arg0: NavLink, arg1: NavStrand): void;
	setToNavLinkOrientation(arg0: NavLink, arg1: NavStrand): void;
	setCreateNewNode(arg0: boolean): void;
	duplicateUsingLink(arg0: MapContext): SplitALinkUoW;
	getSplitLinkIds(): Map;
	clearSplitLinkIds(): void;
	newLinks(arg0: Array<Link>): boolean;
	newLinks(): List;
	setPoint(arg0: GeoPoint): void;
	setGeometrySource(arg0: number): void;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var SplitALinkUoW:
{
	new (value?: any): SplitALinkUoW;
	(): any;
	(value: any): any;
	prototype: SplitALinkUoW;
}
interface FullGeometryExtension
{
	isFullGeometry(arg0: NavLink): boolean;
	isIpdFiltered(): boolean;
	setIpdFiltered(arg0: boolean): void;
	isExtended(): boolean;
	isLongHaul(): boolean;
	setLongHaul(arg0: boolean): void;
	extender(): MapContextExtender;
	mapContext(): MapContext;
	setCoverageFilter(arg0: NavLink): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FullGeometryExtension:
{
	new (value?: any): FullGeometryExtension;
	(): any;
	(value: any): any;
	prototype: FullGeometryExtension;
}
interface RemoveNavLinkUoW
{
	toString(): string;
	id(): number;
	setLink(arg0: NavLinkKernel): void;
	setLink(arg0: NavLinkKernel, arg1: Map): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveNavLinkUoW:
{
	new (value?: any): RemoveNavLinkUoW;
	(): any;
	(value: any): any;
	prototype: RemoveNavLinkUoW;
}
interface RemoveFaceLinkUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveFaceLinkUoW:
{
	new (value?: any): RemoveFaceLinkUoW;
	(): any;
	(value: any): any;
	prototype: RemoveFaceLinkUoW;
}
interface LinkImpl
{
	length(): double;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapComponentVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isBridge(): boolean;
	cartoFeatures(): Set;
	setLinkPvid(arg0: number): void;
	assignLeftPostalArea(arg0: PostalArea): void;
	assignRightPostalArea(arg0: PostalArea): void;
	assignLeftNamedPlaces(arg0: Set): void;
	assignRightNamedPlaces(arg0: Set): void;
	equivalent(arg0: Kernel): boolean;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	angle(arg0: Link, arg1: Node): double;
	leftPostalArea(): PostalArea;
	rightPostalArea(): PostalArea;
	isUrban(): boolean;
	getLinkProductBoundaryOverrides(): Set;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	viaAreas(): Set;
	setDetailedCity(arg0: boolean): void;
	getGeometrySource(): number;
	setUrban(arg0: boolean): void;
	setState(arg0: MapContext, arg1: LinkKernel): void;
	setGeometrySource(arg0: number): void;
	checkStructuralIntegrityEquals(arg0: string, arg1: any, arg2: any): void;
	edge(): GeoEdge;
	features(): Set;
	bearing(arg0: Node): double;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	rightAdminPlace(): AdminPlace;
	isDetailedCity(): boolean;
	refNode(): Node;
	nrefNode(): Node;
	getShape(): List;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	isMapEdge(): boolean;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	setLinkProductBoundaryOverrides(arg0: MapContext, arg1: Set): void;
	rightAlternateNamedPlaces(): Set;
	leftAlternateNamedPlaces(): Set;
	getRightAlternateNamedPlaceIds(): Set;
	getLeftAlternateNamedPlaceIds(): Set;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	checkStructuralIntegrity(arg0: string, arg1: boolean): void;
	checkStructuralIntegrity(arg0: string, arg1: number, arg2: MapObject, arg3: boolean): void;
	getLinkPvid(): number;
	getExtendedAttributes(): Set;
	leftAdminPlace(): AdminPlace;
	makeFlat(): FlatKernel;
	makeFlat(): FlatLink;
	isAligned(): boolean;
	getMapEdgeId(): number;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	assignEdge(arg0: GeoEdge): void;
	setAdminPlace(arg0: AdminPlace, arg1: number): void;
	isBoundary(): boolean;
	nextShape(arg0: Node): GeoPoint;
	hasAdasHeight(): boolean;
	getLinkStats(): LinkStats;
	toString(): string;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var LinkImpl:
{
	new (value?: any): LinkImpl;
	(): any;
	(value: any): any;
	prototype: LinkImpl;
}
interface CalendarUnit
{
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
}
declare var CalendarUnit:
{
	new (value?: any): CalendarUnit;
	(): any;
	(value: any): any;
	prototype: CalendarUnit;
}
interface CartoFactory
{
	createFlatCartoLink(arg0: number, arg1: number, arg2: number): FlatCartoLink;
	createFlatCartoLinks(arg0: number, arg1: Set): Set;
	createFlatCartoFace(arg0: number, arg1: number, arg2: number): FlatCartoFace;
	createFlatCartoFaces(arg0: number, arg1: Set): Set;
	addCartoLinks(arg0: number, arg1: Set, arg2: ModifiableMapContext): void;
	findCartoFaces(arg0: Set, arg1: Set): Set;
	findCartoLinks(arg0: Set, arg1: Set): Set;
	computeCartoChanges(arg0: CartoStruct, arg1: CartoStruct, arg2: Set, arg3: Set, arg4: Set): void;
	getLinkIds(arg0: CartoFeature): Set;
	getLinkIds(arg0: Set): Set;
	findCartoLink(arg0: Set, arg1: number): CartoLinkKernel;
	findCartoFace(arg0: Set, arg1: number): CartoFaceKernel;
	getFaceIds(arg0: CartoFeature): Set;
	getFaceIds(arg0: Set): Set;
	getFlatCartoFaces(arg0: Set): Set;
	getFlatCartoLinks(arg0: Set): Set;
	addCartoFaces(arg0: number, arg1: Set, arg2: ModifiableMapContext): void;
	removeCartoFaces(arg0: number, arg1: Set, arg2: ModifiableMapContext): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoFactory:
{
	new (value?: any): CartoFactory;
	(): any;
	(value: any): any;
	prototype: CartoFactory;
}
interface RuleSignatureUnvalidatedChange
{
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	getRuleCode(): string;
	unvalidatedMapObjects(): List;
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUser(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var RuleSignatureUnvalidatedChange:
{
	new (value?: any): RuleSignatureUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: RuleSignatureUnvalidatedChange;
}
interface BicycleFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BicycleFilter:
{
	new (value?: any): BicycleFilter;
	(): any;
	(value: any): any;
	prototype: BicycleFilter;
}
interface RemoveGuidancePointToMOAssociationUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveGuidancePointToMOAssociationUoW:
{
	new (value?: any): RemoveGuidancePointToMOAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveGuidancePointToMOAssociationUoW;
}
interface TruckAttributesFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TruckAttributesFilter:
{
	new (value?: any): TruckAttributesFilter;
	(): any;
	(value: any): any;
	prototype: TruckAttributesFilter;
}
interface MapContext
{
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	update(arg0: Kernel): void;
	extensions(): Set;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number): FeaturePoint;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: NavNode): boolean;
	isIncompleteNode(arg0: Node): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavNode): Set;
	findCrfs(arg0: NavLink): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(): Iterator;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointSize(): number;
	featurePointSize(arg0: FeaturePointType): number;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationSize(): number;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	hasCustomContext(arg0: Class): boolean;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
}
declare var MapContext:
{
	new (value?: any): MapContext;
	(): any;
	(value: any): any;
	prototype: MapContext;
}
interface RouteEntry
{
	toString(): string;
	directionCode(): number;
	type(): string;
	text(): string;
	languageCode(): string;
	isBranch(): boolean;
	isToward(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RouteEntry:
{
	new (value?: any): RouteEntry;
	(): any;
	(value: any): any;
	prototype: RouteEntry;
}
interface DelegatingMapContext
{
	add(arg0: MapObject): void;
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	update(arg0: MapObject): void;
	update(arg0: Kernel): void;
	extensions(): Set;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: number): PointOfInterest;
	findPoi(arg0: RoadLink): Set;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: Node): boolean;
	isIncompleteNode(arg0: NavNode): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointIterator(): Iterator;
	featurePointSize(arg0: FeaturePointType): number;
	featurePointSize(): number;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	mapObjectAssociationSize(): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	hasCustomContext(arg0: Class): boolean;
}
declare var DelegatingMapContext:
{
	new (value?: any): DelegatingMapContext;
	(): any;
	(value: any): any;
	prototype: DelegatingMapContext;
}
interface ExpressLaneFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ExpressLaneFilter:
{
	new (value?: any): ExpressLaneFilter;
	(): any;
	(value: any): any;
	prototype: ExpressLaneFilter;
}
interface CopyNavLinkUoW
{
	toString(): string;
	id(): number;
	setLink(arg0: NavLinkKernel): void;
	setNavLink(arg0: NavLinkKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyNavLinkUoW:
{
	new (value?: any): CopyNavLinkUoW;
	(): any;
	(value: any): any;
	prototype: CopyNavLinkUoW;
}
interface SpeedLimitUtil
{
	isKph(arg0: NavLink): boolean;
	isKph(arg0: Link): boolean;
	isKph(arg0: AdminPlace): boolean;
	isSpecialSpeed(arg0: number): boolean;
	isSpeedMissing(arg0: number): boolean;
	isRampSpeed(arg0: number): boolean;
	isResearchedSpeed(arg0: number): boolean;
	localToRefSpeedLimit(arg0: NavLink): number;
	localToRefSpeedLimit(arg0: NavLink, arg1: boolean): number;
	localFromRefSpeedLimit(arg0: NavLink): number;
	localFromRefSpeedLimit(arg0: NavLink, arg1: boolean): number;
	toKph(arg0: number): number;
	toMph(arg0: number): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SpeedLimitUtil:
{
	new (value?: any): SpeedLimitUtil;
	(): any;
	(value: any): any;
	prototype: SpeedLimitUtil;
}
interface DateTimeMaskImpl
{
	type(): string;
	isDateIntervalMask(): boolean;
	isDayMask(): boolean;
	timeInterval(): TimeInterval;
	isExternalDateMask(): boolean;
	indicatesExcludeDate(): boolean;
	indicatesFromEnd(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DateTimeMaskImpl:
{
	new (value?: any): DateTimeMaskImpl;
	(): any;
	(value: any): any;
	prototype: DateTimeMaskImpl;
}
interface EvacuationRouteUtil
{
	evacType(arg0: ConditionKernel): string;
	travelFlow(arg0: ConditionKernel): string;
	evacCode(arg0: ConditionKernel): string;
	getConditionType(): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var EvacuationRouteUtil:
{
	new (value?: any): EvacuationRouteUtil;
	(): any;
	(value: any): any;
	prototype: EvacuationRouteUtil;
}
interface ViaAreaPoiLink
{
	association(): ViaAreaToPoiAssociation;
	link(): Link;
	getLinkId(): number;
	getAssociationId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ViaAreaPoiLink:
{
	new (value?: any): ViaAreaPoiLink;
	(): any;
	(value: any): any;
	prototype: ViaAreaPoiLink;
}
interface OrientedTopologySegNavLink
{
	equals(arg0: any): boolean;
	toString(): string;
	navLink(): NavLink;
	setNavLink(arg0: NavLink): void;
	seqNumber(): number;
	setSeqNumber(arg0: number): void;
	setOrientation(arg0: string): void;
	orientation(): string;
	getClass(): Class;
}
declare var OrientedTopologySegNavLink:
{
	new (value?: any): OrientedTopologySegNavLink;
	(): any;
	(value: any): any;
	prototype: OrientedTopologySegNavLink;
}
interface RemoveZoneAssociationUoW
{
	toString(): string;
	setZone(arg0: Zone): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveZoneAssociationUoW:
{
	new (value?: any): RemoveZoneAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveZoneAssociationUoW;
}
interface FilterUtilities
{
	containsPremiumSupplementalGeometryBit(arg0: number, arg1: Collection): boolean;
	removeNavLinkAndDependentsOrEntireLink(arg0: NavLink): UnitOfWork;
	isSupplementalGeometryOnly(arg0: NavLink): boolean;
	getMaskedOutdoorSuppGeoBitValue(arg0: number, arg1: number): number;
	containsIgnoreCase(arg0: Set, arg1: string): boolean;
	removeIgnoreCase(arg0: Set, arg1: string): boolean;
	trimName(arg0: string): string;
	unitsOfWorkGenerated(arg0: MapContextFilter, arg1: ModifiableMapContext): Set;
	executeUnitsOfWork(arg0: Collection, arg1: MapContext): boolean;
	poiAttributesPresent(arg0: MapContext): Collection;
	poiAttributesOfType(arg0: MapContext, arg1: number): ArrayList;
	addPoiAttribute(arg0: MapContext, arg1: PointOfInterest, arg2: number, arg3: number, arg4: number): boolean;
	poiAttributeTypesPresent(arg0: Collection): Set;
	filterAMapContext(arg0: MapContextFilter, arg1: ModifiableMapContext): void;
	createBaseNameStreetTypeString(arg0: string, arg1: string, arg2: boolean, arg3: boolean): string;
	translateUnicodePrefixSuffix(arg0: string, arg1: string, arg2: Metadata): string;
	translatePrefixSuffix(arg0: string, arg1: string, arg2: Metadata): string;
	getExonymDesc(arg0: Value, arg1: string): string;
	langCodeForASpecificDomain(arg0: string, arg1: Metadata, arg2: string): boolean;
	clearVirtualConnectionIds(): void;
	isLanguageCodeMatch(arg0: FeatureName, arg1: Set): boolean;
	removeTrailNames(arg0: NavLink, arg1: UnitOfWork, arg2: number): UnitOfWork;
	filterBicycleAndOutdoorAttributes(arg0: UnitOfWork, arg1: FlatNavLink, arg2: Set, arg3: Set): UnitOfWork;
	translateLanguageCode(arg0: string, arg1: Metadata): string;
	languageCodeForUnicode(arg0: string, arg1: Metadata): boolean;
	getFullName(arg0: RoadName, arg1: Metadata): string;
	getTransFullName(arg0: RoadNameTransliteration, arg1: RoadName): string;
	maskSupplementalGeometryValue(arg0: NavLink, arg1: number, arg2: boolean): UnitOfWork;
	findFeatureFiles(arg0: MapObject): Set;
	getDomainCombo(arg0: string, arg1: Metadata): DomainCombo;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FilterUtilities:
{
	new (value?: any): FilterUtilities;
	(): any;
	(value: any): any;
	prototype: FilterUtilities;
}
interface Value
{
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	id(): number;
	shortName(): string;
	setPublishedValue(arg0: any): void;
	setPublished(arg0: boolean): void;
	setDbValue(arg0: any): void;
	setShortName(arg0: string): void;
	longName(): string;
	exonyms(): Set;
	published(): boolean;
	setLongName(arg0: string): void;
	setExonyms(arg0: Set): void;
	setId(arg0: number): void;
	getDbValue(): any;
	getPublishedValue(arg0: string): any;
	getPublishedValue(): any;
	getClass(): Class;
}
declare var Value:
{
	new (value?: any): Value;
	(): any;
	(value: any): any;
	prototype: Value;
}
interface RoadNameTransliteration
{
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	isAttached(): boolean;
	setPrecedes(arg0: boolean): void;
	setAttached(arg0: boolean): void;
	getStreetType(): string;
	isPrecedes(): boolean;
	setStreetType(arg0: string): void;
	getBasename(): string;
	setBasename(arg0: string): void;
	getShortName(): string;
	setShortName(arg0: string): void;
	getTypeCode(): string;
	setTypeCode(arg0: string): void;
	getClass(): Class;
}
declare var RoadNameTransliteration:
{
	new (value?: any): RoadNameTransliteration;
	(): any;
	(value: any): any;
	prototype: RoadNameTransliteration;
}
interface CompositeRoadFeature
{
	navFeatures(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CompositeRoadFeature:
{
	new (value?: any): CompositeRoadFeature;
	(): any;
	(value: any): any;
	prototype: CompositeRoadFeature;
}
interface AddFaceLinkUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddFaceLinkUoW:
{
	new (value?: any): AddFaceLinkUoW;
	(): any;
	(value: any): any;
	prototype: AddFaceLinkUoW;
}
interface LaneFormingEndingFilter
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LaneFormingEndingFilter:
{
	new (value?: any): LaneFormingEndingFilter;
	(): any;
	(value: any): any;
	prototype: LaneFormingEndingFilter;
}
interface BasicRuleDeltaUnvalidatedChange
{
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	setState(arg0: MapContext, arg1: UnvalidatedChangeKernel): void;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getUser(): string;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	unvalidatedMapObjects(): List;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicRuleDeltaUnvalidatedChange:
{
	new (value?: any): BasicRuleDeltaUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: BasicRuleDeltaUnvalidatedChange;
}
interface UpdateNavLinkUoW
{
	toString(): string;
	id(): number;
	setLink(arg0: NavLinkKernel): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNavLinkUoW:
{
	new (value?: any): UpdateNavLinkUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNavLinkUoW;
}
interface UncycledDistanceGraphFilter
{
	reset(): void;
	shouldAddLink(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	shouldExploreLink(arg0: NavLink, arg1: NavNode, arg2: double): ExploreResult;
	shouldAddLength(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	getDefaultFilter(): DistanceGraphFilter;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var UncycledDistanceGraphFilter:
{
	new (value?: any): UncycledDistanceGraphFilter;
	(): any;
	(value: any): any;
	prototype: UncycledDistanceGraphFilter;
}
interface Zone
{
	applicableAdmins(): Set;
	adminPlace(): AdminPlace;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	getUserCode(): string;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getAdminPlaceId(): number;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	getIncludedRegions(): Set;
	getExcludedRegions(): Set;
	getZoneDetails(): Set;
	getUserCode(): string;
	kernelType(): Class;
	makeFlat(): FlatZone;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
}
declare var Zone:
{
	new (value?: any): Zone;
	(): any;
	(value: any): any;
	prototype: Zone;
}
interface UpdateFaceUoW
{
	toString(): string;
	getLinksFromIds(arg0: Set, arg1: MapContext): Set;
	setFace(arg0: FaceKernel, arg1: Set): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateFaceUoW:
{
	new (value?: any): UpdateFaceUoW;
	(): any;
	(value: any): any;
	prototype: UpdateFaceUoW;
}
interface BasicCompositeRoadFeature
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	getType(): string;
	equivalent(arg0: Kernel): boolean;
	isValidUnnamed(): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	navFeatures(): Set;
	getNavNodeIds(): Set;
	setValidUnnamed(arg0: boolean): void;
	setState(arg0: MapContext, arg1: CompositeRoadFeatureKernel): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getAttachedFiles(): Set;
	navLinks(): Set;
	navNodes(): Set;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	getExtendedAttributes(): Set;
	setType(arg0: string): void;
	makeFlat(): FlatCompositeRoadFeature;
	makeFlat(): FlatKernel;
	names(arg0: string): Set;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
	getLandmarkPoint(): GeoPoint;
}
declare var BasicCompositeRoadFeature:
{
	new (value?: any): BasicCompositeRoadFeature;
	(): any;
	(value: any): any;
	prototype: BasicCompositeRoadFeature;
}
interface ValidationException
{
	rule(): Rule;
	setKernels(arg0: Array<Kernel>): void;
	setMessage(arg0: string): void;
	kernels(): Kernel;
	setRuleResult(arg0: RuleResult): void;
	getRuleResult(): RuleResult;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getMessage(): string;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	getTimestamp(): Calendar;
	getKernelIds(): number;
	getRuleId(): number;
	getStatus(): string;
	getUserId(): string;
	getLeStatus(): string;
	getLeReason(): string;
	getRemark(): string;
	getWavStatus(): string;
	getProjectName(): string;
	getExtractionFailure(): string;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ValidationException:
{
	new (value?: any): ValidationException;
	(): any;
	(value: any): any;
	prototype: ValidationException;
}
interface RdstmcRange
{
	toString(): string;
	compareTo(arg0: any): number;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RdstmcRange:
{
	new (value?: any): RdstmcRange;
	(): any;
	(value: any): any;
	prototype: RdstmcRange;
}
interface AddPointOfInterestUoW
{
	toString(): string;
	id(): number;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddPointOfInterestUoW:
{
	new (value?: any): AddPointOfInterestUoW;
	(): any;
	(value: any): any;
	prototype: AddPointOfInterestUoW;
}
interface BasicEvacuationRoute
{
	evacType(): string;
	travelFlow(): string;
	evacCode(): string;
	getConditionType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicEvacuationRoute:
{
	new (value?: any): BasicEvacuationRoute;
	(): any;
	(value: any): any;
	prototype: BasicEvacuationRoute;
}
interface SpecialExplication
{
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var SpecialExplication:
{
	new (value?: any): SpecialExplication;
	(): any;
	(value: any): any;
	prototype: SpecialExplication;
}
interface MapContextExtension
{
	extender(): MapContextExtender;
	mapContext(): MapContext;
}
declare var MapContextExtension:
{
	new (value?: any): MapContextExtension;
	(): any;
	(value: any): any;
	prototype: MapContextExtension;
}
interface BasicCartoFace
{
	accept(arg0: MapComponentVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: CartoFaceKernel): void;
	face(): Face;
	cartoFeature(): CartoFeature;
	isLongHaul(): boolean;
	getHeight(): number;
	getGroundClearance(): number;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	getFaceId(): number;
	setLongHaul(arg0: boolean): void;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	getCartoId(): number;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCartoFace;
	getBuildingPatternCode(): string;
	toString(): string;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicCartoFace:
{
	new (value?: any): BasicCartoFace;
	(): any;
	(value: any): any;
	prototype: BasicCartoFace;
}
interface BasicUpdater
{
	update(arg0: Kernel): void;
	versionableCollection(): MapContext;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BasicUpdater:
{
	new (value?: any): BasicUpdater;
	(): any;
	(value: any): any;
	prototype: BasicUpdater;
}
interface BasicVirtualConnection
{
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getDataSource(): number;
	getAdminPlaceId(): number;
	getFeatureType(): number;
	refNode(): Node;
	nrefNode(): Node;
	getRefNodeId(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	allComponents(): Set;
	adminPlace(): AdminPlace;
	makeFlat(): FlatKernel;
	getNRefNodeId(): number;
	getTimeOverride(): number;
	getConnectionType(): number;
	getStairsTraversal(): number;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicVirtualConnection:
{
	new (value?: any): BasicVirtualConnection;
	(): any;
	(value: any): any;
	prototype: BasicVirtualConnection;
}
interface ViaAreaRLLink
{
	association(): ViaAreaToRoadLinkAssociation;
	link(): Link;
	getLinkId(): number;
	getAssociationId(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ViaAreaRLLink:
{
	new (value?: any): ViaAreaRLLink;
	(): any;
	(value: any): any;
	prototype: ViaAreaRLLink;
}
interface Blackspot
{
	getDirectionType(): DirectionType;
	getSourceType(): SourceType;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var Blackspot:
{
	new (value?: any): Blackspot;
	(): any;
	(value: any): any;
	prototype: Blackspot;
}
interface RoadPoint
{
	parent(): RoadPoint;
	addressedRoadLink(): RoadLink;
	children(): Set;
	hasChildren(): boolean;
	routingNavLink(): NavLink;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getLanguage(): string;
	getRoutingSide(): string;
	getRoutingPoint(): GeoPoint;
	getAddressFormat(): string;
	getRoadPointPvid(): number;
	getAddressedRoadLinkId(): number;
	getAddressedSide(): string;
	getAddressType(): number;
	getDataSource(): string;
	getHouseNumber(): string;
	getBuildingUnitName(): string;
	getUnitName(): string;
	getLevelName(): string;
	getParentRoadPointId(): number;
	getTransliterations(): Set;
	getRoutingNavLinkId(): number;
	getDisplayPoint(): GeoPoint;
	getSourceType(): number;
	makeFlat(): FlatRoadPoint;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var RoadPoint:
{
	new (value?: any): RoadPoint;
	(): any;
	(value: any): any;
	prototype: RoadPoint;
}
interface UpdateFaceLinkUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateFaceLinkUoW:
{
	new (value?: any): UpdateFaceLinkUoW;
	(): any;
	(value: any): any;
	prototype: UpdateFaceLinkUoW;
}
interface UnvalidatedMapObject
{
	getMapObject(): MapObject;
	getMapObjectId(): number;
	getMapObjectType(): MapObjectType;
	getDeltaOperation(): DeltaOperation;
	getDeletedNeighborId(): number;
	getDeletedNeighborType(): MapObjectType;
}
declare var UnvalidatedMapObject:
{
	new (value?: any): UnvalidatedMapObject;
	(): any;
	(value: any): any;
	prototype: UnvalidatedMapObject;
}
interface DeltaOperation
{
	values(): DeltaOperation;
	valueOf(arg0: string): DeltaOperation;
	getKey(): string;
	getKey(): any;
	getTypeFromDelta(arg0: Delta): DeltaOperation;
	getTypeFromValue(arg0: string): DeltaOperation;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var DeltaOperation:
{
	new (value?: any): DeltaOperation;
	(): any;
	(value: any): any;
	prototype: DeltaOperation;
}
interface UnnameableMapFeatureAbstr
{
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	getFeatureType(): number;
	allComponents(): Set;
}
declare var UnnameableMapFeatureAbstr:
{
	new (value?: any): UnnameableMapFeatureAbstr;
	(): any;
	(value: any): any;
	prototype: UnnameableMapFeatureAbstr;
}
interface CartoLockFilter
{
	accept(arg0: MapObject): boolean;
	visit(arg0: Node): boolean;
	visit(arg0: Link): boolean;
	accept(arg0: number): boolean;
	visit(arg0: LinkPoints): boolean;
	visit(arg0: NavStrand): boolean;
	visit(arg0: RoadLink): boolean;
	visit(arg0: NavLink): boolean;
	visit(arg0: Condition): boolean;
	visit(arg0: PointOfInterest): boolean;
	update(arg0: number, arg1: MapObject): void;
	reset(): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoLockFilter:
{
	new (value?: any): CartoLockFilter;
	(): any;
	(value: any): any;
	prototype: CartoLockFilter;
}
interface MapContextUtil
{
	find(arg0: NodeKernel, arg1: MapContext): Node;
	find(arg0: Collection, arg1: MapContext): Set;
	find(arg0: LinkKernel, arg1: MapContext): Link;
	mapObjects(arg0: MapContext, arg1: Collection, arg2: Collection): Set;
	mapObjects(arg0: MapContext, arg1: Collection): List;
	getPoiAdmin(arg0: PointOfInterest): AdminPlace;
	stackedCompMap(arg0: MapContext): Map;
	collectionContainsEquivalent(arg0: Collection, arg1: Kernel): boolean;
	linkClusterInFace(arg0: Link, arg1: Set, arg2: Set): Set;
	linkClusterInFace(arg0: Link, arg1: Face, arg2: List): Set;
	linkClusterInOutFace(arg0: Link, arg1: Set, arg2: Set, arg3: Set): Set;
	linkClusterInFaceRecurse(arg0: Link, arg1: Face, arg2: List): Set;
	depthSearch(arg0: Node, arg1: Set, arg2: Set): void;
	hasCasingEngine(arg0: MapContext): boolean;
	casingEngine(arg0: MapContext): CasingEngineExtension;
	boundaryOrientation(arg0: Face, arg1: Link): number;
	findNavLinkByLinkId(arg0: MapContext, arg1: number): NavLink;
	findFaceLinkByLinkId(arg0: MapContext, arg1: number): Set;
	findRoadLinkByNavLinkId(arg0: MapContext, arg1: number): Set;
	findConditionByNavLinkId(arg0: MapContext, arg1: number): Set;
	findConditionsByNavLink(arg0: NavLink): Set;
	findPoisByRoadLinkId(arg0: MapContext, arg1: number): Set;
	findAllLinksInFace(arg0: Set, arg1: Face, arg2: Map, arg3: boolean): Set;
	findAllLinksInFace(arg0: Set, arg1: Face, arg2: MapContext, arg3: boolean): Set;
	findChainIdCountryIso(arg0: MapContext): Map;
	retrievePartialFaceAndCartoIds(arg0: MapContext): Set;
	retrieveAllCartoIds(arg0: MapContext): Set;
	retrieveAllRoadNameIds(arg0: MapContext): Set;
	findFaceAndInteriorLinks(arg0: CartoFeature, arg1: MapContext, arg2: boolean): Set;
	findAllDependents(arg0: MapObject): Set;
	getUniqueMetricContextIfExists(arg0: MapContext, arg1: Class): MetricContext;
	findNavLanesByNavLinkId(arg0: MapContext, arg1: number): Set;
	verifyChildNodeLinkAlignment(arg0: DeltaMapContext, arg1: List): void;
	verifyParentNodeLinkAlignment(arg0: DeltaMapContext, arg1: List): void;
	verifyAppliedNodeLinkAlignment(arg0: DeltaMapContext, arg1: DeltaCollection): void;
	verifyEffectiveNodeLinkAlignment(arg0: DeltaMapContext, arg1: DeltaCollection): void;
	ids(arg0: Collection): Set;
	ids(arg0: Iterator): Set;
	mapFeatures(arg0: MapContext, arg1: Collection): List;
	mapObjectsAndMissingIds(arg0: MapContext, arg1: List): List;
	hasSpatialIndex(arg0: MapContext): boolean;
	spatialIndex(arg0: MapContext): SpatialIndexExtension;
	removeFromMapContext(arg0: Set, arg1: ModifiableMapContext): void;
	transliterationMetadataSupplierExtension(arg0: MapContext): TransliterationMetadataSupplierExtension;
	findLinkByPvid(arg0: MapContext, arg1: number): Link;
	findNodeByPvid(arg0: MapContext, arg1: number): Node;
	mapComponents(arg0: MapContext, arg1: Collection): List;
	addToMapContext(arg0: Set, arg1: ModifiableMapContext): void;
	updateInMapContext(arg0: Set, arg1: ModifiableMapContext): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapContextUtil:
{
	new (value?: any): MapContextUtil;
	(): any;
	(value: any): any;
	prototype: MapContextUtil;
}
interface CasingEngineExtension
{
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	extender(): MapContextExtender;
	getCasingEngine(): CasingEngine;
	mapContext(): MapContext;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CasingEngineExtension:
{
	new (value?: any): CasingEngineExtension;
	(): any;
	(value: any): any;
	prototype: CasingEngineExtension;
}
interface DeltaMapContext
{
	add(arg0: MapObject): void;
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	remove(arg0: number, arg1: Set): void;
	update(arg0: Kernel, arg1: boolean): void;
	update(arg0: MapObject): void;
	update(arg0: Kernel): void;
	extensions(): Set;
	updateIdInTables(arg0: MapObject, arg1: number, arg2: number): void;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	schemaVersion(): string;
	allDeltas(): CompressedDeltaCollection;
	clearIdentityDeltas(): List;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	setMetadata(arg0: Metadata): void;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: NavNode): boolean;
	isIncompleteNode(arg0: Node): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	findRoadPoint(arg0: RoadLink): Set;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(): Iterator;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointSize(arg0: FeaturePointType): number;
	featurePointSize(): number;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	mapObjectAssociationSize(): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	cumulativeDeltas(): CompressedDeltaCollection;
	removeValidationExceptionsForMapObject(arg0: number): void;
	clearAllDeltas(): void;
	transactionDeltas(): CompressedDeltaCollection;
	fixUpAddDeltas(arg0: DeltaCollection): void;
	checkDeltaConsistencyInvariant(): void;
	applyDelta(arg0: Delta): void;
	undoAllDeltas(): void;
	undoSyncTransactionDeltas(): void;
	undoDeltas(arg0: List): void;
	applyDeltas(arg0: List): void;
	fixupRemoveDelta(arg0: number): void;
	fixupReplaceDelta(arg0: Delta): void;
	deltaConsistencyInvariant(arg0: number, arg1: Class): boolean;
	getPropagationDeltas(): CompressedDeltaCollection;
	setPropagationDeltas(arg0: CompressedDeltaCollection): void;
	transactionDeltasForAsyncIntegration(): CompressedDeltaCollection;
	syncTransactionDeltasForAsyncIntegration(): CompressedDeltaCollection;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	hasCustomContext(arg0: Class): boolean;
	streetTypeFactory(): StreetTypeFactory;
	beginTransaction(): void;
	endTransaction(): void;
	mapContext(): ModifiableMapContext;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: Node): boolean;
	isAligned(arg0: GeoPoint): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
	removeFringe(arg0: MapObject): void;
	updateId(arg0: number, arg1: number): void;
	merger(): Merger;
	addScope(arg0: Scope): void;
	removeScope(): void;
	addFringe(arg0: MapObject): void;
	addIncompleteAdmin(arg0: IncompleteAdminPacket): void;
	removeIncompleteAdmin(arg0: number): void;
	addAdditionalData(arg0: Properties): void;
	setEdgeCandidates(arg0: Set): void;
	addMetricsContext(arg0: MetricContext): void;
	clearMetricsContexts(): void;
	addCustomContext(arg0: Class): void;
	getModifiableDegradationValidationContext(): ModifiableDegradationValidationContext;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DeltaMapContext:
{
	new (value?: any): DeltaMapContext;
	(): any;
	(value: any): any;
	prototype: DeltaMapContext;
}
interface DeltaCollection
{
	add(arg0: Delta): void;
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	clear(): void;
	size(): number;
	addAll(arg0: Collection): void;
	addDelta(arg0: Kernel, arg1: Kernel): void;
	getUser(): User;
	getDelta(arg0: number): Delta;
	getDelta(arg0: Kernel): Delta;
	setExtent(arg0: GeoRectangle): void;
	clearDeltas(): void;
	addCreateDelta(arg0: Kernel): void;
	addRemoveDelta(arg0: Kernel, arg1: Set): void;
	addRemoveDelta(arg0: Kernel): void;
	addUpdateDelta(arg0: Kernel, arg1: Kernel): void;
	hasDelta(arg0: number): boolean;
	hasDelta(arg0: Kernel): boolean;
	getDeltas(arg0: number): List;
	getDeltas(arg0: Kernel): List;
	getReplacementGraph(): ReplacementGraph;
	setMultiExtent(arg0: Set): void;
	multiExtent(): Set;
	makeCompressed(): CompressedDeltaCollection;
	makeSequential(): DeltaCollection;
	removeDeltas(arg0: number): void;
	removeDelta(arg0: Delta): void;
	updateDelta(arg0: Delta, arg1: Delta): void;
	deltas(): List;
	inverse(): DeltaCollection;
	setUser(arg0: User): void;
	updateId(arg0: number, arg1: number): void;
	extent(): GeoRectangle;
	getClass(): Class;
}
declare var DeltaCollection:
{
	new (value?: any): DeltaCollection;
	(): any;
	(value: any): any;
	prototype: DeltaCollection;
}
interface TransliterationMetadataSupplierExtension
{
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	extender(): MapContextExtender;
	mapContext(): MapContext;
	getTransliterationMetadataSupplier(): TransliteratorMetadataSupplier;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TransliterationMetadataSupplierExtension:
{
	new (value?: any): TransliterationMetadataSupplierExtension;
	(): any;
	(value: any): any;
	prototype: TransliterationMetadataSupplierExtension;
}
interface CompressedDeltaCollection
{
	add(arg0: Delta): void;
	clone(): CompressedDeltaCollection;
	clone(): any;
	getDelta(arg0: number): Delta;
	getDelta(arg0: Kernel): Delta;
	clearDeltas(): void;
	hasDelta(arg0: Kernel): boolean;
	hasDelta(arg0: number): boolean;
	getDeltas(arg0: Kernel): List;
	getDeltas(arg0: number): List;
	invertedDeltas(arg0: List): List;
	removeDeltas(arg0: number): void;
	removeDelta(arg0: Delta): void;
	updateDelta(arg0: Delta, arg1: Delta): void;
	deltasWithSortedPois(): List;
	clearIdentityDeltas(): List;
	clearReplacementInfo(arg0: CompressedDeltaCollection): CompressedDeltaCollection;
	deltas(): List;
	updateId(arg0: number, arg1: number): void;
	equals(arg0: any): boolean;
	toString(): string;
	clear(): void;
	size(): number;
	addAll(arg0: Collection): void;
	addDelta(arg0: Kernel, arg1: Kernel): void;
	getUser(): User;
	setExtent(arg0: GeoRectangle): void;
	addCreateDelta(arg0: Kernel): void;
	addRemoveDelta(arg0: Kernel, arg1: Set): void;
	addRemoveDelta(arg0: Kernel): void;
	addUpdateDelta(arg0: Kernel, arg1: Kernel): void;
	getReplacementGraph(): ReplacementGraph;
	setMultiExtent(arg0: Set): void;
	multiExtent(): Set;
	makeCompressed(): CompressedDeltaCollection;
	makeSequential(): DeltaCollection;
	inverse(): DeltaCollection;
	setUser(arg0: User): void;
	extent(): GeoRectangle;
	getClass(): Class;
}
declare var CompressedDeltaCollection:
{
	new (value?: any): CompressedDeltaCollection;
	(): any;
	(value: any): any;
	prototype: CompressedDeltaCollection;
}
interface User
{
	getLocation(): string;
	getUsername(): string;
	getWritableUserCodes(arg0: number): Set;
	getSecurityLevel(): number;
	isActive(): boolean;
	getPswdExpiration(): Date;
	setPswdExpiration(arg0: Date): void;
	getFullName(): string;
	isAuthenticated(): boolean;
	getUserWorkspacePermissions(): Set;
	canIntegrate(arg0: number): boolean;
	getEmail(): string;
	getLastAccess(): Date;
	getLoginFailures(): number;
	isTestUser(): boolean;
	isDummyProjectEnabled(): boolean;
	getClarityUserId(): string;
	getUserId(): number;
}
declare var User:
{
	new (value?: any): User;
	(): any;
	(value: any): any;
	prototype: User;
}
interface ReplacementGraph
{
	add(arg0: number, arg1: Set): boolean;
	remove(arg0: number): void;
	equals(arg0: any): boolean;
	toString(): string;
	clear(): void;
	contains(arg0: number): boolean;
	getSuccessors(arg0: number): Set;
	getVertices(): Set;
	isSplit(arg0: number): boolean;
	isSplit(arg0: Set): boolean;
	getRoots(arg0: number): Set;
	getRoots(): Set;
	isLeaf(arg0: number): boolean;
	isRoot(arg0: number): boolean;
	isNonLeaf(arg0: number): boolean;
	getAllSuccessors(arg0: number): Set;
	getAllPredecessors(arg0: number): Set;
	getPredecessors(arg0: number): Set;
	getLeaves(): Set;
	fastAdd(arg0: number, arg1: Set): boolean;
	checkGraphs(): boolean;
	compressNode(arg0: number): void;
	isMerge(arg0: number): boolean;
	isMerge(arg0: Set): boolean;
	getReplacementIds(arg0: number): Set;
	updateId(arg0: number, arg1: number): void;
	getClass(): Class;
}
declare var ReplacementGraph:
{
	new (value?: any): ReplacementGraph;
	(): any;
	(value: any): any;
	prototype: ReplacementGraph;
}
interface ViaAreaToPoiAssociation
{
	poi(): PointOfInterest;
	roadLinkAssociations(): Set;
	getPoiId(): number;
	getViaAreaId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	viaArea(): ViaArea;
	associationLinks(): Set;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ViaAreaToPoiAssociation:
{
	new (value?: any): ViaAreaToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: ViaAreaToPoiAssociation;
}
interface RemoveAdminPlaceUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveAdminPlaceUoW:
{
	new (value?: any): RemoveAdminPlaceUoW;
	(): any;
	(value: any): any;
	prototype: RemoveAdminPlaceUoW;
}
interface PointOfInterestUtil
{
	getMissingIds(arg0: PointOfInterest, arg1: MapContext): Set;
	isPartial(arg0: PointOfInterest): boolean;
	isPartial(arg0: Set, arg1: Set): boolean;
	vanityCities(arg0: MapContext, arg1: PointOfInterestKernel): Set;
	vanityCities(arg0: PointOfInterest, arg1: MapContext): Set;
	children(arg0: PointOfInterest, arg1: MapContext): Set;
	roadLink(arg0: MapContext, arg1: PointOfInterestKernel): RoadLink;
	allComponents(arg0: PointOfInterest): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: PointOfInterestKernel): void;
	parents(arg0: PointOfInterest, arg1: MapContext): Set;
	getMapOfPOITextAndLangCode(arg0: Set): Map;
	missingParentsIds(arg0: MapContext, arg1: PointOfInterestKernel): Set;
	missingChildrenIds(arg0: MapContext, arg1: PointOfInterestKernel): Set;
	namedPlace(arg0: MapContext, arg1: PointOfInterestKernel): NamedPlace;
	isPremium(arg0: MapContext, arg1: PointOfInterestKernel): boolean;
	isPremium(arg0: PointOfInterest, arg1: MapContext): boolean;
	getFlatParents(arg0: PointOfInterest, arg1: MapContext): Set;
	getFlatChildren(arg0: PointOfInterest, arg1: MapContext): Set;
	parentAssocType(arg0: PointOfInterest, arg1: MapContext, arg2: PointOfInterest): string;
	childAssocType(arg0: PointOfInterest, arg1: MapContext, arg2: PointOfInterest): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PointOfInterestUtil:
{
	new (value?: any): PointOfInterestUtil;
	(): any;
	(value: any): any;
	prototype: PointOfInterestUtil;
}
interface CarPoolImpl
{
	minPassengers(): number;
	getConditionType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var CarPoolImpl:
{
	new (value?: any): CarPoolImpl;
	(): any;
	(value: any): any;
	prototype: CarPoolImpl;
}
interface Country
{
	adminLevelFeatureType(arg0: number): number;
	description(arg0: number): string;
	parent(): AdminPlace;
	getDisplayName(): string;
	country(): Country;
	clipLevelAdminPlaces(): Set;
	centerPoint(): PointOfInterest;
	getUserCode(): string;
	listChildren(arg0: string): string;
	simpleFormat(): string;
	listParents(): string;
	children(): Set;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getParentId(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	getTimeZone(): string;
	getAdminLevel(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getIsoCode(): string;
	getAltSpanningLevel(): number;
	getEbuCode(): string;
	getNppoiAtMaxMinus1(): boolean;
	isFullGeometry(): boolean;
	getPhonePrefix(): string;
	getClipAdminLevel(): number;
	getLanguageCode(): string;
	getDescription(): string;
	getUnitOfMeasure(): string;
	getMaxAdminLevel(): number;
	getAdminLevelFeatureType(): number;
	getCurrencyPrecision(): number;
	getCurrencyType(): string;
	getHouseNumberFormat(): string;
	getPhoneCountryCode(): string;
	getSpeedLimitUnit(): string;
	getDrivingSide(): string;
}
declare var Country:
{
	new (value?: any): Country;
	(): any;
	(value: any): any;
	prototype: Country;
}
interface UpdateNGLinkToMOAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNGLinkToMOAssociationUoW:
{
	new (value?: any): UpdateNGLinkToMOAssociationUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNGLinkToMOAssociationUoW;
}
interface BasicMapObjectAssociationAbstr
{
	accept(arg0: KernelVisitor): void;
	getMissingIds(): Set;
	isPartial(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
}
declare var BasicMapObjectAssociationAbstr:
{
	new (value?: any): BasicMapObjectAssociationAbstr;
	(): any;
	(value: any): any;
	prototype: BasicMapObjectAssociationAbstr;
}
interface AddNavNodeUoW
{
	toString(): string;
	id(): number;
	setNavNode(arg0: NavNodeKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddNavNodeUoW:
{
	new (value?: any): AddNavNodeUoW;
	(): any;
	(value: any): any;
	prototype: AddNavNodeUoW;
}
interface BasicUnvalidatedMapObject
{
	equals(arg0: any): boolean;
	toString(): string;
	getMapObjectId(): number;
	getMapObjectType(): MapObjectType;
	setState(arg0: MapContext, arg1: UnvalidatedMapObjectPart): void;
	getMapObject(): MapObject;
	getDeltaOperation(): DeltaOperation;
	getDeletedNeighborId(): number;
	getDeletedNeighborType(): MapObjectType;
	getClass(): Class;
}
declare var BasicUnvalidatedMapObject:
{
	new (value?: any): BasicUnvalidatedMapObject;
	(): any;
	(value: any): any;
	prototype: BasicUnvalidatedMapObject;
}
interface UnvalidatedMapObjectPart
{
	getMapObjectId(): number;
	getMapObjectType(): MapObjectType;
	getDeltaOperation(): DeltaOperation;
	getDeletedNeighborId(): number;
	getDeletedNeighborType(): MapObjectType;
}
declare var UnvalidatedMapObjectPart:
{
	new (value?: any): UnvalidatedMapObjectPart;
	(): any;
	(value: any): any;
	prototype: UnvalidatedMapObjectPart;
}
interface MapComponentUtil
{
	features(arg0: MapObject): Set;
	hasFeatures(arg0: MapComponent): boolean;
	hasFeature(arg0: MapComponent, arg1: MapFeature): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapComponentUtil:
{
	new (value?: any): MapComponentUtil;
	(): any;
	(value: any): any;
	prototype: MapComponentUtil;
}
interface TrafficSignalImpl
{
	getConditionType(): number;
	naturalGuidanceImportance(): number;
	setSignalLocation(arg0: number): void;
	signalLocation(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var TrafficSignalImpl:
{
	new (value?: any): TrafficSignalImpl;
	(): any;
	(value: any): any;
	prototype: TrafficSignalImpl;
}
interface RemoveGPToCartoAssociationUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveGPToCartoAssociationUoW:
{
	new (value?: any): RemoveGPToCartoAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveGPToCartoAssociationUoW;
}
interface CrfUtilities
{
	CRF_ROAD_TYPE(arg0: Metadata): string;
	CRF_INTERSECTION_TYPE(arg0: Metadata): string;
	CRF_OBJECT_TYPE(arg0: Metadata): string;
	CRF_JUNCTION_TYPE(arg0: Metadata): string;
	CRF_EXTENDED_LANE_TYPE(arg0: Metadata): string;
	getCrfNavLinks(arg0: Set): Set;
	getCrfIds(arg0: NavLink): List;
	boundingRoads(arg0: MapContext, arg1: CompositeRoadFeature): Set;
	navLinks(arg0: MapContext, arg1: CompositeRoadFeatureKernel): Set;
	navLinks(arg0: CompositeRoadFeature): Set;
	navNodes(arg0: MapContext, arg1: CompositeRoadFeatureKernel): Set;
	navNodes(arg0: CompositeRoadFeature): Set;
	setBoundingIntersections(arg0: MapContext, arg1: FlatCompositeRoadFeature): boolean;
	findCountry(arg0: MapContext, arg1: CompositeRoadFeatureKernel): Country;
	boundingIntersections(arg0: MapContext, arg1: FlatCompositeRoadFeature): List;
	boundingNavNodes(arg0: CompositeRoadFeature): Set;
	boundingNavNodes(arg0: MapContext, arg1: FlatCompositeRoadFeature): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CrfUtilities:
{
	new (value?: any): CrfUtilities;
	(): any;
	(value: any): any;
	prototype: CrfUtilities;
}
interface NaturalGuidanceLinkToMOAssociation
{
	guidancePointToMapObject(): GuidancePointToMOAssociation;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	gpMOAssocId(): number;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	dateTimeMasks(): List;
	getManeuverPoints(): Set;
	link(): Link;
	getManeuverPointAssociations(): Set;
}
declare var NaturalGuidanceLinkToMOAssociation:
{
	new (value?: any): NaturalGuidanceLinkToMOAssociation;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceLinkToMOAssociation;
}
interface RoadLinkUoWAbstr
{
	id(): number;
	named(): boolean;
	setRoadLink(arg0: RoadLinkKernel): void;
	setRoadName(arg0: RoadNameKernel): void;
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
	toString(): string;
}
declare var RoadLinkUoWAbstr:
{
	new (value?: any): RoadLinkUoWAbstr;
	(): any;
	(value: any): any;
	prototype: RoadLinkUoWAbstr;
}
interface ScopeFilteringMapContext
{
	featureComponentIterator(): Iterator;
	nodeIterator(): Iterator;
	navLinkIterator(): Iterator;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	navStrandIterator(): Iterator;
	navNodeIterator(): Iterator;
	roadLinkIterator(): Iterator;
	roadNameIterator(): Iterator;
	featureIterator(): Iterator;
	cartoFeatureIterator(): Iterator;
	cartoLinkIterator(): Iterator;
	poiIterator(): Iterator;
	poiCartoIterator(): Iterator;
	conditionIterator(): Iterator;
	incompleteNodeIterator(): Iterator;
	alignedShapePointsIterator(): Iterator;
	postalAreaIterator(): Iterator;
	zoneIterator(): Iterator;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	unvalidatedChangeIterator(): Iterator;
	partialIterator(): Iterator;
	fringeIterator(): Iterator;
	cartoFaceIterator(): Iterator;
	incompleteAdminIterator(): Iterator;
	roadPointIterator(): Iterator;
	annotationIterator(): Iterator;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	viaAreaIterator(): Iterator;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaRLLinkIterator(): Iterator;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	hasCustomContext(arg0: Class): boolean;
	setEdgeCandidates(arg0: Set): void;
	addCustomContext(arg0: Class): void;
	setMetadata(arg0: Metadata): void;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	removeFringe(arg0: MapObject): void;
	updateId(arg0: number, arg1: number): void;
	merger(): Merger;
	addScope(arg0: Scope): void;
	removeScope(): void;
	addFringe(arg0: MapObject): void;
	addIncompleteAdmin(arg0: IncompleteAdminPacket): void;
	removeIncompleteAdmin(arg0: number): void;
	addAdditionalData(arg0: Properties): void;
	addMetricsContext(arg0: MetricContext): void;
	clearMetricsContexts(): void;
	getModifiableDegradationValidationContext(): ModifiableDegradationValidationContext;
	add(arg0: MapObject): void;
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	update(arg0: MapObject): void;
	update(arg0: Kernel): void;
	extensions(): Set;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: number): PointOfInterest;
	findPoi(arg0: RoadLink): Set;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	linkIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: Node): boolean;
	isIncompleteNode(arg0: NavNode): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandSize(): number;
	navNodeSize(): number;
	roadLinkSize(): number;
	roadNameSize(): number;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoSize(): number;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaSize(): number;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeSize(): number;
	incompleteAdminSize(): number;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationSize(): number;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointIterator(): Iterator;
	featurePointSize(arg0: FeaturePointType): number;
	featurePointSize(): number;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	mapObjectAssociationSize(): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ScopeFilteringMapContext:
{
	new (value?: any): ScopeFilteringMapContext;
	(): any;
	(value: any): any;
	prototype: ScopeFilteringMapContext;
}
interface CrfObject
{
	navLinks(): Set;
	navNodes(): Set;
	navFeatures(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CrfObject:
{
	new (value?: any): CrfObject;
	(): any;
	(value: any): any;
	prototype: CrfObject;
}
interface PoiAssoc
{
	getPrimaryPois(): Set;
	getSecondaryPois(): Set;
	getPois(): Set;
	getPoiAssocDetails(): Set;
	getAssocPvid(): number;
	getAssocType(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PoiAssoc:
{
	new (value?: any): PoiAssoc;
	(): any;
	(value: any): any;
	prototype: PoiAssoc;
}
interface RemoveGroupedStructureCartoFace
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveGroupedStructureCartoFace:
{
	new (value?: any): RemoveGroupedStructureCartoFace;
	(): any;
	(value: any): any;
	prototype: RemoveGroupedStructureCartoFace;
}
interface AddMapObjectUoW
{
	id(): number;
	toString(): string;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
}
declare var AddMapObjectUoW:
{
	new (value?: any): AddMapObjectUoW;
	(): any;
	(value: any): any;
	prototype: AddMapObjectUoW;
}
interface DynamicExtension
{
	index(arg0: MapObject): void;
	isEnabled(): boolean;
	setEnabled(arg0: boolean): void;
	unindex(arg0: MapObject): void;
	extender(): MapContextExtender;
	mapContext(): MapContext;
}
declare var DynamicExtension:
{
	new (value?: any): DynamicExtension;
	(): any;
	(value: any): any;
	prototype: DynamicExtension;
}
interface BlackspotUtil
{
	getDirectionType(arg0: Blackspot): DirectionType;
	getSourceType(arg0: Blackspot): SourceType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BlackspotUtil:
{
	new (value?: any): BlackspotUtil;
	(): any;
	(value: any): any;
	prototype: BlackspotUtil;
}
interface Blackspot
{
	getDirectionType(): DirectionType;
	getSourceType(): SourceType;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var Blackspot:
{
	new (value?: any): Blackspot;
	(): any;
	(value: any): any;
	prototype: Blackspot;
}
interface PriorityRoadFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PriorityRoadFilter:
{
	new (value?: any): PriorityRoadFilter;
	(): any;
	(value: any): any;
	prototype: PriorityRoadFilter;
}
interface UoWSecurityManager
{
	type(): string;
	checkUpdatePermissions(arg0: Kernel): boolean;
	checkAddPermissions(arg0: Kernel): boolean;
	getSecurityLog(): string;
	checkDeletePermissions(arg0: Kernel): boolean;
	clearSecurityLog(): void;
}
declare var UoWSecurityManager:
{
	new (value?: any): UoWSecurityManager;
	(): any;
	(value: any): any;
	prototype: UoWSecurityManager;
}
interface MapComponentVisitor
{
	visit(arg0: CartoFace): void;
	visit(arg0: CartoLink): void;
	visit(arg0: ViaAreaPoiLink): void;
	visit(arg0: ViaAreaRLLink): void;
	visit(arg0: Node): void;
	visit(arg0: Link): void;
	visit(arg0: Face): void;
	visit(arg0: FaceLink): void;
}
declare var MapComponentVisitor:
{
	new (value?: any): MapComponentVisitor;
	(): any;
	(value: any): any;
	prototype: MapComponentVisitor;
}
interface NGReplacePOIAssocToCartoAssocCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var NGReplacePOIAssocToCartoAssocCompositeUoW:
{
	new (value?: any): NGReplacePOIAssocToCartoAssocCompositeUoW;
	(): any;
	(value: any): any;
	prototype: NGReplacePOIAssocToCartoAssocCompositeUoW;
}
interface SignUtil
{
	getMissingIds(arg0: Sign, arg1: MapContext): Set;
	isPartial(arg0: Sign): boolean;
	getFeatureType(arg0: Sign): number;
	allComponents(arg0: Sign): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: SignKernel): void;
	destinations(arg0: Sign, arg1: MapContext): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SignUtil:
{
	new (value?: any): SignUtil;
	(): any;
	(value: any): any;
	prototype: SignUtil;
}
interface RoadLinkUtil
{
	toString(arg0: RoadLink): string;
	allComponents(arg0: RoadLink): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: RoadLinkKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var RoadLinkUtil:
{
	new (value?: any): RoadLinkUtil;
	(): any;
	(value: any): any;
	prototype: RoadLinkUtil;
}
interface CrfIntersection
{
	isnOrderOrphan(arg0: number): boolean;
	navLinks(): Set;
	navNodes(): Set;
	is1stOrderOrphan(): boolean;
	navFeatures(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CrfIntersection:
{
	new (value?: any): CrfIntersection;
	(): any;
	(value: any): any;
	prototype: CrfIntersection;
}
interface CrfJunctionUtil
{
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CrfJunctionUtil:
{
	new (value?: any): CrfJunctionUtil;
	(): any;
	(value: any): any;
	prototype: CrfJunctionUtil;
}
interface AddConditionUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddConditionUoW:
{
	new (value?: any): AddConditionUoW;
	(): any;
	(value: any): any;
	prototype: AddConditionUoW;
}
interface UpdateZoneUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateZoneUoW:
{
	new (value?: any): UpdateZoneUoW;
	(): any;
	(value: any): any;
	prototype: UpdateZoneUoW;
}
interface AddPostalAreaUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddPostalAreaUoW:
{
	new (value?: any): AddPostalAreaUoW;
	(): any;
	(value: any): any;
	prototype: AddPostalAreaUoW;
}
interface CrfObjectUtil
{
	lon(arg0: CompositeRoadFeatureKernel): number;
	lat(arg0: CompositeRoadFeatureKernel): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CrfObjectUtil:
{
	new (value?: any): CrfObjectUtil;
	(): any;
	(value: any): any;
	prototype: CrfObjectUtil;
}
interface NonKernelFace
{
	id(): number;
	area(): double;
	boundaryPoints(): List;
	enclaves(): number;
	exteriorBoundary(): List;
	enclaveBoundary(arg0: number): List;
	getFacePvid(): number;
	polygon(): GeoPolygon;
	boundaryComponents(): List;
	boundaryFragments(): List;
	closedBoundaryComponents(): List;
	isBroken(): boolean;
	isComplete(): boolean;
	hasPartialFaceLink(): boolean;
	makeFace(arg0: number, arg1: List, arg2: boolean): NonKernelFace;
	makeFace(arg0: number, arg1: List, arg2: GeoPolygon): NonKernelFace;
	makeFace(arg0: number, arg1: List): NonKernelFace;
	makeFace(arg0: Face): NonKernelFace;
	makeFace(arg0: number, arg1: List, arg2: List, arg3: boolean): NonKernelFace;
	getMissingIds(): Set;
	makePolygonFromLinks(arg0: List, arg1: List): List;
	makePolygonFromOrientedLinks(arg0: List): List;
	setState(arg0: MapContext, arg1: NonKernelFace): void;
	boundaryAsPoints(): List;
	setFacePvid(arg0: number): void;
	mbr(): GeoRectangle;
	boundary(): List;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NonKernelFace:
{
	new (value?: any): NonKernelFace;
	(): any;
	(value: any): any;
	prototype: NonKernelFace;
}
interface NonKernelFace
{
	id(): number;
	area(): double;
	boundaryPoints(): List;
	enclaves(): number;
	exteriorBoundary(): List;
	enclaveBoundary(arg0: number): List;
	getFacePvid(): number;
	polygon(): GeoPolygon;
	boundaryComponents(): List;
	boundaryFragments(): List;
	closedBoundaryComponents(): List;
	isBroken(): boolean;
	isComplete(): boolean;
	hasPartialFaceLink(): boolean;
	makeFace(arg0: number, arg1: List, arg2: boolean): NonKernelFace;
	makeFace(arg0: number, arg1: List, arg2: GeoPolygon): NonKernelFace;
	makeFace(arg0: number, arg1: List): NonKernelFace;
	makeFace(arg0: Face): NonKernelFace;
	makeFace(arg0: number, arg1: List, arg2: List, arg3: boolean): NonKernelFace;
	getMissingIds(): Set;
	makePolygonFromLinks(arg0: List, arg1: List): List;
	makePolygonFromOrientedLinks(arg0: List): List;
	setState(arg0: MapContext, arg1: NonKernelFace): void;
	boundaryAsPoints(): List;
	setFacePvid(arg0: number): void;
	mbr(): GeoRectangle;
	boundary(): List;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NonKernelFace:
{
	new (value?: any): NonKernelFace;
	(): any;
	(value: any): any;
	prototype: NonKernelFace;
}
interface BasicTransportAccessRestriction
{
	getConditionType(): number;
	getRestrictionType(): RestrictionType;
	getWeatherType(): WeatherType;
	getDirectionClosureType(): DirectionClosureType;
	getPhysicalStructureType(): PhysicalStructureType;
	getRestrictionValue(): number;
	getHazmatPermitType(): HazmatPermitType;
	getHazardousMaterialType(): HazardousMaterialType;
	getTrailerType(): TrailerType;
	getTimeOverrideType(): TimeOverrideType;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: number): boolean;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	hasLaneInfo(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicTransportAccessRestriction:
{
	new (value?: any): BasicTransportAccessRestriction;
	(): any;
	(value: any): any;
	prototype: BasicTransportAccessRestriction;
}
interface DirectionClosureType
{
	values(): DirectionClosureType;
	valueOf(arg0: string): DirectionClosureType;
	getValue(): string;
	getValue(): any;
	getType(arg0: number): DirectionClosureType;
	reverse(): DirectionClosureType;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var DirectionClosureType:
{
	new (value?: any): DirectionClosureType;
	(): any;
	(value: any): any;
	prototype: DirectionClosureType;
}
interface PhysicalStructureType
{
	values(): PhysicalStructureType;
	valueOf(arg0: string): PhysicalStructureType;
	getValue(): any;
	getValue(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var PhysicalStructureType:
{
	new (value?: any): PhysicalStructureType;
	(): any;
	(value: any): any;
	prototype: PhysicalStructureType;
}
interface AddGuidancePointFeaturePointUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddGuidancePointFeaturePointUoW:
{
	new (value?: any): AddGuidancePointFeaturePointUoW;
	(): any;
	(value: any): any;
	prototype: AddGuidancePointFeaturePointUoW;
}
interface AddPostalAreaAssociationUoW
{
	toString(): string;
	setPostalArea(arg0: PostalArea): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddPostalAreaAssociationUoW:
{
	new (value?: any): AddPostalAreaAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddPostalAreaAssociationUoW;
}
interface BasicRuleInfo
{
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getRuleCode(): string;
	setState(arg0: RuleInfoKernel): void;
	getStatus(): string;
	getRuleDescription(): string;
	getRuleName(): string;
	getSeverity(): string;
	getRepairNote(): string;
	getDocLink(): string;
	getLeEnabled(): boolean;
	getRuleClassName(): string;
	getBatchClassName(): string;
	getAccessorName(): string;
	getTargetClassName(): string;
	getMetadataKey(): string;
	getDeltaValidations(): Set;
	getVersion(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	makeFlat(): FlatRuleInfo;
	makeFlat(): FlatKernel;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicRuleInfo:
{
	new (value?: any): BasicRuleInfo;
	(): any;
	(value: any): any;
	prototype: BasicRuleInfo;
}
interface PartitionedAdminPlaceImpl
{
	borderingNeighbors(): Set;
	toString(): string;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: AdminPlaceKernel): void;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	adminCode(): string;
	clipLevelAdminPlaces(): Set;
	centerPoint(): PointOfInterest;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	setDummyAdmin(arg0: boolean): void;
	setAdminShort(arg0: number): void;
	toStringWithChildren(): string;
	setNamedPlacePvid(arg0: number): void;
	setDstObserved(arg0: string): void;
	setDstStartDay(arg0: number): void;
	setDstStartWeekday(arg0: number): void;
	setDstStartMonth(arg0: number): void;
	setDstStartTime(arg0: number): void;
	setDstEndDay(arg0: number): void;
	setDstEndWeekday(arg0: number): void;
	setDstEndMonth(arg0: number): void;
	setDstEndTime(arg0: number): void;
	getTimeZone(): string;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	getUserCode(): string;
	getAdminLevel(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatAdminPlace;
	makeFlat(): FlatKernel;
	parent(): AdminPlace;
	getDisplayName(): string;
	country(): Country;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getParentId(): number;
	addChild(arg0: AdminPlace): void;
	removeChild(arg0: AdminPlace): void;
	printChildren(): string;
	listChildren(arg0: string): string;
	simpleFormat(): string;
	listParents(): string;
	children(): Set;
	allComponents(): Set;
	names(arg0: string): Set;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var PartitionedAdminPlaceImpl:
{
	new (value?: any): PartitionedAdminPlaceImpl;
	(): any;
	(value: any): any;
	prototype: PartitionedAdminPlaceImpl;
}
interface EdgeMapObjectFilter
{
	accept(arg0: number): boolean;
	accept(arg0: MapObject): boolean;
	visit(arg0: LinkPoints): boolean;
	visit(arg0: NavStrand): boolean;
	visit(arg0: RoadLink): boolean;
	visit(arg0: NavLink): boolean;
	visit(arg0: Condition): boolean;
	visit(arg0: PointOfInterest): boolean;
	update(arg0: number, arg1: MapObject): void;
	reset(): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	visit(arg0: Link): boolean;
	visit(arg0: Node): boolean;
}
declare var EdgeMapObjectFilter:
{
	new (value?: any): EdgeMapObjectFilter;
	(): any;
	(value: any): any;
	prototype: EdgeMapObjectFilter;
}
interface CrfRoadUtil
{
	checkStructuralIntegrity(arg0: MapContext, arg1: CompositeRoadFeatureKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CrfRoadUtil:
{
	new (value?: any): CrfRoadUtil;
	(): any;
	(value: any): any;
	prototype: CrfRoadUtil;
}
interface ProtectedOvertakingUtil
{
	getConditionType(): number;
	getDirectionType(arg0: ConditionKernel): DirectionType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ProtectedOvertakingUtil:
{
	new (value?: any): ProtectedOvertakingUtil;
	(): any;
	(value: any): any;
	prototype: ProtectedOvertakingUtil;
}
interface IDefaultDataManager
{
	setPointOfInterest(arg0: PointOfInterestKernel): void;
	setDefaultLink(arg0: LinkKernel): void;
	getDefaultCartoFeature(): CartoFeatureKernel;
	getDefaultCartoFeature(arg0: any): CartoFeatureKernel;
	setDefaultCartoFeature(arg0: CartoFeatureKernel): void;
	setDefaultNavLink(arg0: NavLinkKernel): void;
	getDefaultCartoFeatureLH(arg0: any): boolean;
	getDefaultCartoFeatureLH(): boolean;
	getDefaultVia(): ViaAreaKernel;
	getDefaultViaAssoc(): ViaAreaKernel;
	setDefaultCartoFeatureLH(arg0: boolean): void;
	setCartoFeatureLH(arg0: any, arg1: boolean): void;
	getDefaultCompositeRoadFeature(): CompositeRoadFeatureKernel;
	setDefaultCompositeRoadFeature(arg0: CompositeRoadFeatureKernel): void;
	getDefaultBasicName(): BasicName;
	setDefaultBasicName(arg0: BasicName): void;
	setDefaultRoadLink(arg0: RoadLinkKernel): void;
	getDefaultRoadName(): RoadNameKernel;
	setDefaultRoadName(arg0: RoadNameKernel): void;
	getDefaultSign(): SignKernel;
	setDefaultSign(arg0: SignKernel): void;
	getDefaultCondition(arg0: Array<number>): DefaultFlatCondition;
	isMixedPoiSrcCode(): boolean;
	setMixedPoiSrcCode(arg0: boolean): void;
	isMixedConditionSrcCode(): boolean;
	setMixedConditionSrcCode(arg0: boolean): void;
	getDefaultNonAdasConditionSrcCode(): number;
	setDefaultNonAdasConditionSrcCode(arg0: number): void;
	getConditionKeySet(): Set;
	setDefaultCondition(arg0: number): void;
	getDefaultPoi(arg0: number): PointOfInterestKernel;
	getDefaultPoi(arg0: any): PointOfInterestKernel;
	getDefaultPoi(): PointOfInterestKernel;
	getPoiKeySet(): Set;
	setDefaultPoi(arg0: number): void;
	getDefaultRoadPoint(arg0: boolean): RoadPointKernel;
	setDefaultRoadPoint(arg0: RoadPointKernel, arg1: boolean): void;
	getDefaultLeftAddressRange(): AddressRange;
	setDefaultLeftAddressRange(arg0: AddressRange): void;
	getDefaultRightAddressRange(): AddressRange;
	setDefaultRightAddressRange(arg0: AddressRange): void;
	getDefaultLeftAdminPlace(): AdminPlaceKernel;
	setDefaultLeftAdminPlace(arg0: AdminPlaceKernel): void;
	getDefaultRightAdminPlace(): AdminPlaceKernel;
	setDefaultRightAdminPlace(arg0: AdminPlaceKernel): void;
	getDefaultLeftPostalArea(): PostalAreaKernel;
	setDefaultLeftPostalArea(arg0: PostalAreaKernel): void;
	getDefaultRightPostalArea(): PostalAreaKernel;
	setDefaultRightPostalArea(arg0: PostalAreaKernel): void;
	getDefaultLeftZoneIds(): Set;
	setDefaultLeftZoneIds(arg0: Set): void;
	getDefaultRightZoneIds(): Set;
	setDefaultRightZoneIds(arg0: Set): void;
	getDefaultLaneAttributes(): Set;
	setDefaultLaneAttributes(arg0: Set): void;
	getDefaultLanguageCode(): string;
	setDefaultLanguageCode(arg0: string): void;
	setSensitiveBitSet(arg0: BitSet): void;
	addObserver(arg0: Observer): void;
	deleteObserver(arg0: Observer): void;
	deleteObservers(): void;
	setPoiDefaults(): void;
	saveDefaults(): void;
	setCondition(arg0: ConditionKernel): void;
	setCartoFeature(arg0: any, arg1: CartoFeatureKernel): void;
	getDefaultNavLink(): NavLinkKernel;
	getDefaultRoadLink(): RoadLinkKernel;
	getDefaultLink(): LinkKernel;
	getSensitiveBitSet(): BitSet;
	removeCondition(arg0: ConditionKernel): void;
}
declare var IDefaultDataManager:
{
	new (value?: any): IDefaultDataManager;
	(): any;
	(value: any): any;
	prototype: IDefaultDataManager;
}
interface DefaultFlatCondition
{
	setUseNavLink(arg0: boolean): void;
	getUseNavLink(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	clone(): any;
	accept(arg0: KernelVisitor): void;
	accept(arg0: PacketVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: ConditionKernel, arg1: ConditionKernel): boolean;
	isRichObjectPartialCapable(): boolean;
	setStateFromXml(arg0: string): void;
	getConditionType(): number;
	setState(arg0: Kernel): void;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	setNavStrandId(arg0: number): void;
	setConditionModifiers(arg0: Set): void;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	setAttachedFiles(arg0: Set): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	cleared(): boolean;
	setDateTimeModifiers(arg0: List): void;
	invertConditionDirection(): void;
	setConditionType(arg0: number): void;
	invert(): void;
	makeFlat(): FlatKernel;
	clearState(): void;
	getDataPacketType(): DataPacketType;
	getClass(): Class;
}
declare var DefaultFlatCondition:
{
	new (value?: any): DefaultFlatCondition;
	(): any;
	(value: any): any;
	prototype: DefaultFlatCondition;
}
interface ReadOnlyChecker
{
	update(arg0: MapObject): void;
	update(arg0: number): void;
	reset(): void;
	isReadOnly(arg0: MapObject): boolean;
	isReadOnly(arg0: number): boolean;
	isReadOnly(arg0: User, arg1: AdminPlace, arg2: number): boolean;
	isRemovable(arg0: number): boolean;
	isRemovable(arg0: MapObject): boolean;
	isGeoLocked(arg0: number): boolean;
	isGeoLocked(arg0: MapObject): boolean;
	isAdjacentLocked(arg0: MapObject): boolean;
	isAdjacentLocked(arg0: number): boolean;
	isCartoLocked(arg0: MapObject): boolean;
	isCartoLocked(arg0: number): boolean;
	updateUser(arg0: User): void;
	canUserEditEdge(): boolean;
	isGeoOrAdjacentLocked(arg0: MapObject): boolean;
	setLockedEdges(arg0: Collection): void;
	isLinkCartoLocked(arg0: Link): boolean;
	isCartoFeatureCartoLocked(arg0: CartoFeature): boolean;
	whyReadOnly(arg0: number): string;
	whyNotRemovable(arg0: number): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ReadOnlyChecker:
{
	new (value?: any): ReadOnlyChecker;
	(): any;
	(value: any): any;
	prototype: ReadOnlyChecker;
}
interface BasicDeltaUnvalidatedChange
{
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	setState(arg0: MapContext, arg1: UnvalidatedChangeKernel): void;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getUser(): string;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	unvalidatedMapObjects(): List;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicDeltaUnvalidatedChange:
{
	new (value?: any): BasicDeltaUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: BasicDeltaUnvalidatedChange;
}
interface BasicDateIntervalMask
{
	isDateIntervalMask(): boolean;
	calendarInterval(): CalendarInterval;
	type(): string;
	isDayMask(): boolean;
	timeInterval(): TimeInterval;
	isExternalDateMask(): boolean;
	indicatesExcludeDate(): boolean;
	indicatesFromEnd(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BasicDateIntervalMask:
{
	new (value?: any): BasicDateIntervalMask;
	(): any;
	(value: any): any;
	prototype: BasicDateIntervalMask;
}
interface CalendarInterval
{
	toString(): string;
	startUnit(): CalendarUnit;
	endUnit(): CalendarUnit;
	calendarInterval(): CalendarInterval;
	setStartUnit(arg0: CalendarUnit): void;
	setEndUnit(arg0: CalendarUnit): void;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CalendarInterval:
{
	new (value?: any): CalendarInterval;
	(): any;
	(value: any): any;
	prototype: CalendarInterval;
}
interface RestrictedDrivingManeuvre
{
	isLegal(): boolean;
	rdmType(): number;
	timeOverride(): number;
	isPhysical(): boolean;
	isLogical(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var RestrictedDrivingManeuvre:
{
	new (value?: any): RestrictedDrivingManeuvre;
	(): any;
	(value: any): any;
	prototype: RestrictedDrivingManeuvre;
}
interface BasicUnvalidatedChange
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getUser(): string;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	setState(arg0: MapContext, arg1: UnvalidatedChangeKernel): void;
	getTimestamp(): string;
	getProjectName(): string;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	unvalidatedMapObjects(): List;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
}
declare var BasicUnvalidatedChange:
{
	new (value?: any): BasicUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: BasicUnvalidatedChange;
}
interface UpdateNavStrandUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNavStrandUoW:
{
	new (value?: any): UpdateNavStrandUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNavStrandUoW;
}
interface PrunerUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var PrunerUoW:
{
	new (value?: any): PrunerUoW;
	(): any;
	(value: any): any;
	prototype: PrunerUoW;
}
interface DistanceMarkerFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DistanceMarkerFilter:
{
	new (value?: any): DistanceMarkerFilter;
	(): any;
	(value: any): any;
	prototype: DistanceMarkerFilter;
}
interface OutdoorSupplementalGeometrySuppressFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OutdoorSupplementalGeometrySuppressFilter:
{
	new (value?: any): OutdoorSupplementalGeometrySuppressFilter;
	(): any;
	(value: any): any;
	prototype: OutdoorSupplementalGeometrySuppressFilter;
}
interface UpdateGuidancePointToMOAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateGuidancePointToMOAssociationUoW:
{
	new (value?: any): UpdateGuidancePointToMOAssociationUoW;
	(): any;
	(value: any): any;
	prototype: UpdateGuidancePointToMOAssociationUoW;
}
interface RemovePostalAreaZoneAssocUoW
{
	toString(): string;
	id(): number;
	setPostalAreaZone(arg0: PostalAreaZoneKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemovePostalAreaZoneAssocUoW:
{
	new (value?: any): RemovePostalAreaZoneAssocUoW;
	(): any;
	(value: any): any;
	prototype: RemovePostalAreaZoneAssocUoW;
}
interface FaceFactory
{
	makeFace(arg0: number, arg1: Set): FaceStruct;
	makeFace(arg0: number, arg1: Set, arg2: number): FaceStruct;
	makeFace(arg0: NonKernelFace): FaceStruct;
	makeFace(arg0: number, arg1: number, arg2: Set, arg3: MapContext): FaceStruct;
	makeFace(arg0: number, arg1: Set, arg2: boolean): FaceStruct;
	makeFace(arg0: number, arg1: Set, arg2: Set, arg3: boolean): FaceStruct;
	computeFaceLinkChanges(arg0: number, arg1: Set, arg2: MapContext, arg3: Set, arg4: Set, arg5: Set): void;
	makeFaceImpls(arg0: List, arg1: MapContext): List;
	makePolygonFromLinks(arg0: List, arg1: List): List;
	makePolygonFromLinks(arg0: Set, arg1: List): List;
	makePolygonFromOrientedLinks(arg0: List): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FaceFactory:
{
	new (value?: any): FaceFactory;
	(): any;
	(value: any): any;
	prototype: FaceFactory;
}
interface AddRailwayCrossingFPUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddRailwayCrossingFPUoW:
{
	new (value?: any): AddRailwayCrossingFPUoW;
	(): any;
	(value: any): any;
	prototype: AddRailwayCrossingFPUoW;
}
interface LoadingDockLocationsFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LoadingDockLocationsFilter:
{
	new (value?: any): LoadingDockLocationsFilter;
	(): any;
	(value: any): any;
	prototype: LoadingDockLocationsFilter;
}
interface AddCartoFaceUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddCartoFaceUoW:
{
	new (value?: any): AddCartoFaceUoW;
	(): any;
	(value: any): any;
	prototype: AddCartoFaceUoW;
}
interface MapContextFilter
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
}
declare var MapContextFilter:
{
	new (value?: any): MapContextFilter;
	(): any;
	(value: any): any;
	prototype: MapContextFilter;
}
interface BasicNaturalGuidanceLinkToMOAssociation
{
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): MapObjectAssociationType;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	guidancePointToMapObject(): GuidancePointToMOAssociation;
	guidancePointToMO(): GuidancePointToMOAssociation;
	gpMOAssocId(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	makeFlat(): FlatNaturalGuidanceLinkToMOAssociation;
	makeFlat(): FlatKernel;
	isValidUnnamed(): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	getFeatureType(): number;
	getNames(): Set;
	getManeuverPoints(): Set;
	link(): Link;
	accept(arg0: KernelVisitor): void;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicNaturalGuidanceLinkToMOAssociation:
{
	new (value?: any): BasicNaturalGuidanceLinkToMOAssociation;
	(): any;
	(value: any): any;
	prototype: BasicNaturalGuidanceLinkToMOAssociation;
}
interface FlatNaturalGuidanceLinkToMOAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: NaturalGuidanceLinkToMOAssociationKernel, arg1: NaturalGuidanceLinkToMOAssociationKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	setMoaState(arg0: MapObjectAssociationKernel): void;
	gpMOAssocId(): number;
	setManeuverPointsWithEmptySet(): void;
	setGPMOAssocId(arg0: number): void;
	kernelType(): Class;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	clearMoa(): void;
	isClearedMoa(): boolean;
	setManeuverPointAssociations(arg0: Set): void;
	setValidityPeriods(arg0: Set): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatNaturalGuidanceLinkToMOAssociation;
	getDataPacketType(): DataPacketType;
	equivalent(arg0: NaturalGuidanceLinkAssociationKernel, arg1: NaturalGuidanceLinkAssociationKernel): boolean;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	setNames(arg0: Set): void;
	linkId(): number;
	setLinkId(arg0: number): void;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	setCalculatedImp(arg0: number): void;
	setDirection(arg0: DirectionOfTravel): void;
	setFeatureExtent(arg0: number): void;
	setGuidanceType(arg0: GuidanceType): void;
	setPermanence(arg0: NaturalGuidancePermanence): void;
	setRelDistance(arg0: NaturalGuidanceRelDistance): void;
	setSeasonality(arg0: NaturalGuidanceSeasonality): void;
	setVisibility(arg0: NaturalGuidanceVisibility): void;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setSecondMapObjectId(arg0: number): void;
	cleared(): boolean;
	setFirstMapObjectId(arg0: number): void;
	setMapObjectAssociationPvid(arg0: number): void;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatNaturalGuidanceLinkToMOAssociation:
{
	new (value?: any): FlatNaturalGuidanceLinkToMOAssociation;
	(): any;
	(value: any): any;
	prototype: FlatNaturalGuidanceLinkToMOAssociation;
}
interface LinkPoints
{
	equals(arg0: any): boolean;
	length(): double;
	accept(arg0: MapComponentVisitor): void;
	accept(arg0: KernelVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isBridge(): boolean;
	bits(): BitSet;
	id(): number;
	cartoFeatures(): Set;
	setLinkPvid(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	angle(arg0: Link, arg1: Node): double;
	leftPostalArea(): PostalArea;
	rightPostalArea(): PostalArea;
	isUrban(): boolean;
	getLinkProductBoundaryOverrides(): Set;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	viaAreas(): Set;
	setDetailedCity(arg0: boolean): void;
	getGeometrySource(): number;
	setUrban(arg0: boolean): void;
	setGeometrySource(arg0: number): void;
	edge(): GeoEdge;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	features(): Set;
	bearing(arg0: Node): double;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	rightAdminPlace(): AdminPlace;
	isDetailedCity(): boolean;
	refNode(): Node;
	nrefNode(): Node;
	getShape(): List;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	rightAlternateNamedPlaces(): Set;
	leftAlternateNamedPlaces(): Set;
	getRightAlternateNamedPlaceIds(): Set;
	getLeftAlternateNamedPlaceIds(): Set;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	getLinkPvid(): number;
	getExtendedAttributes(): Set;
	link(): Link;
	leftAdminPlace(): AdminPlace;
	makeFlat(): FlatLink;
	makeFlat(): FlatKernel;
	isAligned(): boolean;
	getMapEdgeId(): number;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	assignEdge(arg0: GeoEdge): void;
	bitsCount(): number;
	setEdge(arg0: GeoEdge): void;
	setAdminPlace(arg0: AdminPlace, arg1: number): void;
	isBoundary(): boolean;
	nextShape(arg0: Node): GeoPoint;
	hasAdasHeight(): boolean;
	getLinkStats(): LinkStats;
	toString(): string;
	getClass(): Class;
}
declare var LinkPoints:
{
	new (value?: any): LinkPoints;
	(): any;
	(value: any): any;
	prototype: LinkPoints;
}
interface BasicViaAreaToPoiAssociation
{
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	isPartial(): boolean;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	poi(): PointOfInterest;
	viaArea(): ViaArea;
	getViaAreaId(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	associationLinks(): Set;
	roadLinkAssociations(): Set;
	getPoiId(): number;
	makeFlat(): FlatKernel;
	accept(arg0: KernelVisitor): void;
	getMissingIds(): Set;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicViaAreaToPoiAssociation:
{
	new (value?: any): BasicViaAreaToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: BasicViaAreaToPoiAssociation;
}
interface BasicRoadName
{
	accept(arg0: KernelVisitor): void;
	setSequenceNumber(arg0: number): void;
	setShortName(arg0: string): void;
	setId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	setTransliterations(arg0: Set): void;
	formatted(): string;
	getPvid(): number;
	setPvid(arg0: number): void;
	type(): string;
	toString(): string;
	clone(): any;
	getType(): string;
	id(): number;
	isAttached(): boolean;
	basename(): string;
	equivalent(arg0: RoadNameKernel, arg1: RoadNameKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	getBasename(): string;
	getSuffix(): string;
	getStreetType(): string;
	getLanguageCode(): string;
	isPrecedes(): boolean;
	valueEquivalent(arg0: RoadNameKernel): boolean;
	valueEquivalent(arg0: RoadNameKernel, arg1: RoadNameKernel): boolean;
	sequenceNumber(): number;
	getShortName(): string;
	getPrefix(): string;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	isExonym(): boolean;
	getTransliterations(): Set;
	languageCode(): string;
	cleared(): boolean;
	formattedName(): string;
	getNamePvid(): number;
	getDirectionOnSign(): string;
	getRouteType(): number;
	makeFlat(): FlatKernel;
	makeFlat(): FlatRoadName;
	clearState(): void;
	getPoiKeyword(): string;
	isRoadName(): boolean;
	getRefSequenceNumber(): number;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var BasicRoadName:
{
	new (value?: any): BasicRoadName;
	(): any;
	(value: any): any;
	prototype: BasicRoadName;
}
interface PointOfInterestImpl
{
	toString(): string;
	getAddress(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isPrivate(): boolean;
	getAttributes(): Set;
	getStreetSide(): string;
	equivalent(arg0: Kernel): boolean;
	addAttribute(arg0: PointOfInterestAttribute): void;
	setRoadLink(arg0: RoadLink): void;
	setNGValChangeMessage(arg0: string): void;
	setNGValMoveMessage(arg0: string): void;
	setChangeStatus(arg0: boolean): void;
	getPoiPvid(): number;
	setPoiPvid(arg0: number): void;
	getMissingIds(): Set;
	isPartial(): boolean;
	getLinkPoint(): GeoPoint;
	getPercentFromRef(): number;
	getAddressFormat(): string;
	setStreetSide(arg0: string): void;
	setPercentFromRef(arg0: number): void;
	vanityCities(): Set;
	setState(arg0: MapContext, arg1: PointOfInterestKernel): void;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getAttachedFiles(): Set;
	removeParent(arg0: PointOfInterest): void;
	addChild(arg0: string, arg1: PointOfInterest): void;
	removeChild(arg0: PointOfInterest): void;
	getAllActualAddress(): Set;
	getAllFullHouseNumber(): Set;
	getAllParsedActualAddress(): Set;
	isLongHaul(): boolean;
	isChanged(): boolean;
	setLongHaul(arg0: boolean): void;
	children(): Set;
	roadLink(): RoadLink;
	getNGValChangeMessage(): string;
	getNGValMoveMessage(): string;
	isChangeStatus(): boolean;
	isMapEdge(): boolean;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	getDisplayPoint(): GeoPoint;
	getChainId(): number;
	getLocationScore(): number;
	getPlaceScore(): number;
	getCalculatedLevel(): number;
	setChainId(arg0: number): void;
	setAddressFormat(arg0: string): void;
	getNextReviewDate(): number;
	setNextReviewDate(arg0: number): void;
	getPhoneNumber(): string;
	setPhoneNumber(arg0: string): void;
	setDisplayPoint(arg0: GeoPoint): void;
	isNationalImportance(): boolean;
	isInVicinity(): boolean;
	setNationalImportance(arg0: boolean): void;
	setInVicinity(arg0: boolean): void;
	setChanged(arg0: boolean): void;
	isLongHaulBatch(): boolean;
	getLongHaulManual(): string;
	setLongHaulManual(arg0: string): void;
	getActualAddress(): FlatPointOfInterestText;
	setActualAddress(arg0: FlatPointOfInterestText): void;
	removeAttribute(arg0: PointOfInterestAttribute): void;
	addVanityCity(arg0: AdminPlace): void;
	removeVanityCity(arg0: AdminPlace): void;
	getThirdPartyData(): Set;
	addThirdPartyData(arg0: PointOfInterestThirdPartyData): void;
	removeThirdPartyData(arg0: PointOfInterestThirdPartyData): void;
	getNotes(): List;
	addNote(arg0: string): void;
	removeNote(arg0: string): void;
	setNotes(arg0: List): void;
	addParent(arg0: string, arg1: PointOfInterest): void;
	setPremium(arg0: boolean): void;
	getParsedActualAddress(): FlatPOIParsedAddress;
	setParsedActualAddress(arg0: FlatPOIParsedAddress): void;
	setActualAddressTransliterations(arg0: Set): void;
	getActualAddressTransliterations(): Set;
	addContact(arg0: PointOfInterestContact): void;
	removeContact(arg0: PointOfInterestContact): void;
	getContacts(): Set;
	setProtectedId(arg0: string): void;
	getProtectedId(): string;
	setFullHouseNumber(arg0: FlatPointOfInterestText): void;
	getFullHouseNumber(): FlatPointOfInterestText;
	allComponents(): Set;
	setPrivate(arg0: boolean): void;
	setLongHaulBatch(arg0: boolean): void;
	makeFlat(): FlatPointOfInterest;
	makeFlat(): FlatKernel;
	parents(): Set;
	namedPlace(): NamedPlace;
	isPremium(): boolean;
	getFlatParents(): Set;
	getFlatChildren(): Set;
	parentAssocType(arg0: PointOfInterest): string;
	childAssocType(arg0: PointOfInterest): string;
	getRoadLinkId(): number;
	getVanityCityIds(): Set;
	getNamedPlaceId(): number;
	setNamedPlace(arg0: NamedPlace): void;
	getNamedPlaceType(): string;
	setAddress(arg0: string): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var PointOfInterestImpl:
{
	new (value?: any): PointOfInterestImpl;
	(): any;
	(value: any): any;
	prototype: PointOfInterestImpl;
}
interface CopyNavNodeUoW
{
	toString(): string;
	id(): number;
	setNavNode(arg0: NavNodeKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyNavNodeUoW:
{
	new (value?: any): CopyNavNodeUoW;
	(): any;
	(value: any): any;
	prototype: CopyNavNodeUoW;
}
interface MergeLinksUoW
{
	toString(): string;
	setGeometrySource(arg0: number): void;
	newLink(): Link;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var MergeLinksUoW:
{
	new (value?: any): MergeLinksUoW;
	(): any;
	(value: any): any;
	prototype: MergeLinksUoW;
}
interface AddLinkChainCompositeUoW
{
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	toString(): string;
	id(): number;
	setIsSourceRailRoadFeature(arg0: boolean): void;
	setIsSourceWaterFeature(arg0: boolean): void;
	setLinearCartoFeatureKernels(arg0: Map): void;
	setLinearCartoFeatureCIKernels(arg0: Map): void;
	setPolyCartoFeatureExpIncl(arg0: Map): void;
	setLinearCartoFeatureCISrcKernels(arg0: Map): void;
	setPolyCartoFaceCIKernels(arg0: Map): void;
	setPolyCartoFaceCISrcKernels(arg0: Map): void;
	setFaceKernels(arg0: Map): void;
	setFaceIdMap(arg0: Map): void;
	setCartoFeatureIdMap(arg0: Map): void;
	setNavLanes(arg0: List): void;
	setMapEdgeId(arg0: number): void;
	setPolyNameSource(arg0: number): void;
	setDefaults(arg0: LinkKernel): void;
	setUpdateGeoSourceCode(arg0: boolean): void;
	setRoadLinkKernels(arg0: List): void;
	setRoadLinkKernels(arg0: List, arg1: List): void;
	setUpdateDirectionOfTravel(arg0: boolean): void;
	setStartIsReference(arg0: boolean): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddLinkChainCompositeUoW:
{
	new (value?: any): AddLinkChainCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddLinkChainCompositeUoW;
}
interface BasicPoiCarto
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: PoiCartoKernel): void;
	cartoFeature(): CartoFeature;
	poi(): PointOfInterest;
	getCartoId(): number;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getPoiId(): number;
	getPoiIsBuilding(): boolean;
	getCartoFeatureSubTypePublishCode(): CartoFeatureSubTypePublishValue;
	makeFlat(): FlatPoiCarto;
	makeFlat(): FlatKernel;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicPoiCarto:
{
	new (value?: any): BasicPoiCarto;
	(): any;
	(value: any): any;
	prototype: BasicPoiCarto;
}
interface PostalAreaAdminPlaceUtil
{
	getMissingIds(arg0: PostalAreaAdminPlace, arg1: MapContext): Set;
	isPartial(arg0: PostalAreaAdminPlace): boolean;
	checkStructuralIntegrity(arg0: MapContext, arg1: PostalAreaAdminPlaceKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PostalAreaAdminPlaceUtil:
{
	new (value?: any): PostalAreaAdminPlaceUtil;
	(): any;
	(value: any): any;
	prototype: PostalAreaAdminPlaceUtil;
}
interface BasicManeuverPointFeaturePoint
{
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: FeaturePointTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): FeaturePointType;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	setFeaturePointState(arg0: MapContext, arg1: FeaturePointKernel): void;
	isAutoGenerated(): boolean;
	getPrepositionCodes(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatManeuverPointFeaturePoint;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	directionOfTravel(): DirectionOfTravel;
	accept(arg0: KernelVisitor): void;
	setState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeatureType(): number;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	calcPercentFromRef(): double;
	allComponents(): Set;
	link(): Link;
	getPoint(): GeoPoint;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicManeuverPointFeaturePoint:
{
	new (value?: any): BasicManeuverPointFeaturePoint;
	(): any;
	(value: any): any;
	prototype: BasicManeuverPointFeaturePoint;
}
interface AdminPlaceAbstrUtil
{
	getDisplayName(arg0: AdminPlace): string;
	isValidUnnamed(arg0: AdminPlace): boolean;
	getDisplayFeatureName(arg0: AdminPlace): FeatureName;
	listChildren(arg0: AdminPlace, arg1: string): string;
	simpleFormat(arg0: AdminPlace): string;
	listParents(arg0: AdminPlace): string;
	allComponents(arg0: AdminPlace): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AdminPlaceAbstrUtil:
{
	new (value?: any): AdminPlaceAbstrUtil;
	(): any;
	(value: any): any;
	prototype: AdminPlaceAbstrUtil;
}
interface NonNavigableRdstmcCartoLinkFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NonNavigableRdstmcCartoLinkFilter:
{
	new (value?: any): NonNavigableRdstmcCartoLinkFilter;
	(): any;
	(value: any): any;
	prototype: NonNavigableRdstmcCartoLinkFilter;
}
interface RuleInfo
{
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getRuleCode(): string;
	getStatus(): string;
	getRuleDescription(): string;
	getRuleName(): string;
	getSeverity(): string;
	getRepairNote(): string;
	getDocLink(): string;
	getLeEnabled(): boolean;
	getRuleClassName(): string;
	getBatchClassName(): string;
	getAccessorName(): string;
	getTargetClassName(): string;
	getMetadataKey(): string;
	getDeltaValidations(): Set;
	getVersion(): number;
}
declare var RuleInfo:
{
	new (value?: any): RuleInfo;
	(): any;
	(value: any): any;
	prototype: RuleInfo;
}
interface NavigableFilter
{
	setDot(arg0: string): void;
	getDotForNavLink(arg0: number): string;
	clearLinkToDotMap(): void;
	shouldAddLink(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	shouldExploreLink(arg0: NavLink, arg1: NavNode, arg2: double): ExploreResult;
	shouldAddLength(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	getDefaultFilter(): DistanceGraphFilter;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NavigableFilter:
{
	new (value?: any): NavigableFilter;
	(): any;
	(value: any): any;
	prototype: NavigableFilter;
}
interface Remover
{
	remove(arg0: number): void;
}
declare var Remover:
{
	new (value?: any): Remover;
	(): any;
	(value: any): any;
	prototype: Remover;
}
interface DelLinkCompositeUoW
{
	toString(): string;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DelLinkCompositeUoW:
{
	new (value?: any): DelLinkCompositeUoW;
	(): any;
	(value: any): any;
	prototype: DelLinkCompositeUoW;
}
interface ConstructionStatus
{
	isOpen(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var ConstructionStatus:
{
	new (value?: any): ConstructionStatus;
	(): any;
	(value: any): any;
	prototype: ConstructionStatus;
}
interface UpdateRoadLinkUoW
{
	toString(): string;
	id(): number;
	named(): boolean;
	setRoadLink(arg0: RoadLinkKernel): void;
	setRoadName(arg0: RoadNameKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateRoadLinkUoW:
{
	new (value?: any): UpdateRoadLinkUoW;
	(): any;
	(value: any): any;
	prototype: UpdateRoadLinkUoW;
}
interface SplitLinkCompositeUoW
{
	toString(): string;
	setGeometrySource(arg0: number): void;
	duplicateUsingLinkPoints(arg0: MapContext): SplitLinkCompositeUoW;
	duplicateUsingLinks(arg0: MapContext): SplitLinkCompositeUoW;
	copyShapes(arg0: MapContext): List;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var SplitLinkCompositeUoW:
{
	new (value?: any): SplitLinkCompositeUoW;
	(): any;
	(value: any): any;
	prototype: SplitLinkCompositeUoW;
}
interface SplitLinkCompositeUoW
{
	toString(): string;
	setGeometrySource(arg0: number): void;
	duplicateUsingLinkPoints(arg0: MapContext): SplitLinkCompositeUoW;
	duplicateUsingLinks(arg0: MapContext): SplitLinkCompositeUoW;
	copyShapes(arg0: MapContext): List;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var SplitLinkCompositeUoW:
{
	new (value?: any): SplitLinkCompositeUoW;
	(): any;
	(value: any): any;
	prototype: SplitLinkCompositeUoW;
}
interface JunctionView
{
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var JunctionView:
{
	new (value?: any): JunctionView;
	(): any;
	(value: any): any;
	prototype: JunctionView;
}
interface VariableSpeedSignUtil
{
	getConditionType(): number;
	speedSignLocation(arg0: ConditionKernel): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var VariableSpeedSignUtil:
{
	new (value?: any): VariableSpeedSignUtil;
	(): any;
	(value: any): any;
	prototype: VariableSpeedSignUtil;
}
interface SpecialSpeedSituation
{
	timeOverride(): number;
	getSpeedLimit(): number;
	speedSituationType(): number;
	dependentSpeedType(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var SpecialSpeedSituation:
{
	new (value?: any): SpecialSpeedSituation;
	(): any;
	(value: any): any;
	prototype: SpecialSpeedSituation;
}
interface ActualAddressRangeFactory
{
	getInstance(arg0: MapContext): ActualAddressRangeFactory;
	getLeftRange(arg0: number, arg1: Metadata, arg2: boolean): AddressRange;
	getLeftRange(arg0: number, arg1: Metadata): AddressRange;
	getRightRange(arg0: number, arg1: Metadata, arg2: boolean): AddressRange;
	getRightRange(arg0: number, arg1: Metadata): AddressRange;
	clearCache(): void;
	clearFromRightRange(arg0: number): void;
	clearFromLeftRange(arg0: number): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ActualAddressRangeFactory:
{
	new (value?: any): ActualAddressRangeFactory;
	(): any;
	(value: any): any;
	prototype: ActualAddressRangeFactory;
}
interface ActualAddressRangeFactory
{
	getInstance(arg0: MapContext): ActualAddressRangeFactory;
	getLeftRange(arg0: number, arg1: Metadata, arg2: boolean): AddressRange;
	getLeftRange(arg0: number, arg1: Metadata): AddressRange;
	getRightRange(arg0: number, arg1: Metadata, arg2: boolean): AddressRange;
	getRightRange(arg0: number, arg1: Metadata): AddressRange;
	clearCache(): void;
	clearFromRightRange(arg0: number): void;
	clearFromLeftRange(arg0: number): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ActualAddressRangeFactory:
{
	new (value?: any): ActualAddressRangeFactory;
	(): any;
	(value: any): any;
	prototype: ActualAddressRangeFactory;
}
interface RestrictedDrivingManeuvreImpl
{
	isLegal(): boolean;
	rdmType(): number;
	timeOverride(): number;
	isPhysical(): boolean;
	isLogical(): boolean;
	getConditionType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var RestrictedDrivingManeuvreImpl:
{
	new (value?: any): RestrictedDrivingManeuvreImpl;
	(): any;
	(value: any): any;
	prototype: RestrictedDrivingManeuvreImpl;
}
interface AddPostalAreaAdminPlaceAssocUoW
{
	toString(): string;
	id(): number;
	setPostalAreaAdminPlace(arg0: PostalAreaAdminPlaceKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddPostalAreaAdminPlaceAssocUoW:
{
	new (value?: any): AddPostalAreaAdminPlaceAssocUoW;
	(): any;
	(value: any): any;
	prototype: AddPostalAreaAdminPlaceAssocUoW;
}
interface TransportPreferredRouteUtil
{
	getConditionType(): number;
	getWeightDependentValue(arg0: ConditionKernel): number;
	getDirectionType(arg0: ConditionKernel): DirectionType;
	getPreferredRouteType(arg0: ConditionKernel): PreferredRouteType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TransportPreferredRouteUtil:
{
	new (value?: any): TransportPreferredRouteUtil;
	(): any;
	(value: any): any;
	prototype: TransportPreferredRouteUtil;
}
interface ZAPRemovalChecker
{
	canRemovePostalArea(arg0: number, arg1: JdbcConnection): boolean;
	canRemoveZone(arg0: number, arg1: JdbcConnection): boolean;
	canRemoveAdminPlace(arg0: number, arg1: JdbcConnection, arg2: boolean): boolean;
	canRemoveZonesAdminsPostalsForDeltas(arg0: StringBuffer, arg1: List, arg2: JdbcConnection): boolean;
	areZonesAdminsPostalsDeltasOnly(arg0: ClusteredDeltaCollection): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ZAPRemovalChecker:
{
	new (value?: any): ZAPRemovalChecker;
	(): any;
	(value: any): any;
	prototype: ZAPRemovalChecker;
}
interface ClusteredDeltaCollection
{
	getUser(): User;
	addDeltaCluster(arg0: DeltaCluster): void;
	clusteredDeltaCollectionSize(): number;
	deltas(): List;
	clusteredDeltaCollection(): Set;
	updateDeltas(arg0: DeltaCollection, arg1: Map): void;
	setUser(arg0: User): void;
}
declare var ClusteredDeltaCollection:
{
	new (value?: any): ClusteredDeltaCollection;
	(): any;
	(value: any): any;
	prototype: ClusteredDeltaCollection;
}
interface RemoveNGLinkToMOAssociationUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveNGLinkToMOAssociationUoW:
{
	new (value?: any): RemoveNGLinkToMOAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveNGLinkToMOAssociationUoW;
}
interface TrafficSign
{
	getWeatherType(): WeatherType;
	signType(): number;
	preWarning(): Map;
	duration(): Map;
	validityTime(): Map;
	generalWarningSignType(): string;
	signValue(): Map;
	applicableVehiclesMask(): number;
	naturalGuidanceImportance(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var TrafficSign:
{
	new (value?: any): TrafficSign;
	(): any;
	(value: any): any;
	prototype: TrafficSign;
}
interface RemovePostalAreaAssociationUoW
{
	toString(): string;
	setPostalArea(arg0: PostalArea): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemovePostalAreaAssociationUoW:
{
	new (value?: any): RemovePostalAreaAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemovePostalAreaAssociationUoW;
}
interface AddCartoLinkUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddCartoLinkUoW:
{
	new (value?: any): AddCartoLinkUoW;
	(): any;
	(value: any): any;
	prototype: AddCartoLinkUoW;
}
interface BasicGuidancePointToPoiAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	guidancePointId(): number;
	guidancePoint(): GuidancePointFeaturePoint;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): MapObjectAssociationType;
	getMissingIds(): Set;
	isPartial(): boolean;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	poi(): PointOfInterest;
	poiId(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	makeFlat(): FlatGuidancePointToPoiAssociation;
	makeFlat(): FlatKernel;
	accept(arg0: KernelVisitor): void;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicGuidancePointToPoiAssociation:
{
	new (value?: any): BasicGuidancePointToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: BasicGuidancePointToPoiAssociation;
}
interface FlatGuidancePointToPoiAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	setGuidancePointId(arg0: number): void;
	equivalent(arg0: GuidancePointToPoiAssociationKernel, arg1: GuidancePointToPoiAssociationKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	guidancePointId(): number;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	setMoaState(arg0: MapObjectAssociationKernel): void;
	setPoiId(arg0: number): void;
	poiId(): number;
	kernelType(): Class;
	clearMoa(): void;
	isClearedMoa(): boolean;
	makeFlat(): FlatKernel;
	makeFlat(): FlatGuidancePointToPoiAssociation;
	getDataPacketType(): DataPacketType;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setSecondMapObjectId(arg0: number): void;
	cleared(): boolean;
	setFirstMapObjectId(arg0: number): void;
	setMapObjectAssociationPvid(arg0: number): void;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatGuidancePointToPoiAssociation:
{
	new (value?: any): FlatGuidancePointToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: FlatGuidancePointToPoiAssociation;
}
interface AddOppNodeCrfIntCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddOppNodeCrfIntCompositeUoW:
{
	new (value?: any): AddOppNodeCrfIntCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddOppNodeCrfIntCompositeUoW;
}
interface RemoveZoneUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveZoneUoW:
{
	new (value?: any): RemoveZoneUoW;
	(): any;
	(value: any): any;
	prototype: RemoveZoneUoW;
}
interface RailwayCrossingFeaturePoint
{
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	directionOfTravel(): DirectionOfTravel;
	calcPercentFromRef(): double;
	link(): Link;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var RailwayCrossingFeaturePoint:
{
	new (value?: any): RailwayCrossingFeaturePoint;
	(): any;
	(value: any): any;
	prototype: RailwayCrossingFeaturePoint;
}
interface AddCartoFeatureUoW
{
	toString(): string;
	id(): number;
	setCartoFeature(arg0: CartoFeatureKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddCartoFeatureUoW:
{
	new (value?: any): AddCartoFeatureUoW;
	(): any;
	(value: any): any;
	prototype: AddCartoFeatureUoW;
}
interface AddGPToCartoAssociationUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddGPToCartoAssociationUoW:
{
	new (value?: any): AddGPToCartoAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddGPToCartoAssociationUoW;
}
interface LaneStrand
{
	condition(): Condition;
	navLanes(): List;
	navLane(arg0: number): NavLane;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionId(): number;
	getLaneStrandPvid(): number;
	getLaneStrandElements(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var LaneStrand:
{
	new (value?: any): LaneStrand;
	(): any;
	(value: any): any;
	prototype: LaneStrand;
}
interface SetLinksNamedPlaceCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var SetLinksNamedPlaceCompositeUoW:
{
	new (value?: any): SetLinksNamedPlaceCompositeUoW;
	(): any;
	(value: any): any;
	prototype: SetLinksNamedPlaceCompositeUoW;
}
interface ReconcileKernelsUoW
{
	toString(): string;
	getAddKernels(): Collection;
	getChgKernels(): Collection;
	getDelKernels(): Collection;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var ReconcileKernelsUoW:
{
	new (value?: any): ReconcileKernelsUoW;
	(): any;
	(value: any): any;
	prototype: ReconcileKernelsUoW;
}
interface UpdateNodeUoW
{
	toString(): string;
	id(): number;
	setNode(arg0: NodeKernel): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNodeUoW:
{
	new (value?: any): UpdateNodeUoW;
	(): any;
	(value: any): any;
	prototype: UpdateNodeUoW;
}
interface CopyAttributesCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyAttributesCompositeUoW:
{
	new (value?: any): CopyAttributesCompositeUoW;
	(): any;
	(value: any): any;
	prototype: CopyAttributesCompositeUoW;
}
interface DateIntervalMask
{
	calendarInterval(): CalendarInterval;
	type(): string;
	isDateIntervalMask(): boolean;
	isDayMask(): boolean;
	timeInterval(): TimeInterval;
	isExternalDateMask(): boolean;
	indicatesExcludeDate(): boolean;
	indicatesFromEnd(): boolean;
}
declare var DateIntervalMask:
{
	new (value?: any): DateIntervalMask;
	(): any;
	(value: any): any;
	prototype: DateIntervalMask;
}
interface DirectionOfTravelImpl
{
	getConditionType(): number;
	bearing(): number;
	getDependentAccessType(): DependentAccessType;
	hasDependentAccessType(): boolean;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: number): boolean;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	hasLaneInfo(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var DirectionOfTravelImpl:
{
	new (value?: any): DirectionOfTravelImpl;
	(): any;
	(value: any): any;
	prototype: DirectionOfTravelImpl;
}
interface RemoveNGLinkToCartoAssociationUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveNGLinkToCartoAssociationUoW:
{
	new (value?: any): RemoveNGLinkToCartoAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveNGLinkToCartoAssociationUoW;
}
interface RemoveRoadLinkUoW
{
	toString(): string;
	id(): number;
	setRoadLink(arg0: RoadLinkKernel, arg1: Map): void;
	setRoadLink(arg0: RoadLinkKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveRoadLinkUoW:
{
	new (value?: any): RemoveRoadLinkUoW;
	(): any;
	(value: any): any;
	prototype: RemoveRoadLinkUoW;
}
interface TimeInterval
{
	startTime(): TimeUnit;
	endTime(): TimeUnit;
	timeInterval(): TimeInterval;
	setStartTime(arg0: TimeUnit): void;
	setEndTime(arg0: TimeUnit): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TimeInterval:
{
	new (value?: any): TimeInterval;
	(): any;
	(value: any): any;
	prototype: TimeInterval;
}
interface TimeUnit
{
	equals(arg0: any): boolean;
	min(): number;
	compareTo(arg0: any): number;
	hour(): number;
	isValidHour(arg0: number): boolean;
	isValidMin(arg0: number): boolean;
	isValidTime(arg0: number, arg1: number): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TimeUnit:
{
	new (value?: any): TimeUnit;
	(): any;
	(value: any): any;
	prototype: TimeUnit;
}
interface TrafficSignalUtil
{
	getConditionType(): number;
	naturalGuidanceImportance(arg0: ConditionKernel): number;
	signalLocation(arg0: ConditionKernel): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TrafficSignalUtil:
{
	new (value?: any): TrafficSignalUtil;
	(): any;
	(value: any): any;
	prototype: TrafficSignalUtil;
}
interface GuidancePointToCartoAssociation
{
	guidancePoint(): GuidancePointFeaturePoint;
	cartoFeature(): CartoFeature;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	guidancePointId(): number;
	cartoId(): number;
}
declare var GuidancePointToCartoAssociation:
{
	new (value?: any): GuidancePointToCartoAssociation;
	(): any;
	(value: any): any;
	prototype: GuidancePointToCartoAssociation;
}
interface OrientedLink
{
	toString(): string;
	length(): double;
	accept(arg0: MapComponentVisitor): void;
	accept(arg0: KernelVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	isBridge(): boolean;
	id(): number;
	cartoFeatures(): Set;
	setLinkPvid(arg0: number): void;
	equivalent(arg0: Kernel): boolean;
	undirectedLink(): Link;
	getLeftAdminPlaceId(): number;
	getRightAdminPlaceId(): number;
	angle(arg0: Link, arg1: Node): double;
	leftPostalArea(): PostalArea;
	rightPostalArea(): PostalArea;
	isUrban(): boolean;
	getLinkProductBoundaryOverrides(): Set;
	isTunnel(): boolean;
	getMapEdgeSide(): MapEdgeSide;
	viaAreas(): Set;
	setDetailedCity(arg0: boolean): void;
	getGeometrySource(): number;
	setUrban(arg0: boolean): void;
	setGeometrySource(arg0: number): void;
	fromXml(arg0: string): void;
	edge(): GeoEdge;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	features(): Set;
	fromNode(): Node;
	toNode(): Node;
	bearing(arg0: Node): double;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	rightAdminPlace(): AdminPlace;
	isDetailedCity(): boolean;
	refNode(): Node;
	nrefNode(): Node;
	getShape(): List;
	getRefNodeId(): number;
	getNrefNodeId(): number;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setBridge(arg0: boolean): void;
	setTunnel(arg0: boolean): void;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	rightAlternateNamedPlaces(): Set;
	leftAlternateNamedPlaces(): Set;
	getRightAlternateNamedPlaceIds(): Set;
	getLeftAlternateNamedPlaceIds(): Set;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	getLinkPvid(): number;
	getExtendedAttributes(): Set;
	leftAdminPlace(): AdminPlace;
	makeFlat(): FlatKernel;
	makeFlat(): FlatLink;
	isAligned(): boolean;
	getMapEdgeId(): number;
	getRightPostalAreaId(): number;
	getLeftPostalAreaId(): number;
	assignEdge(arg0: GeoEdge): void;
	setEdge(arg0: GeoEdge): void;
	setAdminPlace(arg0: AdminPlace, arg1: number): void;
	isBoundary(): boolean;
	nextShape(arg0: Node): GeoPoint;
	hasAdasHeight(): boolean;
	getLinkStats(): LinkStats;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var OrientedLink:
{
	new (value?: any): OrientedLink;
	(): any;
	(value: any): any;
	prototype: OrientedLink;
}
interface Gate
{
	gateType(): number;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var Gate:
{
	new (value?: any): Gate;
	(): any;
	(value: any): any;
	prototype: Gate;
}
interface PolygonEditContext
{
	removeLinks(arg0: Collection): void;
	carto(): CartoFeatureKernel;
	addLinks(arg0: Collection): boolean;
	setUseAlternateFaceGenerator(arg0: boolean): void;
	setDefaultLongHaul(arg0: boolean): void;
	setDefaultRoofHeight(arg0: number): void;
	setDefaultGroundClearance(arg0: number): void;
	setDefaultCoverageIndicator(arg0: string): void;
	setDefaultCoverageIndicatorSource(arg0: number): void;
	setDefaultClaimedBy(arg0: string): void;
	setDefaultControlledBy(arg0: string): void;
	isMixedLongHaul(): boolean;
	linkFaceLinkMap(): Map;
	isDeleted(arg0: number): boolean;
	setDeleted(arg0: number): void;
	faces(): Set;
	modLinkIds(): Set;
	getDeletedFaceIds(): Set;
	combineLH(arg0: LongHaul, arg1: LongHaul): LongHaul;
	getDefaultLongHaul(): boolean;
	getDefaultRoofHeight(): number;
	getDefaultGroundClearance(): number;
	getDefaultCoverageIndicator(): string;
	getDefaultCoverageIndicatorSource(): number;
	getDefaultClaimedBy(): string;
	getDefaultControlledBy(): string;
	verifyDone(): boolean;
	oldLinks(): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PolygonEditContext:
{
	new (value?: any): PolygonEditContext;
	(): any;
	(value: any): any;
	prototype: PolygonEditContext;
}
interface LongHaul
{
	values(): LongHaul;
	valueOf(arg0: string): LongHaul;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var LongHaul:
{
	new (value?: any): LongHaul;
	(): any;
	(value: any): any;
	prototype: LongHaul;
}
interface CrfIntersectionUtil
{
	isnOrderOrphan(arg0: CrfIntersection, arg1: number): boolean;
	is1stOrderOrphan(arg0: CrfIntersection): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CrfIntersectionUtil:
{
	new (value?: any): CrfIntersectionUtil;
	(): any;
	(value: any): any;
	prototype: CrfIntersectionUtil;
}
interface AdminEnclaveFeatureFilter
{
	filter(arg0: MapObject): UnitOfWork;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AdminEnclaveFeatureFilter:
{
	new (value?: any): AdminEnclaveFeatureFilter;
	(): any;
	(value: any): any;
	prototype: AdminEnclaveFeatureFilter;
}
interface UsageFeeRequiredImpl
{
	getConditionType(): number;
	getTollSystemType(): number;
	getTollFeatureType(): TollFeatureType;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: number): boolean;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	hasLaneInfo(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var UsageFeeRequiredImpl:
{
	new (value?: any): UsageFeeRequiredImpl;
	(): any;
	(value: any): any;
	prototype: UsageFeeRequiredImpl;
}
interface AddGuidancePointCompositeUoW
{
	toString(): string;
	id(): number;
	assocId(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddGuidancePointCompositeUoW:
{
	new (value?: any): AddGuidancePointCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddGuidancePointCompositeUoW;
}
interface PartitionIterator
{
	remove(): void;
	hasNext(): boolean;
	next(): any;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	forEachRemaining(arg0: Consumer): void;
}
declare var PartitionIterator:
{
	new (value?: any): PartitionIterator;
	(): any;
	(value: any): any;
	prototype: PartitionIterator;
}
interface Group1PostalFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var Group1PostalFilter:
{
	new (value?: any): Group1PostalFilter;
	(): any;
	(value: any): any;
	prototype: Group1PostalFilter;
}
interface UpdateVirtualConnectionUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateVirtualConnectionUoW:
{
	new (value?: any): UpdateVirtualConnectionUoW;
	(): any;
	(value: any): any;
	prototype: UpdateVirtualConnectionUoW;
}
interface BasicSpecialSpeedSituation
{
	timeOverride(): number;
	getConditionType(): number;
	getSpeedLimit(): number;
	speedSituationType(): number;
	dependentSpeedType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicSpecialSpeedSituation:
{
	new (value?: any): BasicSpecialSpeedSituation;
	(): any;
	(value: any): any;
	prototype: BasicSpecialSpeedSituation;
}
interface WeekOfYear
{
	toString(): string;
	week(): number;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	isValidWeekOfYear(arg0: number): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var WeekOfYear:
{
	new (value?: any): WeekOfYear;
	(): any;
	(value: any): any;
	prototype: WeekOfYear;
}
interface PoiCarto
{
	cartoFeature(): CartoFeature;
	poi(): PointOfInterest;
	getCartoId(): number;
	getPoiId(): number;
	getPoiIsBuilding(): boolean;
	getCartoFeatureSubTypePublishCode(): CartoFeatureSubTypePublishValue;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PoiCarto:
{
	new (value?: any): PoiCarto;
	(): any;
	(value: any): any;
	prototype: PoiCarto;
}
interface NamedPlacePartition
{
	addAdminPlace(arg0: AdminPlace): void;
	removeAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	indexAdminPlace(arg0: AdminPlace): void;
	unindexAdminPlace(arg0: AdminPlace): void;
	findAdminPlace(arg0: number): AdminPlace;
}
declare var NamedPlacePartition:
{
	new (value?: any): NamedPlacePartition;
	(): any;
	(value: any): any;
	prototype: NamedPlacePartition;
}
interface LaneLevelConditionUtil
{
	getSetOfStrandLaneNumbers(arg0: Condition): Set;
	navLaneNumbers(arg0: BasicCondition): number;
	getLanesToLaneStrand(arg0: Condition): Map;
	appliesToLane(arg0: BasicCondition, arg1: number, arg2: NavLink): boolean;
	appliesToLane(arg0: BasicCondition, arg1: number, arg2: number): boolean;
	hasLaneInfo(arg0: BasicCondition): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LaneLevelConditionUtil:
{
	new (value?: any): LaneLevelConditionUtil;
	(): any;
	(value: any): any;
	prototype: LaneLevelConditionUtil;
}
interface BasicCondition
{
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
	getConditionType(): number;
}
declare var BasicCondition:
{
	new (value?: any): BasicCondition;
	(): any;
	(value: any): any;
	prototype: BasicCondition;
}
interface DirectionOfTravelConditionUtil
{
	getConditionType(): number;
	bearing(arg0: ConditionKernel): number;
	getDependentAccessType(arg0: ConditionKernel): DependentAccessType;
	hasDependentAccessType(arg0: ConditionKernel): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DirectionOfTravelConditionUtil:
{
	new (value?: any): DirectionOfTravelConditionUtil;
	(): any;
	(value: any): any;
	prototype: DirectionOfTravelConditionUtil;
}
interface RemoveViaAreaUoW
{
	toString(): string;
	id(): number;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveViaAreaUoW:
{
	new (value?: any): RemoveViaAreaUoW;
	(): any;
	(value: any): any;
	prototype: RemoveViaAreaUoW;
}
interface UpdateConditionUoW
{
	toString(): string;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateConditionUoW:
{
	new (value?: any): UpdateConditionUoW;
	(): any;
	(value: any): any;
	prototype: UpdateConditionUoW;
}
interface BasicCartoLink
{
	length(): double;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapComponentVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: CartoLinkKernel): void;
	edge(): GeoEdge;
	cartoFeature(): CartoFeature;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	setLongHaul(arg0: boolean): void;
	getLinkId(): number;
	productAdmin(): AdminPlace;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	isLineOfControl(): boolean;
	getCartoId(): number;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	getProductAdminId(): number;
	link(): Link;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCartoLink;
	toString(): string;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicCartoLink:
{
	new (value?: any): BasicCartoLink;
	(): any;
	(value: any): any;
	prototype: BasicCartoLink;
}
interface GoldPlateHelper
{
	isUpdateProtected(arg0: GoldPlateReason): boolean;
	isDeleteProtected(arg0: GoldPlateReason): boolean;
	protectedAttributes(arg0: GoldPlateReason): EnumSet;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GoldPlateHelper:
{
	new (value?: any): GoldPlateHelper;
	(): any;
	(value: any): any;
	prototype: GoldPlateHelper;
}
interface GoldPlateReason
{
	values(): GoldPlateReason;
	valueOf(arg0: string): GoldPlateReason;
	getDescription(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var GoldPlateReason:
{
	new (value?: any): GoldPlateReason;
	(): any;
	(value: any): any;
	prototype: GoldPlateReason;
}
interface AccessRestrictionUtil
{
	minPassengers(arg0: ConditionKernel): number;
	hasSeasonallyClosed(arg0: ConditionKernel): boolean;
	hasMinPassengers(arg0: ConditionKernel): boolean;
	hasHOVAllowsMotorcycles(arg0: ConditionKernel): boolean;
	hovAllowsMotorcycles(arg0: ConditionKernel): boolean;
	hasHOVAllowsHybrids(arg0: ConditionKernel): boolean;
	hovAllowsHybrids(arg0: ConditionKernel): boolean;
	hasHOVAllowsAlternateFuelVehicle(arg0: ConditionKernel): boolean;
	isSeasonallyClosed(arg0: ConditionKernel): boolean;
	hovAllowsAlternateFuelVehicle(arg0: ConditionKernel): boolean;
	hasHOVAllowsFeePay(arg0: ConditionKernel): boolean;
	hovAllowsFeePay(arg0: ConditionKernel): boolean;
	hasConditionOverride(arg0: ConditionKernel): boolean;
	conditionOverride(arg0: ConditionKernel): boolean;
	hasTimeOverride(arg0: ConditionKernel): boolean;
	booleanToInt(arg0: boolean): number;
	intToBoolean(arg0: number): boolean;
	getConditionType(): number;
	getDependentAccessType(arg0: ConditionKernel): DependentAccessType;
	hasDependentAccessType(arg0: ConditionKernel): boolean;
	getTimeOverrideType(arg0: ConditionKernel): TimeOverrideType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AccessRestrictionUtil:
{
	new (value?: any): AccessRestrictionUtil;
	(): any;
	(value: any): any;
	prototype: AccessRestrictionUtil;
}
interface NavLinkUtilities
{
	getBestFromRefLaneCount(arg0: NavLink): number;
	getBestToRefLaneCount(arg0: NavLink): number;
	getDefaultToRefLanes(arg0: NavLink): number;
	getDefaultFromRefLanes(arg0: NavLink): number;
	getMinLaneFromLaneCategory(arg0: NavLink): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NavLinkUtilities:
{
	new (value?: any): NavLinkUtilities;
	(): any;
	(value: any): any;
	prototype: NavLinkUtilities;
}
interface BasicNoOvertaking
{
	getConditionType(): number;
	getWeatherType(): WeatherType;
	getDirectionType(): DirectionType;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicNoOvertaking:
{
	new (value?: any): BasicNoOvertaking;
	(): any;
	(value: any): any;
	prototype: BasicNoOvertaking;
}
interface Condition
{
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var Condition:
{
	new (value?: any): Condition;
	(): any;
	(value: any): any;
	prototype: Condition;
}
interface ShortConstructionWarningImpl
{
	getConditionType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var ShortConstructionWarningImpl:
{
	new (value?: any): ShortConstructionWarningImpl;
	(): any;
	(value: any): any;
	prototype: ShortConstructionWarningImpl;
}
interface RemoveViaAreaPoiLinkUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveViaAreaPoiLinkUoW:
{
	new (value?: any): RemoveViaAreaPoiLinkUoW;
	(): any;
	(value: any): any;
	prototype: RemoveViaAreaPoiLinkUoW;
}
interface UpdateKernelsUoW
{
	toString(): string;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateKernelsUoW:
{
	new (value?: any): UpdateKernelsUoW;
	(): any;
	(value: any): any;
	prototype: UpdateKernelsUoW;
}
interface AddMatchingRoadPointUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddMatchingRoadPointUoW:
{
	new (value?: any): AddMatchingRoadPointUoW;
	(): any;
	(value: any): any;
	prototype: AddMatchingRoadPointUoW;
}
interface BasicFeaturePointAbstr
{
	accept(arg0: KernelVisitor): void;
	setState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeatureType(): number;
	getLinkId(): number;
	setFeaturePointState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	calcPercentFromRef(): double;
	allComponents(): Set;
	link(): Link;
	getPoint(): GeoPoint;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	compositeKernelType(): CompositeKernelType;
}
declare var BasicFeaturePointAbstr:
{
	new (value?: any): BasicFeaturePointAbstr;
	(): any;
	(value: any): any;
	prototype: BasicFeaturePointAbstr;
}
interface CarPoolUtil
{
	minPassengers(arg0: ConditionKernel): number;
	getConditionType(): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CarPoolUtil:
{
	new (value?: any): CarPoolUtil;
	(): any;
	(value: any): any;
	prototype: CarPoolUtil;
}
interface CopyNavLaneAttributesCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyNavLaneAttributesCompositeUoW:
{
	new (value?: any): CopyNavLaneAttributesCompositeUoW;
	(): any;
	(value: any): any;
	prototype: CopyNavLaneAttributesCompositeUoW;
}
interface MapObjectVisitor
{
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapObjectVisitor:
{
	new (value?: any): MapObjectVisitor;
	(): any;
	(value: any): any;
	prototype: MapObjectVisitor;
}
interface PostalAreaZone
{
	getPostalAreaId(): number;
	getZoneId(): number;
	getZone(): Zone;
	getPostalArea(): PostalArea;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PostalAreaZone:
{
	new (value?: any): PostalAreaZone;
	(): any;
	(value: any): any;
	prototype: PostalAreaZone;
}
interface MapContextTransliterationMetadataSupplier
{
	equals(arg0: any): boolean;
	getMappings(): Iterator;
	getNonCasedLangsList(): List;
	isLastSuppliedMetadataStillCorrect(): boolean;
	toString(): string;
	getClass(): Class;
}
declare var MapContextTransliterationMetadataSupplier:
{
	new (value?: any): MapContextTransliterationMetadataSupplier;
	(): any;
	(value: any): any;
	prototype: MapContextTransliterationMetadataSupplier;
}
interface DeltaUnvalidatedChange
{
	isPartial(): boolean;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	unvalidatedMapObjects(): List;
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUser(): string;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
}
declare var DeltaUnvalidatedChange:
{
	new (value?: any): DeltaUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: DeltaUnvalidatedChange;
}
interface AdminPlaceAbstr
{
	parent(): AdminPlace;
	getDisplayName(): string;
	country(): Country;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getParentId(): number;
	addChild(arg0: AdminPlace): void;
	removeChild(arg0: AdminPlace): void;
	printChildren(): string;
	listChildren(arg0: string): string;
	simpleFormat(): string;
	listParents(): string;
	children(): Set;
	allComponents(): Set;
	toString(): string;
	names(arg0: string): Set;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	accept(arg0: KernelVisitor): void;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	clipLevelAdminPlaces(): Set;
	centerPoint(): PointOfInterest;
	getUserCode(): string;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	getTimeZone(): string;
	getAdminLevel(): number;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
}
declare var AdminPlaceAbstr:
{
	new (value?: any): AdminPlaceAbstr;
	(): any;
	(value: any): any;
	prototype: AdminPlaceAbstr;
}
interface RemoveAnnotationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveAnnotationUoW:
{
	new (value?: any): RemoveAnnotationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveAnnotationUoW;
}
interface RoadPointUtility
{
	reconcileRoutingProperties(arg0: FlatRoadPoint, arg1: GeoEdge, arg2: ReconcileMessage): void;
	matchingPOIs(arg0: RoadPoint, arg1: MapContext): Set;
	poiMatchesRoadPoint(arg0: PointOfInterest, arg1: RoadPoint, arg2: MapContext): boolean;
	doesPoiCountrySupportEstimatedPoints(arg0: PointOfInterestKernel, arg1: MapContext): boolean;
	getNewRoutingPoint(arg0: GeoPoint, arg1: GeoPoint, arg2: GeoPoint, arg3: GeoPoint): GeoPoint;
	geoSideToStreetSide(arg0: number): string;
	poiDeltaRequiresNewPvid(arg0: Delta, arg1: Metadata): boolean;
	poiRequiresRoadPoint(arg0: PointOfInterestKernel, arg1: MapContext): boolean;
	matchingRoadPoints(arg0: PointOfInterest, arg1: MapContext): Set;
	makeMatchingRoadPoint(arg0: PointOfInterest, arg1: MapContext): FlatRoadPoint;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var RoadPointUtility:
{
	new (value?: any): RoadPointUtility;
	(): any;
	(value: any): any;
	prototype: RoadPointUtility;
}
interface ReconcileMessage
{
	values(): ReconcileMessage;
	valueOf(arg0: string): ReconcileMessage;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	compareTo(arg0: any): number;
	compareTo(arg0: Enum): number;
	valueOf(arg0: Class, arg1: string): Enum;
	getDeclaringClass(): Class;
	ordinal(): number;
	getClass(): Class;
}
declare var ReconcileMessage:
{
	new (value?: any): ReconcileMessage;
	(): any;
	(value: any): any;
	prototype: ReconcileMessage;
}
interface AddLinkCompositeUoW
{
	toString(): string;
	id(): number;
	setIsSourceRailRoadFeature(arg0: boolean): void;
	setIsSourceWaterFeature(arg0: boolean): void;
	setLinearCartoFeatureKernels(arg0: Map): void;
	setLinearCartoFeatureCIKernels(arg0: Map): void;
	setPolyCartoFeatureExpIncl(arg0: Map): void;
	setLinearCartoFeatureCISrcKernels(arg0: Map): void;
	setPolyCartoFaceCIKernels(arg0: Map): void;
	setPolyCartoFaceCISrcKernels(arg0: Map): void;
	setFaceKernels(arg0: Map): void;
	setFaceIdMap(arg0: Map): void;
	setCartoFeatureIdMap(arg0: Map): void;
	setNavLanes(arg0: List): void;
	setMapEdgeId(arg0: number): void;
	setPolyNameSource(arg0: number): void;
	setDefaults(arg0: LinkKernel): void;
	setUpdateGeoSourceCode(arg0: boolean): void;
	setRoadLinkKernels(arg0: List): void;
	setRoadLinkKernels(arg0: List, arg1: List): void;
	setUpdateDirectionOfTravel(arg0: boolean): void;
	setStartIsReference(arg0: boolean): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddLinkCompositeUoW:
{
	new (value?: any): AddLinkCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddLinkCompositeUoW;
}
interface LaneTraversalConditionUtil
{
	isIntermediate(arg0: NavLink): boolean;
	getConditionType(): number;
	orientedSource(arg0: LaneTraversalCondition): OrientedNavLink;
	destLanes(arg0: LaneTraversalCondition): number;
	sourceLanes(arg0: LaneTraversalCondition): number;
	orientedDest(arg0: LaneTraversalCondition): OrientedNavLink;
	connectionMatrix(arg0: LaneTraversalCondition): LaneConnectionMatrix;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LaneTraversalConditionUtil:
{
	new (value?: any): LaneTraversalConditionUtil;
	(): any;
	(value: any): any;
	prototype: LaneTraversalConditionUtil;
}
interface LaneTraversalCondition
{
	orientedSource(): OrientedNavLink;
	destLanes(): number;
	sourceLanes(): number;
	orientedDest(): OrientedNavLink;
	connectionMatrix(): LaneConnectionMatrix;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	appliesToLane(arg0: number, arg1: number): boolean;
	hasLaneInfo(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var LaneTraversalCondition:
{
	new (value?: any): LaneTraversalCondition;
	(): any;
	(value: any): any;
	prototype: LaneTraversalCondition;
}
interface LaneConnectionMatrix
{
	equals(arg0: LaneConnectionMatrix): boolean;
	toString(): string;
	maxSourceLane(): number;
	maxDestLane(): number;
	isLaneConnectivityInvalid(arg0: number, arg1: number): boolean;
	connected(arg0: number, arg1: number): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var LaneConnectionMatrix:
{
	new (value?: any): LaneConnectionMatrix;
	(): any;
	(value: any): any;
	prototype: LaneConnectionMatrix;
}
interface TransportSpecialSpeedSituationUtil
{
	getConditionType(): number;
	getWeatherType(arg0: ConditionKernel): WeatherType;
	getWeightDependentValue(arg0: ConditionKernel): number;
	getDirectionType(arg0: ConditionKernel): DirectionType;
	getSpeedSituationType(arg0: ConditionKernel): SpeedSituationType;
	getSpeedLimitValue(arg0: ConditionKernel): number;
	getHazardousMaterialType(arg0: ConditionKernel): HazardousMaterialType;
	getTrailerType(arg0: ConditionKernel): TrailerType;
	getTimeOverrideType(arg0: ConditionKernel): TimeOverrideType;
	getSpeedLimitType(arg0: ConditionKernel): SpeedLimitType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TransportSpecialSpeedSituationUtil:
{
	new (value?: any): TransportSpecialSpeedSituationUtil;
	(): any;
	(value: any): any;
	prototype: TransportSpecialSpeedSituationUtil;
}
interface BasicIdUpdater
{
	versionableCollection(): MapContext;
	visitMapObjectAssociationKernel(arg0: MapObjectAssociationKernel): void;
	visitConditionKernel(arg0: ConditionKernel): void;
	visitNavStrandKernel(arg0: NavStrandKernel): void;
	visitNavLinkKernel(arg0: NavLinkKernel): void;
	visitLinkKernel(arg0: LinkKernel): void;
	visitNodeKernel(arg0: NodeKernel): void;
	visitFaceKernel(arg0: FaceKernel): void;
	visitPoiCartoKernel(arg0: PoiCartoKernel): void;
	visitFaceLinkKernel(arg0: FaceLinkKernel): void;
	visitAdminPlaceKernel(arg0: AdminPlaceKernel): void;
	visitCartoFeatureKernel(arg0: CartoFeatureKernel): void;
	visitCountryKernel(arg0: CountryKernel): void;
	visitSignKernel(arg0: SignKernel): void;
	visitNavNodeKernel(arg0: NavNodeKernel): void;
	visitRoadLinkKernel(arg0: RoadLinkKernel): void;
	visitPointOfInterestKernel(arg0: PointOfInterestKernel): void;
	visitCompositeRoadFeatureKernel(arg0: CompositeRoadFeatureKernel): void;
	visitStreetTypeKernel(arg0: StreetTypeKernel): void;
	visitRuleInfoKernel(arg0: RuleInfoKernel): void;
	visitPostalAreaKernel(arg0: PostalAreaKernel): void;
	visitZoneKernel(arg0: ZoneKernel): void;
	visitValidationExceptionKernel(arg0: ValidationExceptionKernel): void;
	visitComboKernel(arg0: ComboKernel): void;
	visitDomainKernel(arg0: DomainKernel): void;
	visitDomainComboKernel(arg0: DomainComboKernel): void;
	visitRoadNameKernel(arg0: RoadNameKernel): void;
	visitCartoLinkKernel(arg0: CartoLinkKernel): void;
	visitCartoFaceKernel(arg0: CartoFaceKernel): void;
	visitRoadPointKernel(arg0: RoadPointKernel): void;
	visitPostalAreaAdminPlaceKernel(arg0: PostalAreaAdminPlaceKernel): void;
	visitPostalAreaZoneKernel(arg0: PostalAreaZoneKernel): void;
	visitZoneAdminPlaceKernel(arg0: ZoneAdminPlaceKernel): void;
	visitPoiAssocKernel(arg0: PoiAssocKernel): void;
	visitFeaturePointKernel(arg0: FeaturePointKernel): void;
	visitAnnotationKernel(arg0: AnnotationKernel): void;
	visitNavLaneKernel(arg0: NavLaneKernel): void;
	visitLaneStrandKernel(arg0: LaneStrandKernel): void;
	visitUVCKernel(arg0: UnvalidatedChangeKernel): void;
	visitViaAreaKernel(arg0: ViaAreaKernel): void;
	visitVirtualConnectionKernel(arg0: VirtualConnectionKernel): void;
	visitViaAreaPoiLinkKernel(arg0: ViaAreaPoiLinkKernel): void;
	visitViaAreaRLLinkKernel(arg0: ViaAreaRLLinkKernel): void;
	visitTopologySegmentKernel(arg0: TopologySegmentKernel): void;
	updateId(arg0: number, arg1: number): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BasicIdUpdater:
{
	new (value?: any): BasicIdUpdater;
	(): any;
	(value: any): any;
	prototype: BasicIdUpdater;
}
interface NaturalGuidanceFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NaturalGuidanceFilter:
{
	new (value?: any): NaturalGuidanceFilter;
	(): any;
	(value: any): any;
	prototype: NaturalGuidanceFilter;
}
interface DateTimeMask
{
	type(): string;
	isDateIntervalMask(): boolean;
	isDayMask(): boolean;
	timeInterval(): TimeInterval;
	isExternalDateMask(): boolean;
	indicatesExcludeDate(): boolean;
	indicatesFromEnd(): boolean;
}
declare var DateTimeMask:
{
	new (value?: any): DateTimeMask;
	(): any;
	(value: any): any;
	prototype: DateTimeMask;
}
interface AddViaAreaToPoiAssociationUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddViaAreaToPoiAssociationUoW:
{
	new (value?: any): AddViaAreaToPoiAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddViaAreaToPoiAssociationUoW;
}
interface AddRoadLinkUoW
{
	toString(): string;
	id(): number;
	named(): boolean;
	setRoadLink(arg0: RoadLinkKernel): void;
	setRoadName(arg0: RoadNameKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddRoadLinkUoW:
{
	new (value?: any): AddRoadLinkUoW;
	(): any;
	(value: any): any;
	prototype: AddRoadLinkUoW;
}
interface TrafficSignUtil
{
	getConditionType(): number;
	getWeatherType(arg0: ConditionKernel): WeatherType;
	signType(arg0: ConditionKernel): number;
	preWarning(arg0: ConditionKernel): Map;
	duration(arg0: ConditionKernel): Map;
	validityTime(arg0: ConditionKernel): Map;
	generalWarningSignType(arg0: ConditionKernel): string;
	signValue(arg0: ConditionKernel): Map;
	applicableVehiclesMask(arg0: ConditionKernel): number;
	naturalGuidanceImportance(arg0: ConditionKernel): number;
	deepModTextCopy(arg0: FlatConditionModifier): Map;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TrafficSignUtil:
{
	new (value?: any): TrafficSignUtil;
	(): any;
	(value: any): any;
	prototype: TrafficSignUtil;
}
interface RemoveNavLaneUoW
{
	toString(): string;
	id(): number;
	setNavLane(arg0: NavLaneKernel, arg1: Map): void;
	setNavLane(arg0: NavLaneKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveNavLaneUoW:
{
	new (value?: any): RemoveNavLaneUoW;
	(): any;
	(value: any): any;
	prototype: RemoveNavLaneUoW;
}
interface NodeImpl
{
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapComponentVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setPoint(arg0: GeoPoint): void;
	setState(arg0: NodeKernel): void;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	isMapEdge(): boolean;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getExtendedAttributes(): Set;
	links(): List;
	makeFlat(): FlatNode;
	makeFlat(): FlatKernel;
	getPoint(): GeoPoint;
	addLink(arg0: Link): void;
	isAligned(): boolean;
	isRefNode(arg0: Node): boolean;
	isReference(arg0: Link): boolean;
	removeLink(arg0: Link): void;
	getNodePvid(): number;
	getMapEdgeId(): number;
	getNodeElevation(): NodeElevation;
	toString(): string;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var NodeImpl:
{
	new (value?: any): NodeImpl;
	(): any;
	(value: any): any;
	prototype: NodeImpl;
}
interface BasicNaturalGuidanceLinkAssociationAbstr
{
	isValidUnnamed(): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	getFeatureType(): number;
	getNames(): Set;
	getManeuverPoints(): Set;
	link(): Link;
	accept(arg0: KernelVisitor): void;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	dateTimeMasks(): List;
	getManeuverPointAssociations(): Set;
}
declare var BasicNaturalGuidanceLinkAssociationAbstr:
{
	new (value?: any): BasicNaturalGuidanceLinkAssociationAbstr;
	(): any;
	(value: any): any;
	prototype: BasicNaturalGuidanceLinkAssociationAbstr;
}
interface PublishedAlignedNodeExtension
{
	index(arg0: MapObject): void;
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	isEnabled(): boolean;
	setEnabled(arg0: boolean): void;
	extender(): MapContextExtender;
	unindex(arg0: MapObject): void;
	mapContext(): MapContext;
	isPublishedAligned(arg0: Node): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PublishedAlignedNodeExtension:
{
	new (value?: any): PublishedAlignedNodeExtension;
	(): any;
	(value: any): any;
	prototype: PublishedAlignedNodeExtension;
}
interface CrfExtendedLaneUtil
{
	isValidUnnamed(arg0: CompositeRoadFeatureKernel): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CrfExtendedLaneUtil:
{
	new (value?: any): CrfExtendedLaneUtil;
	(): any;
	(value: any): any;
	prototype: CrfExtendedLaneUtil;
}
interface BasicViaAreaToRoadLinkAssociation
{
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	isPartial(): boolean;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	roadLink(): RoadLink;
	viaArea(): ViaArea;
	getViaAreaId(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	associationLinks(): Set;
	makeFlat(): FlatKernel;
	getRoadLinkId(): number;
	accept(arg0: KernelVisitor): void;
	getMissingIds(): Set;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicViaAreaToRoadLinkAssociation:
{
	new (value?: any): BasicViaAreaToRoadLinkAssociation;
	(): any;
	(value: any): any;
	prototype: BasicViaAreaToRoadLinkAssociation;
}
interface DayMask
{
	contains(arg0: number): boolean;
	dateValue2(): string;
	type(): string;
	isDateIntervalMask(): boolean;
	isDayMask(): boolean;
	timeInterval(): TimeInterval;
	isExternalDateMask(): boolean;
	indicatesExcludeDate(): boolean;
	indicatesFromEnd(): boolean;
}
declare var DayMask:
{
	new (value?: any): DayMask;
	(): any;
	(value: any): any;
	prototype: DayMask;
}
interface Annotation
{
	getAdminPlace(): AdminPlace;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getAttachedFiles(): Set;
	getAdminPlaceId(): number;
	getGeoPoint(): GeoPoint;
	getDisplayClass(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
}
declare var Annotation:
{
	new (value?: any): Annotation;
	(): any;
	(value: any): any;
	prototype: Annotation;
}
interface MapAssociation
{
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var MapAssociation:
{
	new (value?: any): MapAssociation;
	(): any;
	(value: any): any;
	prototype: MapAssociation;
}
interface FaceIntersecterSweep
{
	setOperand(arg0: Face): void;
	intersect(): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FaceIntersecterSweep:
{
	new (value?: any): FaceIntersecterSweep;
	(): any;
	(value: any): any;
	prototype: FaceIntersecterSweep;
}
interface CopyNavLaneUoW
{
	toString(): string;
	id(): number;
	setNavLane(arg0: NavLaneKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyNavLaneUoW:
{
	new (value?: any): CopyNavLaneUoW;
	(): any;
	(value: any): any;
	prototype: CopyNavLaneUoW;
}
interface ConditionUtil
{
	dateTimeMasks(arg0: Condition): List;
	modifierByType(arg0: Set, arg1: number): FlatConditionModifier;
	getFeatureType(arg0: Condition): number;
	valueByModifierType(arg0: Set, arg1: number): string;
	allComponents(arg0: Condition): Set;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ConditionUtil:
{
	new (value?: any): ConditionUtil;
	(): any;
	(value: any): any;
	prototype: ConditionUtil;
}
interface RemoveCFLinkCompositeUoW
{
	toString(): string;
	setUseAlternateFaceGenerator(arg0: boolean): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveCFLinkCompositeUoW:
{
	new (value?: any): RemoveCFLinkCompositeUoW;
	(): any;
	(value: any): any;
	prototype: RemoveCFLinkCompositeUoW;
}
interface MapObject
{
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var MapObject:
{
	new (value?: any): MapObject;
	(): any;
	(value: any): any;
	prototype: MapObject;
}
interface ParkingAttributesFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ParkingAttributesFilter:
{
	new (value?: any): ParkingAttributesFilter;
	(): any;
	(value: any): any;
	prototype: ParkingAttributesFilter;
}
interface FaceUtil
{
	area(arg0: Face, arg1: boolean, arg2: NonKernelFace): double;
	getOrientedLinkIds(arg0: Face): Set;
	enclaves(arg0: Face, arg1: boolean, arg2: NonKernelFace): number;
	exteriorBoundary(arg0: Face, arg1: boolean, arg2: NonKernelFace): List;
	enclaveBoundary(arg0: Face, arg1: boolean, arg2: NonKernelFace, arg3: number): List;
	polygon(arg0: Face, arg1: boolean, arg2: NonKernelFace): GeoPolygon;
	boundaryComponents(arg0: Face, arg1: boolean, arg2: NonKernelFace): List;
	boundaryFragments(arg0: Face, arg1: boolean, arg2: NonKernelFace): List;
	closedBoundaryComponents(arg0: Face, arg1: boolean, arg2: NonKernelFace): List;
	isBroken(arg0: Face, arg1: boolean, arg2: NonKernelFace): boolean;
	isComplete(arg0: Face, arg1: boolean, arg2: NonKernelFace): boolean;
	hasPartialFaceLink(arg0: Face): boolean;
	cartoFeatures(arg0: Face): Set;
	nonKernelState(arg0: Face, arg1: boolean, arg2: NonKernelFace): NonKernelFace;
	boundaryAsPoints(arg0: Face, arg1: boolean, arg2: NonKernelFace): List;
	faceLinks(arg0: Face): Set;
	getLinkIds(arg0: Face): Set;
	mbr(arg0: Face, arg1: boolean, arg2: NonKernelFace): GeoRectangle;
	hasFeatures(arg0: Face, arg1: boolean, arg2: NonKernelFace): boolean;
	hasFeature(arg0: Face, arg1: boolean, arg2: NonKernelFace, arg3: MapFeature): boolean;
	boundary(arg0: Face, arg1: boolean, arg2: NonKernelFace): List;
	geometry(arg0: Face, arg1: boolean, arg2: NonKernelFace): GeoShape;
	onAdminPlaceBorder(arg0: Face, arg1: boolean, arg2: NonKernelFace): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FaceUtil:
{
	new (value?: any): FaceUtil;
	(): any;
	(value: any): any;
	prototype: FaceUtil;
}
interface ViaAreaToRoadLinkAssociation
{
	roadLink(): RoadLink;
	getRoadLinkId(): number;
	getViaAreaId(): number;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	viaArea(): ViaArea;
	associationLinks(): Set;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ViaAreaToRoadLinkAssociation:
{
	new (value?: any): ViaAreaToRoadLinkAssociation;
	(): any;
	(value: any): any;
	prototype: ViaAreaToRoadLinkAssociation;
}
interface VirtualConnection
{
	refNode(): Node;
	nrefNode(): Node;
	adminPlace(): AdminPlace;
	getDataSource(): number;
	getAdminPlaceId(): number;
	getRefNodeId(): number;
	getNRefNodeId(): number;
	getTimeOverride(): number;
	getConnectionType(): number;
	getStairsTraversal(): number;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
}
declare var VirtualConnection:
{
	new (value?: any): VirtualConnection;
	(): any;
	(value: any): any;
	prototype: VirtualConnection;
}
interface DayOfMonthOfYear
{
	toString(): string;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	dayOfMonth(): DayOfMonth;
	monthOfYear(): MonthOfYear;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DayOfMonthOfYear:
{
	new (value?: any): DayOfMonthOfYear;
	(): any;
	(value: any): any;
	prototype: DayOfMonthOfYear;
}
interface DayOfMonth
{
	toString(): string;
	day(): number;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	isValidDayOfMonth(arg0: number): boolean;
	isValidDayOfMonth(arg0: number, arg1: number): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DayOfMonth:
{
	new (value?: any): DayOfMonth;
	(): any;
	(value: any): any;
	prototype: DayOfMonth;
}
interface FilterFactory
{
	createFilter(arg0: FilterSpec, arg1: MapContext): MapContextFilter;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FilterFactory:
{
	new (value?: any): FilterFactory;
	(): any;
	(value: any): any;
	prototype: FilterFactory;
}
interface FilterSpec
{
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FilterSpec:
{
	new (value?: any): FilterSpec;
	(): any;
	(value: any): any;
	prototype: FilterSpec;
}
interface ZoneAdminPlace
{
	getAdminPlace(): AdminPlace;
	getAdminPlaceId(): number;
	getZoneId(): number;
	getZone(): Zone;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var ZoneAdminPlace:
{
	new (value?: any): ZoneAdminPlace;
	(): any;
	(value: any): any;
	prototype: ZoneAdminPlace;
}
interface CopySplitALinkUoW
{
	toString(): string;
	newNode(): Node;
	getDestinationNavLinkForShortestPath(arg0: List): NavLink;
	getShortestRoutingPath(arg0: MapContext, arg1: Set, arg2: Set): NavLinkRoute;
	isLaneTraversalOrientedFromRef(): boolean;
	isLaneTraversalOrientedTowardRef(): boolean;
	setFromNavLinkOrientation(arg0: NavLink, arg1: NavStrand): void;
	setToNavLinkOrientation(arg0: NavLink, arg1: NavStrand): void;
	setCreateNewNode(arg0: boolean): void;
	duplicateUsingLink(arg0: MapContext): SplitALinkUoW;
	getSplitLinkIds(): Map;
	clearSplitLinkIds(): void;
	newLinks(arg0: Array<Link>): boolean;
	newLinks(): List;
	setPoint(arg0: GeoPoint): void;
	setGeometrySource(arg0: number): void;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopySplitALinkUoW:
{
	new (value?: any): CopySplitALinkUoW;
	(): any;
	(value: any): any;
	prototype: CopySplitALinkUoW;
}
interface BasicNamedFeaturePointOnNavLinkAbstr
{
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	directionOfTravel(): DirectionOfTravel;
	accept(arg0: KernelVisitor): void;
	setState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeatureType(): number;
	getLinkId(): number;
	setFeaturePointState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	calcPercentFromRef(): double;
	allComponents(): Set;
	link(): Link;
	getPoint(): GeoPoint;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	compositeKernelType(): CompositeKernelType;
}
declare var BasicNamedFeaturePointOnNavLinkAbstr:
{
	new (value?: any): BasicNamedFeaturePointOnNavLinkAbstr;
	(): any;
	(value: any): any;
	prototype: BasicNamedFeaturePointOnNavLinkAbstr;
}
interface BasicAdder
{
	add(arg0: Kernel): void;
	structuralIntegrity(arg0: string, arg1: boolean, arg2: Kernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BasicAdder:
{
	new (value?: any): BasicAdder;
	(): any;
	(value: any): any;
	prototype: BasicAdder;
}
interface SpatialIndexExtension
{
	index(arg0: MapObject): void;
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	isEnabled(): boolean;
	setEnabled(arg0: boolean): void;
	extender(): MapContextExtender;
	findLinks(arg0: GeoRectangle): Set;
	filterLinks(arg0: GeoRectangle, arg1: Set, arg2: double): Set;
	findFaces(arg0: GeoRectangle): Set;
	getIntersectedFaces(arg0: GeoRectangle): Set;
	findNodes(arg0: GeoRectangle): Set;
	unindex(arg0: MapObject): void;
	unindexFace(arg0: FaceLink): void;
	mapContext(): MapContext;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SpatialIndexExtension:
{
	new (value?: any): SpatialIndexExtension;
	(): any;
	(value: any): any;
	prototype: SpatialIndexExtension;
}
interface MoveFaceUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var MoveFaceUoW:
{
	new (value?: any): MoveFaceUoW;
	(): any;
	(value: any): any;
	prototype: MoveFaceUoW;
}
interface SignPart
{
	toString(): string;
	addRoute(arg0: RouteEntry): void;
	addText(arg0: SignText): void;
	textGroup(): List;
	routeGroup(): List;
	removeText(arg0: SignText): void;
	removeRoute(arg0: RouteEntry): void;
	textGroupAsString(): string;
	routeGroupAsString(): string;
	destLink(): Link;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var SignPart:
{
	new (value?: any): SignPart;
	(): any;
	(value: any): any;
	prototype: SignPart;
}
interface RouteEntry
{
	toString(): string;
	directionCode(): number;
	type(): string;
	text(): string;
	languageCode(): string;
	isBranch(): boolean;
	isToward(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RouteEntry:
{
	new (value?: any): RouteEntry;
	(): any;
	(value: any): any;
	prototype: RouteEntry;
}
interface SignText
{
	type(): string;
	toString(): string;
	text(): string;
	languageCode(): string;
	isBranch(): boolean;
	isToward(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var SignText:
{
	new (value?: any): SignText;
	(): any;
	(value: any): any;
	prototype: SignText;
}
interface AddAdminPlaceUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddAdminPlaceUoW:
{
	new (value?: any): AddAdminPlaceUoW;
	(): any;
	(value: any): any;
	prototype: AddAdminPlaceUoW;
}
interface TrafficControlFilter
{
	filter(arg0: MapObject): UnitOfWork;
	isYieldSignCondition(arg0: MapObject): boolean;
	description(): string;
	isStopSignCondition(arg0: MapObject): boolean;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TrafficControlFilter:
{
	new (value?: any): TrafficControlFilter;
	(): any;
	(value: any): any;
	prototype: TrafficControlFilter;
}
interface FaceTruncator
{
	canTruncate(arg0: Face): boolean;
	truncation(arg0: Face): List;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var FaceTruncator:
{
	new (value?: any): FaceTruncator;
	(): any;
	(value: any): any;
	prototype: FaceTruncator;
}
interface NavLane
{
	navLink(): NavLink;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): LaneType;
	getNavLinkId(): number;
	getHeight(): number;
	getNavLanePvid(): number;
	getCenterDividerMarker(): DividerMarkerType;
	getLaneDirection(): LaneDirectionType;
	getLaneNumber(): number;
	makeFlat(): FlatNavLane;
	getAccessBits(): number;
	getDirectionCategoryMarker(): EnumSet;
	getWidth(): number;
	getSpeed(): number;
	getLaneDividerMarker(): DividerMarkerType;
	isAccessAutomobiles(): boolean;
	isAccessBuses(): boolean;
	isAccessCarpools(): boolean;
	isAccessDelivery(): boolean;
	isAccessEmergencyVehicles(): boolean;
	isAccessPedestrians(): boolean;
	isAccessTaxis(): boolean;
	isAccessThroughTraffic(): boolean;
	isAccessTrucks(): boolean;
	getLaneFormingEnding(): LaneFormingEnding;
	isAccessMotorcycles(): boolean;
	getLaneCrossingRestrictionType(): LaneCrossingRestrictionType;
	getLaneDirectionOverrideType(): LaneDirectionOverrideType;
}
declare var NavLane:
{
	new (value?: any): NavLane;
	(): any;
	(value: any): any;
	prototype: NavLane;
}
interface Adder
{
	add(arg0: Kernel): void;
}
declare var Adder:
{
	new (value?: any): Adder;
	(): any;
	(value: any): any;
	prototype: Adder;
}
interface BlankNavLanesFilter
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BlankNavLanesFilter:
{
	new (value?: any): BlankNavLanesFilter;
	(): any;
	(value: any): any;
	prototype: BlankNavLanesFilter;
}
interface AdminPlace
{
	parent(): AdminPlace;
	getDisplayName(): string;
	country(): Country;
	clipLevelAdminPlaces(): Set;
	centerPoint(): PointOfInterest;
	getUserCode(): string;
	listChildren(arg0: string): string;
	simpleFormat(): string;
	listParents(): string;
	children(): Set;
	getNamedPlacePvid(): number;
	getGovernmentCode(): number;
	isDummyAdmin(): boolean;
	getAdminShort(): number;
	getParentId(): number;
	getAdminCode(): string;
	getDstObserved(): string;
	getDstStartDay(): number;
	getDstStartWeekday(): number;
	getDstStartMonth(): number;
	getDstStartTime(): number;
	getDstEndDay(): number;
	getDstEndWeekday(): number;
	getDstEndMonth(): number;
	getDstEndTime(): number;
	getRegions(): Set;
	getTmcAreaCodes(): Map;
	getAdminPlaceDetails(): Set;
	getTimeZone(): string;
	getAdminLevel(): number;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	boundary(): CartoFeature;
	hasCompletePolygonBoundary(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
}
declare var AdminPlace:
{
	new (value?: any): AdminPlace;
	(): any;
	(value: any): any;
	prototype: AdminPlace;
}
interface UpdateNavLaneUow
{
	toString(): string;
	id(): number;
	setLane(arg0: NavLaneKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateNavLaneUow:
{
	new (value?: any): UpdateNavLaneUow;
	(): any;
	(value: any): any;
	prototype: UpdateNavLaneUow;
}
interface CoverageIndicatorFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CoverageIndicatorFilter:
{
	new (value?: any): CoverageIndicatorFilter;
	(): any;
	(value: any): any;
	prototype: CoverageIndicatorFilter;
}
interface UnvalidatedMapObjectPart
{
	getMapObjectId(): number;
	getMapObjectType(): MapObjectType;
	getDeltaOperation(): DeltaOperation;
	getDeletedNeighborId(): number;
	getDeletedNeighborType(): MapObjectType;
}
declare var UnvalidatedMapObjectPart:
{
	new (value?: any): UnvalidatedMapObjectPart;
	(): any;
	(value: any): any;
	prototype: UnvalidatedMapObjectPart;
}
interface ManeuverPointFeaturePoint
{
	makeFlat(): FlatManeuverPointFeaturePoint;
	isAutoGenerated(): boolean;
	getPrepositionCodes(): Set;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	getPoint(): GeoPoint;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	directionOfTravel(): DirectionOfTravel;
	calcPercentFromRef(): double;
	link(): Link;
}
declare var ManeuverPointFeaturePoint:
{
	new (value?: any): ManeuverPointFeaturePoint;
	(): any;
	(value: any): any;
	prototype: ManeuverPointFeaturePoint;
}
interface CrfJunction
{
	navLinks(): Set;
	navNodes(): Set;
	navFeatures(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CrfJunction:
{
	new (value?: any): CrfJunction;
	(): any;
	(value: any): any;
	prototype: CrfJunction;
}
interface NavNode
{
	node(): Node;
	navLinks(): List;
	removeNavLink(arg0: NavLink): boolean;
	valence(): number;
	navlinks(): List;
	addNavLink(arg0: NavLink): void;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getNodeId(): number;
}
declare var NavNode:
{
	new (value?: any): NavNode;
	(): any;
	(value: any): any;
	prototype: NavNode;
}
interface BasicLaneTraversalCondition
{
	getConditionType(): number;
	getOldConditionModifiers(): Set;
	orientedSource(): OrientedNavLink;
	destLanes(): number;
	sourceLanes(): number;
	orientedDest(): OrientedNavLink;
	connectionMatrix(): LaneConnectionMatrix;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: number): boolean;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	hasLaneInfo(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicLaneTraversalCondition:
{
	new (value?: any): BasicLaneTraversalCondition;
	(): any;
	(value: any): any;
	prototype: BasicLaneTraversalCondition;
}
interface RemoveNavNodeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveNavNodeUoW:
{
	new (value?: any): RemoveNavNodeUoW;
	(): any;
	(value: any): any;
	prototype: RemoveNavNodeUoW;
}
interface UpdateSignUoW
{
	toString(): string;
	setSign(arg0: SignKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateSignUoW:
{
	new (value?: any): UpdateSignUoW;
	(): any;
	(value: any): any;
	prototype: UpdateSignUoW;
}
interface UnnameableMapFeatureAbstr
{
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	getFeatureType(): number;
	allComponents(): Set;
}
declare var UnnameableMapFeatureAbstr:
{
	new (value?: any): UnnameableMapFeatureAbstr;
	(): any;
	(value: any): any;
	prototype: UnnameableMapFeatureAbstr;
}
interface RestrictedDrivingManeuvreUtil
{
	isLegal(arg0: ConditionKernel): boolean;
	rdmType(arg0: ConditionKernel): number;
	timeOverride(arg0: ConditionKernel): number;
	isPhysical(arg0: ConditionKernel): boolean;
	isLogical(arg0: ConditionKernel): boolean;
	getConditionType(): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var RestrictedDrivingManeuvreUtil:
{
	new (value?: any): RestrictedDrivingManeuvreUtil;
	(): any;
	(value: any): any;
	prototype: RestrictedDrivingManeuvreUtil;
}
interface AccessCategoryConstants
{
	isValid(arg0: number): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AccessCategoryConstants:
{
	new (value?: any): AccessCategoryConstants;
	(): any;
	(value: any): any;
	prototype: AccessCategoryConstants;
}
interface PermittedDrivingManeuvreUtil
{
	isLegal(arg0: ConditionKernel): boolean;
	timeOverride(arg0: ConditionKernel): number;
	getConditionType(): number;
	pdmType(arg0: ConditionKernel): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PermittedDrivingManeuvreUtil:
{
	new (value?: any): PermittedDrivingManeuvreUtil;
	(): any;
	(value: any): any;
	prototype: PermittedDrivingManeuvreUtil;
}
interface RemoveCartoLinkUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveCartoLinkUoW:
{
	new (value?: any): RemoveCartoLinkUoW;
	(): any;
	(value: any): any;
	prototype: RemoveCartoLinkUoW;
}
interface RemoveCartoLinkAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveCartoLinkAssociationUoW:
{
	new (value?: any): RemoveCartoLinkAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveCartoLinkAssociationUoW;
}
interface BasicGuidancePointToCartoAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	guidancePointId(): number;
	cartoId(): number;
	guidancePoint(): GuidancePointFeaturePoint;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	getMissingIds(): Set;
	isPartial(): boolean;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	cartoFeature(): CartoFeature;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	makeFlat(): FlatGuidancePointToCartoAssociation;
	makeFlat(): FlatKernel;
	accept(arg0: KernelVisitor): void;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicGuidancePointToCartoAssociation:
{
	new (value?: any): BasicGuidancePointToCartoAssociation;
	(): any;
	(value: any): any;
	prototype: BasicGuidancePointToCartoAssociation;
}
interface FlatGuidancePointToCartoAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	setGuidancePointId(arg0: number): void;
	equivalent(arg0: GuidancePointToCartoAssociationKernel, arg1: GuidancePointToCartoAssociationKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	guidancePointId(): number;
	cartoId(): number;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): MapObjectAssociationType;
	setMoaState(arg0: MapObjectAssociationKernel): void;
	setCartoId(arg0: number): void;
	kernelType(): Class;
	clearMoa(): void;
	isClearedMoa(): boolean;
	makeFlat(): FlatKernel;
	makeFlat(): FlatGuidancePointToCartoAssociation;
	getDataPacketType(): DataPacketType;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setSecondMapObjectId(arg0: number): void;
	cleared(): boolean;
	setFirstMapObjectId(arg0: number): void;
	setMapObjectAssociationPvid(arg0: number): void;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatGuidancePointToCartoAssociation:
{
	new (value?: any): FlatGuidancePointToCartoAssociation;
	(): any;
	(value: any): any;
	prototype: FlatGuidancePointToCartoAssociation;
}
interface AddLaneStrandUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddLaneStrandUoW:
{
	new (value?: any): AddLaneStrandUoW;
	(): any;
	(value: any): any;
	prototype: AddLaneStrandUoW;
}
interface MoveOneCompositeUoW
{
	toString(): string;
	setGeometrySource(arg0: number): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	replicate(arg0: MapContext): UnitOfWork;
	execute(arg0: MapContext): boolean;
	getStatusMessage(): string;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var MoveOneCompositeUoW:
{
	new (value?: any): MoveOneCompositeUoW;
	(): any;
	(value: any): any;
	prototype: MoveOneCompositeUoW;
}
interface GoldPlateDeletePermissionVisitor
{
	isAllowed(): boolean;
	visitConditionKernel(arg0: ConditionKernel): void;
	getReason(): string;
	visitNavStrandKernel(arg0: NavStrandKernel): void;
	visitNavLinkKernel(arg0: NavLinkKernel): void;
	visitNodeKernel(arg0: NodeKernel): void;
	visitCartoFeatureKernel(arg0: CartoFeatureKernel): void;
	visitPointOfInterestKernel(arg0: PointOfInterestKernel): void;
	visitViaAreaKernel(arg0: ViaAreaKernel): void;
	visitMapObjectAssociationKernel(arg0: MapObjectAssociationKernel): void;
	visitLinkKernel(arg0: LinkKernel): void;
	visitFaceKernel(arg0: FaceKernel): void;
	visitPoiCartoKernel(arg0: PoiCartoKernel): void;
	visitFaceLinkKernel(arg0: FaceLinkKernel): void;
	visitAdminPlaceKernel(arg0: AdminPlaceKernel): void;
	visitCountryKernel(arg0: CountryKernel): void;
	visitSignKernel(arg0: SignKernel): void;
	visitNavNodeKernel(arg0: NavNodeKernel): void;
	visitRoadLinkKernel(arg0: RoadLinkKernel): void;
	visitCompositeRoadFeatureKernel(arg0: CompositeRoadFeatureKernel): void;
	visitStreetTypeKernel(arg0: StreetTypeKernel): void;
	visitRuleInfoKernel(arg0: RuleInfoKernel): void;
	visitPostalAreaKernel(arg0: PostalAreaKernel): void;
	visitZoneKernel(arg0: ZoneKernel): void;
	visitValidationExceptionKernel(arg0: ValidationExceptionKernel): void;
	visitComboKernel(arg0: ComboKernel): void;
	visitDomainKernel(arg0: DomainKernel): void;
	visitDomainComboKernel(arg0: DomainComboKernel): void;
	visitRoadNameKernel(arg0: RoadNameKernel): void;
	visitCartoLinkKernel(arg0: CartoLinkKernel): void;
	visitCartoFaceKernel(arg0: CartoFaceKernel): void;
	visitRoadPointKernel(arg0: RoadPointKernel): void;
	visitPostalAreaAdminPlaceKernel(arg0: PostalAreaAdminPlaceKernel): void;
	visitPostalAreaZoneKernel(arg0: PostalAreaZoneKernel): void;
	visitZoneAdminPlaceKernel(arg0: ZoneAdminPlaceKernel): void;
	visitPoiAssocKernel(arg0: PoiAssocKernel): void;
	visitFeaturePointKernel(arg0: FeaturePointKernel): void;
	visitAnnotationKernel(arg0: AnnotationKernel): void;
	visitNavLaneKernel(arg0: NavLaneKernel): void;
	visitLaneStrandKernel(arg0: LaneStrandKernel): void;
	visitUVCKernel(arg0: UnvalidatedChangeKernel): void;
	visitVirtualConnectionKernel(arg0: VirtualConnectionKernel): void;
	visitViaAreaPoiLinkKernel(arg0: ViaAreaPoiLinkKernel): void;
	visitViaAreaRLLinkKernel(arg0: ViaAreaRLLinkKernel): void;
	visitTopologySegmentKernel(arg0: TopologySegmentKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GoldPlateDeletePermissionVisitor:
{
	new (value?: any): GoldPlateDeletePermissionVisitor;
	(): any;
	(value: any): any;
	prototype: GoldPlateDeletePermissionVisitor;
}
interface GoldPlateAddPermissionVisitor
{
	visitPointOfInterestKernel(arg0: PointOfInterestKernel): void;
	visitViaAreaKernel(arg0: ViaAreaKernel): void;
	visitMapObjectAssociationKernel(arg0: MapObjectAssociationKernel): void;
	visitConditionKernel(arg0: ConditionKernel): void;
	visitNavStrandKernel(arg0: NavStrandKernel): void;
	visitNavLinkKernel(arg0: NavLinkKernel): void;
	visitLinkKernel(arg0: LinkKernel): void;
	visitNodeKernel(arg0: NodeKernel): void;
	visitFaceKernel(arg0: FaceKernel): void;
	visitPoiCartoKernel(arg0: PoiCartoKernel): void;
	visitFaceLinkKernel(arg0: FaceLinkKernel): void;
	visitAdminPlaceKernel(arg0: AdminPlaceKernel): void;
	visitCartoFeatureKernel(arg0: CartoFeatureKernel): void;
	visitCountryKernel(arg0: CountryKernel): void;
	visitSignKernel(arg0: SignKernel): void;
	visitNavNodeKernel(arg0: NavNodeKernel): void;
	visitRoadLinkKernel(arg0: RoadLinkKernel): void;
	visitCompositeRoadFeatureKernel(arg0: CompositeRoadFeatureKernel): void;
	visitStreetTypeKernel(arg0: StreetTypeKernel): void;
	visitRuleInfoKernel(arg0: RuleInfoKernel): void;
	visitPostalAreaKernel(arg0: PostalAreaKernel): void;
	visitZoneKernel(arg0: ZoneKernel): void;
	visitValidationExceptionKernel(arg0: ValidationExceptionKernel): void;
	visitComboKernel(arg0: ComboKernel): void;
	visitDomainKernel(arg0: DomainKernel): void;
	visitDomainComboKernel(arg0: DomainComboKernel): void;
	visitRoadNameKernel(arg0: RoadNameKernel): void;
	visitCartoLinkKernel(arg0: CartoLinkKernel): void;
	visitCartoFaceKernel(arg0: CartoFaceKernel): void;
	visitRoadPointKernel(arg0: RoadPointKernel): void;
	visitPostalAreaAdminPlaceKernel(arg0: PostalAreaAdminPlaceKernel): void;
	visitPostalAreaZoneKernel(arg0: PostalAreaZoneKernel): void;
	visitZoneAdminPlaceKernel(arg0: ZoneAdminPlaceKernel): void;
	visitPoiAssocKernel(arg0: PoiAssocKernel): void;
	visitFeaturePointKernel(arg0: FeaturePointKernel): void;
	visitAnnotationKernel(arg0: AnnotationKernel): void;
	visitNavLaneKernel(arg0: NavLaneKernel): void;
	visitLaneStrandKernel(arg0: LaneStrandKernel): void;
	visitUVCKernel(arg0: UnvalidatedChangeKernel): void;
	visitVirtualConnectionKernel(arg0: VirtualConnectionKernel): void;
	visitViaAreaPoiLinkKernel(arg0: ViaAreaPoiLinkKernel): void;
	visitViaAreaRLLinkKernel(arg0: ViaAreaRLLinkKernel): void;
	visitTopologySegmentKernel(arg0: TopologySegmentKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GoldPlateAddPermissionVisitor:
{
	new (value?: any): GoldPlateAddPermissionVisitor;
	(): any;
	(value: any): any;
	prototype: GoldPlateAddPermissionVisitor;
}
interface LaneHeightFilter
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LaneHeightFilter:
{
	new (value?: any): LaneHeightFilter;
	(): any;
	(value: any): any;
	prototype: LaneHeightFilter;
}
interface CopyPointOfInterestUoW
{
	toString(): string;
	id(): number;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CopyPointOfInterestUoW:
{
	new (value?: any): CopyPointOfInterestUoW;
	(): any;
	(value: any): any;
	prototype: CopyPointOfInterestUoW;
}
interface UpdatePoiCartoAssocUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdatePoiCartoAssocUoW:
{
	new (value?: any): UpdatePoiCartoAssocUoW;
	(): any;
	(value: any): any;
	prototype: UpdatePoiCartoAssocUoW;
}
interface BasicNaturalGuidanceLinkToCartoAssociation
{
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): MapObjectAssociationType;
	setMoaState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getManeuverPointAssociations(): Set;
	guidancePointToCarto(): GuidancePointToCartoAssociation;
	getValidityPeriods(): Set;
	gpCartoAssocId(): number;
	makeFlat(): FlatNaturalGuidanceLinkToCartoAssociation;
	makeFlat(): FlatKernel;
	isValidUnnamed(): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	linkId(): number;
	getFeatureType(): number;
	getNames(): Set;
	getManeuverPoints(): Set;
	link(): Link;
	accept(arg0: KernelVisitor): void;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	getMapObjectAssociationPvid(): number;
	setState(arg0: MapContext, arg1: MapObjectAssociationKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicNaturalGuidanceLinkToCartoAssociation:
{
	new (value?: any): BasicNaturalGuidanceLinkToCartoAssociation;
	(): any;
	(value: any): any;
	prototype: BasicNaturalGuidanceLinkToCartoAssociation;
}
interface FlatNaturalGuidanceLinkToCartoAssociation
{
	toString(): string;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	equivalent(arg0: NaturalGuidanceLinkToCartoAssociationKernel, arg1: NaturalGuidanceLinkToCartoAssociationKernel): boolean;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): MapObjectAssociationType;
	compositeKernelType(): CompositeKernelType;
	setMoaState(arg0: MapObjectAssociationKernel): void;
	setManeuverPointsWithEmptySet(): void;
	kernelType(): Class;
	getManeuverPointAssociations(): Set;
	getValidityPeriods(): Set;
	gpCartoAssocId(): number;
	clearMoa(): void;
	isClearedMoa(): boolean;
	setManeuverPointAssociations(arg0: Set): void;
	setGPCartoAssocId(arg0: number): void;
	setValidityPeriods(arg0: Set): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatNaturalGuidanceLinkToCartoAssociation;
	getDataPacketType(): DataPacketType;
	equivalent(arg0: NaturalGuidanceLinkAssociationKernel, arg1: NaturalGuidanceLinkAssociationKernel): boolean;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getCalculatedImp(): number;
	getDirection(): DirectionOfTravel;
	getFeatureExtent(): number;
	getGuidanceType(): GuidanceType;
	getPermanence(): NaturalGuidancePermanence;
	getRelDistance(): NaturalGuidanceRelDistance;
	getSeasonality(): NaturalGuidanceSeasonality;
	getVisibility(): NaturalGuidanceVisibility;
	setNames(arg0: Set): void;
	linkId(): number;
	setLinkId(arg0: number): void;
	getFeatureType(): number;
	getNames(): Set;
	setFeatureType(arg0: number): void;
	setCalculatedImp(arg0: number): void;
	setDirection(arg0: DirectionOfTravel): void;
	setFeatureExtent(arg0: number): void;
	setGuidanceType(arg0: GuidanceType): void;
	setPermanence(arg0: NaturalGuidancePermanence): void;
	setRelDistance(arg0: NaturalGuidanceRelDistance): void;
	setSeasonality(arg0: NaturalGuidanceSeasonality): void;
	setVisibility(arg0: NaturalGuidanceVisibility): void;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setSecondMapObjectId(arg0: number): void;
	cleared(): boolean;
	setFirstMapObjectId(arg0: number): void;
	setMapObjectAssociationPvid(arg0: number): void;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatNaturalGuidanceLinkToCartoAssociation:
{
	new (value?: any): FlatNaturalGuidanceLinkToCartoAssociation;
	(): any;
	(value: any): any;
	prototype: FlatNaturalGuidanceLinkToCartoAssociation;
}
interface CartoFeatureTypeChangeFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoFeatureTypeChangeFilter:
{
	new (value?: any): CartoFeatureTypeChangeFilter;
	(): any;
	(value: any): any;
	prototype: CartoFeatureTypeChangeFilter;
}
interface StackedComponentInitialAdder
{
	setIsFirstPass(arg0: boolean): void;
	visit(arg0: CartoLink): void;
	visit(arg0: ViaAreaPoiLink): void;
	visit(arg0: ViaAreaRLLink): void;
	visit(arg0: Link): void;
	visit(arg0: Node): void;
	visit(arg0: Face): void;
	visit(arg0: FaceLink): void;
	visit(arg0: CartoFace): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var StackedComponentInitialAdder:
{
	new (value?: any): StackedComponentInitialAdder;
	(): any;
	(value: any): any;
	prototype: StackedComponentInitialAdder;
}
interface TransportAccessRestrictionUtil
{
	getConditionType(): number;
	getRestrictionType(arg0: ConditionKernel): RestrictionType;
	getWeatherType(arg0: ConditionKernel): WeatherType;
	getDirectionClosureType(arg0: ConditionKernel): DirectionClosureType;
	getPhysicalStructureType(arg0: ConditionKernel): PhysicalStructureType;
	getRestrictionValue(arg0: ConditionKernel): number;
	getHazmatPermitType(arg0: ConditionKernel): HazmatPermitType;
	getHazardousMaterialType(arg0: ConditionKernel): HazardousMaterialType;
	getTrailerType(arg0: ConditionKernel): TrailerType;
	getTimeOverrideType(arg0: ConditionKernel): TimeOverrideType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TransportAccessRestrictionUtil:
{
	new (value?: any): TransportAccessRestrictionUtil;
	(): any;
	(value: any): any;
	prototype: TransportAccessRestrictionUtil;
}
interface ReadOnlyMapContext
{
	add(arg0: Kernel): void;
	add(arg0: MapObject): void;
	remove(arg0: number): void;
	update(arg0: MapObject): void;
	update(arg0: Kernel): void;
	addZone(arg0: Zone): void;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	hasCustomContext(arg0: Class): boolean;
	extensions(): Set;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	findFeaturePoint(arg0: number): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: number): PointOfInterest;
	findPoi(arg0: RoadLink): Set;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: Node): boolean;
	isIncompleteNode(arg0: NavNode): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavLink): Set;
	findCrfs(arg0: NavNode): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointIterator(): Iterator;
	featurePointSize(arg0: FeaturePointType): number;
	featurePointSize(): number;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	mapObjectAssociationSize(): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ReadOnlyMapContext:
{
	new (value?: any): ReadOnlyMapContext;
	(): any;
	(value: any): any;
	prototype: ReadOnlyMapContext;
}
interface MapObjectDependentSupport
{
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
}
declare var MapObjectDependentSupport:
{
	new (value?: any): MapObjectDependentSupport;
	(): any;
	(value: any): any;
	prototype: MapObjectDependentSupport;
}
interface POITextUtility
{
	getAdminPlace(arg0: Link): AdminPlace;
	comparePOITextSets(arg0: Set, arg1: Set): boolean;
	validateFullHouseNumber(arg0: List): boolean;
	getComparator(arg0: AdminPlace): POITextComparator;
	getComparator(arg0: string): POITextComparator;
	getComparator(arg0: Country): POITextComparator;
	getComparator(arg0: Link): POITextComparator;
	getComparator(): POITextComparator;
	getParseAddrComparator(): POIParseTextComparator;
	getParseAddrComparator(arg0: string): POIParseTextComparator;
	isCountryBoundary(arg0: AdminPlace, arg1: AdminPlace): boolean;
	getTransliteratedLanguageCode(arg0: FlatPointOfInterestText): string;
	getMapOfPOITextAndLangCode(arg0: Set): Map;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var POITextUtility:
{
	new (value?: any): POITextUtility;
	(): any;
	(value: any): any;
	prototype: POITextUtility;
}
interface POITextComparator
{
	compare(arg0: any, arg1: any): number;
	compare(arg0: FlatPointOfInterestText, arg1: FlatPointOfInterestText): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	reversed(): Comparator;
	thenComparing(arg0: Function): Comparator;
	thenComparing(arg0: Function, arg1: Comparator): Comparator;
	thenComparing(arg0: Comparator): Comparator;
	thenComparingInt(arg0: ToIntFunction): Comparator;
	thenComparingLong(arg0: ToLongFunction): Comparator;
	thenComparingDouble(arg0: ToDoubleFunction): Comparator;
}
declare var POITextComparator:
{
	new (value?: any): POITextComparator;
	(): any;
	(value: any): any;
	prototype: POITextComparator;
}
interface POIParseTextComparator
{
	compare(arg0: any, arg1: any): number;
	compare(arg0: FlatPOIParsedAddress, arg1: FlatPOIParsedAddress): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	reversed(): Comparator;
	thenComparing(arg0: Function): Comparator;
	thenComparing(arg0: Function, arg1: Comparator): Comparator;
	thenComparing(arg0: Comparator): Comparator;
	thenComparingInt(arg0: ToIntFunction): Comparator;
	thenComparingLong(arg0: ToLongFunction): Comparator;
	thenComparingDouble(arg0: ToDoubleFunction): Comparator;
}
declare var POIParseTextComparator:
{
	new (value?: any): POIParseTextComparator;
	(): any;
	(value: any): any;
	prototype: POIParseTextComparator;
}
interface RemoveZoneAdminPlaceAssocUoW
{
	toString(): string;
	id(): number;
	setZoneAdminPlace(arg0: ZoneAdminPlaceKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveZoneAdminPlaceAssocUoW:
{
	new (value?: any): RemoveZoneAdminPlaceAssocUoW;
	(): any;
	(value: any): any;
	prototype: RemoveZoneAdminPlaceAssocUoW;
}
interface GuidancePointToPoiAssociation
{
	guidancePoint(): GuidancePointFeaturePoint;
	poi(): PointOfInterest;
	firstMapObject(): MapObject;
	secondMapObject(): MapObject;
	accept(arg0: MapObjectAssociationTypeVisitor): void;
	compositeKernelType(): MapObjectAssociationType;
	getFirstMapObjectId(): number;
	getSecondMapObjectId(): number;
	getMapObjectAssociationPvid(): number;
	compositeKernelType(): CompositeKernelType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
	guidancePointId(): number;
	poiId(): number;
}
declare var GuidancePointToPoiAssociation:
{
	new (value?: any): GuidancePointToPoiAssociation;
	(): any;
	(value: any): any;
	prototype: GuidancePointToPoiAssociation;
}
interface LinkUtil
{
	length(arg0: Link): double;
	cartoFeatures(arg0: Link): Set;
	angle(arg0: Link, arg1: Link, arg2: Node): double;
	isLinkExpandedInclusion(arg0: FlatLink): boolean;
	isLinkExpandedInclusion(arg0: Link): boolean;
	viaAreas(arg0: Link): Set;
	cloneList(arg0: List): List;
	checkStructuralIntegrityEquals(arg0: string, arg1: any, arg2: any): void;
	getFlatLinkWithoutNodePoints(arg0: FlatLink, arg1: GeoPoint, arg2: GeoPoint): FlatLink;
	getShapeListWithNoDuplicatePoints(arg0: List): List;
	modifiableCloneList(arg0: List): List;
	isLinkAttrExpandedInclusion(arg0: Set): boolean;
	getLinkExpandedInclusion(arg0: Link): string;
	getLinkExpandedInclusionAttribute(arg0: string): ExtendedAttribute;
	removeLinkExpandedInclusionAttribute(arg0: Set): void;
	getLinkAttrExpandedInclusion(arg0: Set): string;
	getExpInclValues(arg0: Metadata): List;
	removeOldBridgeAttribute(arg0: Set): void;
	removeOldTunnelAttribute(arg0: Set): void;
	getBridgeLinkNewMarkerAttribute(): ExtendedAttribute;
	getTunnelLinkNewMarkerAttribute(): ExtendedAttribute;
	edge(arg0: LinkKernel): GeoEdge;
	features(arg0: Link): Set;
	bearing(arg0: Link, arg1: Node): double;
	hasFeatures(arg0: Link): boolean;
	hasFeature(arg0: Link, arg1: MapFeature): boolean;
	getShape(arg0: Link): List;
	makeNewEdge(arg0: List): GeoEdge;
	geometry(arg0: Link): GeoShape;
	onAdminPlaceBorder(arg0: Link): boolean;
	mapObjectType(arg0: Link): MapObjectType;
	firstPoint(arg0: Link): GeoPoint;
	lastPoint(arg0: Link): GeoPoint;
	oriented(arg0: Link): boolean;
	invert(arg0: Link): void;
	isInverted(arg0: Link): boolean;
	checkStructuralIntegrity(arg0: MapContext, arg1: LinkKernel): void;
	isBoundary(arg0: Link): boolean;
	nextShape(arg0: Link, arg1: Node): GeoPoint;
	invert(arg0: Set): boolean;
	getExtendedAttribute(arg0: Set, arg1: number): ExtendedAttribute;
	getExtendedAttribute(arg0: Set, arg1: number, arg2: string): ExtendedAttribute;
	getExtendedAttributeWithDefaultValue(arg0: Set, arg1: number, arg2: string): string;
	getAttributeValue(arg0: Set, arg1: number): string;
	containsAttr(arg0: number, arg1: Set): boolean;
	containsAttr(arg0: number, arg1: string, arg2: Set): boolean;
	removeExtendedAttribute(arg0: Set, arg1: number): void;
	removeExtendedAttribute(arg0: Set, arg1: number, arg2: string): void;
	getExpandedInclusionNewAttribute(): ExtendedAttribute;
	removeExpandedInclusionNewAttribute(arg0: Set): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LinkUtil:
{
	new (value?: any): LinkUtil;
	(): any;
	(value: any): any;
	prototype: LinkUtil;
}
interface BasicTransportSpecialSpeedSituation
{
	getConditionType(): number;
	getWeatherType(): WeatherType;
	getWeightDependentValue(): number;
	getDirectionType(): DirectionType;
	getSpeedSituationType(): SpeedSituationType;
	getSpeedLimitValue(): number;
	getHazardousMaterialType(): HazardousMaterialType;
	getTrailerType(): TrailerType;
	getTimeOverrideType(): TimeOverrideType;
	getSpeedLimitType(): SpeedLimitType;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicTransportSpecialSpeedSituation:
{
	new (value?: any): BasicTransportSpecialSpeedSituation;
	(): any;
	(value: any): any;
	prototype: BasicTransportSpecialSpeedSituation;
}
interface VariableSpeedLimitFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var VariableSpeedLimitFilter:
{
	new (value?: any): VariableSpeedLimitFilter;
	(): any;
	(value: any): any;
	prototype: VariableSpeedLimitFilter;
}
interface UpdateZoneAssociationUoW
{
	toString(): string;
	setZone(arg0: ZoneKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateZoneAssociationUoW:
{
	new (value?: any): UpdateZoneAssociationUoW;
	(): any;
	(value: any): any;
	prototype: UpdateZoneAssociationUoW;
}
interface AccessRestrictionImpl
{
	minPassengers(): number;
	hasMinPassengers(): boolean;
	hasHOVAllowsMotorcycles(): boolean;
	hovAllowsMotorcycles(): boolean;
	hasHOVAllowsHybrids(): boolean;
	hovAllowsHybrids(): boolean;
	hasHOVAllowsAlternateFuelVehicle(): boolean;
	isSeasonallyClosed(): boolean;
	hovAllowsAlternateFuelVehicle(): boolean;
	hasHOVAllowsFeePay(): boolean;
	hovAllowsFeePay(): boolean;
	hasConditionOverride(): boolean;
	conditionOverride(): boolean;
	hasTimeOverride(): boolean;
	getConditionType(): number;
	getOldConditionModifiers(): Set;
	getDependentAccessType(): DependentAccessType;
	hasDependentAccessType(): boolean;
	getTimeOverrideType(): TimeOverrideType;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: number): boolean;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	hasLaneInfo(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var AccessRestrictionImpl:
{
	new (value?: any): AccessRestrictionImpl;
	(): any;
	(value: any): any;
	prototype: AccessRestrictionImpl;
}
interface AddRoadNameUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddRoadNameUoW:
{
	new (value?: any): AddRoadNameUoW;
	(): any;
	(value: any): any;
	prototype: AddRoadNameUoW;
}
interface RoadNameUtil
{
	trim(arg0: StringBuilder): void;
	mapObjectType(): MapObjectType;
	cleared(arg0: RoadNameKernel): boolean;
	formattedName(arg0: RoadName): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var RoadNameUtil:
{
	new (value?: any): RoadNameUtil;
	(): any;
	(value: any): any;
	prototype: RoadNameUtil;
}
interface AddGPToPOIAssociationUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddGPToPOIAssociationUoW:
{
	new (value?: any): AddGPToPOIAssociationUoW;
	(): any;
	(value: any): any;
	prototype: AddGPToPOIAssociationUoW;
}
interface Deserializer
{
	read(): void;
	close(): void;
	textMode(): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var Deserializer:
{
	new (value?: any): Deserializer;
	(): any;
	(value: any): any;
	prototype: Deserializer;
}
interface RemoveDistanceMarkerUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveDistanceMarkerUoW:
{
	new (value?: any): RemoveDistanceMarkerUoW;
	(): any;
	(value: any): any;
	prototype: RemoveDistanceMarkerUoW;
}
interface TollBooth
{
	getStructureType(): TollStructureType;
	getPaymentMethod(): List;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	appliesToLane(arg0: number, arg1: number): boolean;
	hasLaneInfo(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var TollBooth:
{
	new (value?: any): TollBooth;
	(): any;
	(value: any): any;
	prototype: TollBooth;
}
interface BasicRuleSignatureUnvalidatedChange
{
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	setState(arg0: MapContext, arg1: UnvalidatedChangeKernel): void;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getUser(): string;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	unvalidatedMapObjects(): List;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicRuleSignatureUnvalidatedChange:
{
	new (value?: any): BasicRuleSignatureUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: BasicRuleSignatureUnvalidatedChange;
}
interface TransliterationMetadataSupplierExtension
{
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	extender(): MapContextExtender;
	mapContext(): MapContext;
	getTransliterationMetadataSupplier(): TransliteratorMetadataSupplier;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TransliterationMetadataSupplierExtension:
{
	new (value?: any): TransliterationMetadataSupplierExtension;
	(): any;
	(value: any): any;
	prototype: TransliterationMetadataSupplierExtension;
}
interface ConstructionStatusUtil
{
	isOpen(arg0: ConstructionStatus): boolean;
	getConditionType(arg0: ConstructionStatus): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ConstructionStatusUtil:
{
	new (value?: any): ConstructionStatusUtil;
	(): any;
	(value: any): any;
	prototype: ConstructionStatusUtil;
}
interface ConstructionStatus
{
	isOpen(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var ConstructionStatus:
{
	new (value?: any): ConstructionStatus;
	(): any;
	(value: any): any;
	prototype: ConstructionStatus;
}
interface AddConditionsCompositeUoW
{
	toString(): string;
	getConditionIds(): List;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddConditionsCompositeUoW:
{
	new (value?: any): AddConditionsCompositeUoW;
	(): any;
	(value: any): any;
	prototype: AddConditionsCompositeUoW;
}
interface FaceIntersecter
{
	setOperand(arg0: Face): void;
	intersect(): List;
}
declare var FaceIntersecter:
{
	new (value?: any): FaceIntersecter;
	(): any;
	(value: any): any;
	prototype: FaceIntersecter;
}
interface DayOfWeekOfYear
{
	toString(): string;
	dayOfWeek(): DayOfWeek;
	weekOfYear(): WeekOfYear;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var DayOfWeekOfYear:
{
	new (value?: any): DayOfWeekOfYear;
	(): any;
	(value: any): any;
	prototype: DayOfWeekOfYear;
}
interface WeekOfYear
{
	toString(): string;
	week(): number;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	isValidWeekOfYear(arg0: number): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var WeekOfYear:
{
	new (value?: any): WeekOfYear;
	(): any;
	(value: any): any;
	prototype: WeekOfYear;
}
interface CrfExtendedLane
{
	navLinks(): Set;
	navNodes(): Set;
	navFeatures(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CrfExtendedLane:
{
	new (value?: any): CrfExtendedLane;
	(): any;
	(value: any): any;
	prototype: CrfExtendedLane;
}
interface LaneStrandUtil
{
	getMissingIds(arg0: LaneStrand, arg1: MapContext): Set;
	isPartial(arg0: LaneStrand): boolean;
	navLanes(arg0: LaneStrand, arg1: MapContext): List;
	navLane(arg0: LaneStrand, arg1: number): NavLane;
	checkStructuralIntegrity(arg0: MapContext, arg1: LaneStrandKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LaneStrandUtil:
{
	new (value?: any): LaneStrandUtil;
	(): any;
	(value: any): any;
	prototype: LaneStrandUtil;
}
interface StrictAdder
{
	add(arg0: Kernel): void;
	structuralIntegrity(arg0: string, arg1: boolean, arg2: Kernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var StrictAdder:
{
	new (value?: any): StrictAdder;
	(): any;
	(value: any): any;
	prototype: StrictAdder;
}
interface NavNodeImpl
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	equivalent(arg0: Kernel): boolean;
	hasComponent(arg0: MapComponent): boolean;
	getComponentIds(): Collection;
	invariant(): void;
	node(): Node;
	getFeatureType(): number;
	navLinks(): List;
	removeNavLink(arg0: NavLink): boolean;
	valence(): number;
	navlinks(): List;
	addNavLink(arg0: NavLink): void;
	isMapEdge(): boolean;
	toXml(arg0: StringBuffer): void;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	getNodeId(): number;
	allComponents(): Set;
	setNode(arg0: Node): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatNavNode;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var NavNodeImpl:
{
	new (value?: any): NavNodeImpl;
	(): any;
	(value: any): any;
	prototype: NavNodeImpl;
}
interface CartoFace
{
	face(): Face;
	cartoFeature(): CartoFeature;
	isLongHaul(): boolean;
	getHeight(): number;
	getGroundClearance(): number;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	getFaceId(): number;
	getCartoId(): number;
	kernelType(): Class;
	makeFlat(): FlatCartoFace;
	getBuildingPatternCode(): string;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CartoFace:
{
	new (value?: any): CartoFace;
	(): any;
	(value: any): any;
	prototype: CartoFace;
}
interface NavLinkUtil
{
	length(arg0: NavLink): double;
	access(arg0: NavLink): Set;
	edge(arg0: NavLink): GeoEdge;
	isLongHaul(arg0: NavLink): boolean;
	getFeatureType(arg0: NavLink): number;
	firstNavNode(arg0: NavLink, arg1: MapContext): NavNode;
	lastNavNode(arg0: NavLink, arg1: MapContext): NavNode;
	cost(arg0: NavLink): number;
	display(arg0: NavLink): Set;
	hasAccess(arg0: NavLink, arg1: number): boolean;
	hasAccess(arg0: FlatNavLink, arg1: number): boolean;
	hasDisplay(arg0: NavLink, arg1: number): boolean;
	hasDisplay(arg0: FlatNavLink, arg1: number): boolean;
	hasSpecialAttr(arg0: NavLink, arg1: string): boolean;
	hasSpecialAttr(arg0: FlatNavLink, arg1: string): boolean;
	specialAttr(arg0: NavLink): Set;
	hasSameAttributes(arg0: NavLink, arg1: NavLinkKernel): boolean;
	roadLinks(arg0: NavLink): List;
	isDivided(arg0: NavLinkKernel): boolean;
	getToNavLanes(arg0: NavLink): List;
	getFromNavLanes(arg0: NavLink): List;
	firstPoint(arg0: NavLink): GeoPoint;
	lastPoint(arg0: NavLink): GeoPoint;
	oriented(arg0: NavLink): boolean;
	invert(arg0: NavLink): void;
	isInverted(arg0: NavLink): boolean;
	allComponents(arg0: NavLink): Set;
	getNavLinkIdString(arg0: Collection): string;
	getToRefExtendedLanes(arg0: NavLink): number;
	getFromRefExtendedLanes(arg0: NavLink): number;
	getCenterDividerMarker(arg0: NavLink): DividerMarkerType;
	checkStructuralIntegrity(arg0: MapContext, arg1: NavLinkKernel): void;
	getLinkPvidsString(arg0: Collection): string;
	getConfidenceLevel(arg0: Metadata, arg1: NavLink): string;
	getExtendedAttribute(arg0: NavLink, arg1: number): string;
	getBikeLaneDirection(arg0: NavLink): string;
	getBicycleLaneDirectionAttribute(arg0: Set): string;
	getGeneralizedBicyclePath(arg0: NavLink): string;
	getGeneralizedBicyclePathAttribute(arg0: Set): string;
	getTruckRoadTypeAttribute(arg0: Set): string;
	setBycycleLaneDirectionExtendedAttribute(arg0: Set, arg1: string): Set;
	setGeneralizedBicyclePathExtendedAttribute(arg0: Set, arg1: string): Set;
	setTruckRoadTypeExtendedAttribute(arg0: Set, arg1: string): Set;
	setBycycleLaneSource(arg0: Set, arg1: string): Set;
	getBicycleLaneSource(arg0: Set): string;
	getBicycleLaneSource(arg0: NavLink): string;
	setBicycleLaneDirection(arg0: string): Set;
	getBicycleExtendedAttribute(arg0: string, arg1: number): ExtendedAttribute;
	fetchMetadataDomainValues(arg0: Metadata, arg1: string): List;
	hasContiguousBicycleLaneDirectionOfTravel(arg0: NavLink, arg1: NavLink): boolean;
	hasContiguousGeneralizedBicyclePath(arg0: NavLink, arg1: NavLink): boolean;
	copyExtendedAttribute(arg0: FlatNavLink, arg1: FlatNavLink, arg2: number): Set;
	getNavLane(arg0: NavLink, arg1: number, arg2: string): NavLane;
	invert(arg0: Set): boolean;
	getExtendedAttribute(arg0: Set, arg1: number): ExtendedAttribute;
	getExtendedAttribute(arg0: Set, arg1: number, arg2: string): ExtendedAttribute;
	getExtendedAttributeWithDefaultValue(arg0: Set, arg1: number, arg2: string): string;
	getAttributeValue(arg0: Set, arg1: number): string;
	containsAttr(arg0: number, arg1: Set): boolean;
	containsAttr(arg0: number, arg1: string, arg2: Set): boolean;
	removeExtendedAttribute(arg0: Set, arg1: number): void;
	removeExtendedAttribute(arg0: Set, arg1: number, arg2: string): void;
	getExpandedInclusionNewAttribute(): ExtendedAttribute;
	removeExpandedInclusionNewAttribute(arg0: Set): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NavLinkUtil:
{
	new (value?: any): NavLinkUtil;
	(): any;
	(value: any): any;
	prototype: NavLinkUtil;
}
interface AlignedLinkFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AlignedLinkFilter:
{
	new (value?: any): AlignedLinkFilter;
	(): any;
	(value: any): any;
	prototype: AlignedLinkFilter;
}
interface AddComboUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddComboUoW:
{
	new (value?: any): AddComboUoW;
	(): any;
	(value: any): any;
	prototype: AddComboUoW;
}
interface BasicViaAreaPoiLink
{
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapComponentVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: ViaAreaPoiLinkKernel): void;
	association(): ViaAreaToPoiAssociation;
	getLinkId(): number;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getAssociationId(): number;
	link(): Link;
	makeFlat(): FlatKernel;
	makeFlat(): FlatViaAreaPoiLink;
	toString(): string;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicViaAreaPoiLink:
{
	new (value?: any): BasicViaAreaPoiLink;
	(): any;
	(value: any): any;
	prototype: BasicViaAreaPoiLink;
}
interface Updater
{
	update(arg0: Kernel): void;
	versionableCollection(): MapContext;
}
declare var Updater:
{
	new (value?: any): Updater;
	(): any;
	(value: any): any;
	prototype: Updater;
}
interface UpdateManeuverPointUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateManeuverPointUoW:
{
	new (value?: any): UpdateManeuverPointUoW;
	(): any;
	(value: any): any;
	prototype: UpdateManeuverPointUoW;
}
interface RemoveKernelsUoW
{
	toString(): string;
	setDatabaseConnection(arg0: JdbcConnection): void;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	execute(arg0: MapContext): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveKernelsUoW:
{
	new (value?: any): RemoveKernelsUoW;
	(): any;
	(value: any): any;
	prototype: RemoveKernelsUoW;
}
interface TransportRDMUtil
{
	getConditionType(): number;
	getRestrictionType(arg0: ConditionKernel): RestrictionType;
	getWeatherType(arg0: ConditionKernel): WeatherType;
	getRestrictionValue(arg0: ConditionKernel): number;
	getHazmatPermitType(arg0: ConditionKernel): HazmatPermitType;
	getHazardousMaterialType(arg0: ConditionKernel): HazardousMaterialType;
	getTrailerType(arg0: ConditionKernel): TrailerType;
	getTimeOverrideType(arg0: ConditionKernel): TimeOverrideType;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TransportRDMUtil:
{
	new (value?: any): TransportRDMUtil;
	(): any;
	(value: any): any;
	prototype: TransportRDMUtil;
}
interface BasicCondition
{
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
	getConditionType(): number;
}
declare var BasicCondition:
{
	new (value?: any): BasicCondition;
	(): any;
	(value: any): any;
	prototype: BasicCondition;
}
interface BasicRoadPoint
{
	parent(): RoadPoint;
	toString(): string;
	getLanguage(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getRoutingSide(): string;
	getRoutingPoint(): GeoPoint;
	getAddressFormat(): string;
	getRoadPointPvid(): number;
	getAddressedRoadLinkId(): number;
	getAddressedSide(): string;
	addressedRoadLink(): RoadLink;
	getAddressType(): number;
	setState(arg0: Kernel): void;
	setState(arg0: MapContext, arg1: RoadPointKernel): void;
	getDataSource(): string;
	getHouseNumber(): string;
	getBuildingUnitName(): string;
	getUnitName(): string;
	getLevelName(): string;
	children(): Set;
	getParentRoadPointId(): number;
	hasChildren(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getTransliterations(): Set;
	getRoutingNavLinkId(): number;
	getDisplayPoint(): GeoPoint;
	allComponents(): Set;
	getSourceType(): number;
	makeFlat(): FlatRoadPoint;
	makeFlat(): FlatKernel;
	routingNavLink(): NavLink;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicRoadPoint:
{
	new (value?: any): BasicRoadPoint;
	(): any;
	(value: any): any;
	prototype: BasicRoadPoint;
}
interface BasicFeaturePointOnNavLinkAbstr
{
	directionOfTravel(): DirectionOfTravel;
	accept(arg0: KernelVisitor): void;
	setState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeatureType(): number;
	getLinkId(): number;
	setFeaturePointState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	calcPercentFromRef(): double;
	allComponents(): Set;
	link(): Link;
	getPoint(): GeoPoint;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
	mapObjectType(): MapObjectType;
	equivalent(arg0: Kernel): boolean;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	accept(arg0: FeaturePointTypeVisitor): void;
	compositeKernelType(): FeaturePointType;
	compositeKernelType(): CompositeKernelType;
}
declare var BasicFeaturePointOnNavLinkAbstr:
{
	new (value?: any): BasicFeaturePointOnNavLinkAbstr;
	(): any;
	(value: any): any;
	prototype: BasicFeaturePointOnNavLinkAbstr;
}
interface HighwayExitUtil
{
	getEndNodes(arg0: NavLink): Set;
	isCrfObjectLink(arg0: NavLink): boolean;
	getCrfObject(arg0: NavLink): CrfObject;
	isHighway12Link(arg0: NavLink): boolean;
	isHighwayLink(arg0: NavLink): boolean;
	isOutgoingLink(arg0: NavLink, arg1: NavNode): boolean;
	isIncomingLink(arg0: NavLink, arg1: NavNode): boolean;
	hasExitLink(arg0: NavLink, arg1: NavNode): boolean;
	isHighwayExitLink(arg0: NavLink): boolean;
	hasPreviousHighwayExitLink(arg0: NavLink, arg1: NavNode, arg2: CrfObject): boolean;
	getStreetFilter(): DistanceGraphFilter;
	isHighwayExitPoi(arg0: PointOfInterest): boolean;
	isHighwayServicePoiType(arg0: PointOfInterest, arg1: Metadata): boolean;
	getHighwayExitNode(arg0: PointOfInterest): NavNode;
	findHighwayExitPois(arg0: NavLink): Set;
	findHighwayExitPoi(arg0: NavLink, arg1: NavNode): PointOfInterest;
	hasHighwayExitPoi(arg0: NavLink): boolean;
	findHighwayServicePois(arg0: NavLink, arg1: Metadata): Set;
	findHighwayServicePois(arg0: DistanceGraph, arg1: Metadata): Set;
	hasHighwayServicePoi(arg0: NavLink, arg1: Metadata): boolean;
	exitRoadLink(arg0: NavLink): RoadLink;
	exitPercentFromRef(arg0: NavLink, arg1: NavNode): number;
	exitName(arg0: RoadLink, arg1: NavNode): string;
	isHighwayExit12Link(arg0: NavLink): boolean;
	isHighway12OnlyLink(arg0: NavLink): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var HighwayExitUtil:
{
	new (value?: any): HighwayExitUtil;
	(): any;
	(value: any): any;
	prototype: HighwayExitUtil;
}
interface CrfObject
{
	navLinks(): Set;
	navNodes(): Set;
	navFeatures(): Set;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getType(): string;
	getNavNodeIds(): Set;
	getLandmarkPoint(): GeoPoint;
	getMultiNavPvid(): number;
	getRefCrfIntersectionId(): number;
	getNRefCrfIntersectionId(): number;
	getNavLinkIds(): Set;
	makeFlat(): FlatCompositeRoadFeature;
	isValidUnnamed(): boolean;
	getFeatureType(): number;
	getNames(): Set;
	getAttachedFiles(): Set;
	getExtendedAttributes(): Set;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CrfObject:
{
	new (value?: any): CrfObject;
	(): any;
	(value: any): any;
	prototype: CrfObject;
}
interface BasicDistanceMarkerFeaturePoint
{
	toString(): string;
	accept(arg0: FeaturePointTypeVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	equivalent(arg0: Kernel): boolean;
	compositeKernelType(): CompositeKernelType;
	compositeKernelType(): FeaturePointType;
	getLanguageCode(): string;
	getDistanceValue(): string;
	getVerified(): DmVerified;
	getUnitOfMeasure(): SystemOfMeasurement;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getTransliterations(): Set;
	setFeaturePointState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getDirectionOnSign(): DirectionOnSign;
	makeFlat(): FlatKernel;
	makeFlat(): FlatDistanceMarkerFeaturePoint;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	directionOfTravel(): DirectionOfTravel;
	accept(arg0: KernelVisitor): void;
	setState(arg0: MapContext, arg1: FeaturePointKernel): void;
	getFeatureType(): number;
	getLinkId(): number;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	calcPercentFromRef(): double;
	allComponents(): Set;
	link(): Link;
	getPoint(): GeoPoint;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicDistanceMarkerFeaturePoint:
{
	new (value?: any): BasicDistanceMarkerFeaturePoint;
	(): any;
	(value: any): any;
	prototype: BasicDistanceMarkerFeaturePoint;
}
interface FlatDistanceMarkerFeaturePoint
{
	toString(): string;
	accept(arg0: FeaturePointTypeVisitor): void;
	equivalent(arg0: Kernel): boolean;
	equivalent(arg0: DistanceMarkerFeaturePointKernel, arg1: DistanceMarkerFeaturePointKernel): boolean;
	setDirectionOnSign(arg0: DirectionOnSign): void;
	setUnitOfMeasure(arg0: SystemOfMeasurement): void;
	compositeKernelType(): FeaturePointType;
	compositeKernelType(): CompositeKernelType;
	getLanguageCode(): string;
	getDistanceValue(): string;
	getVerified(): DmVerified;
	setVerified(arg0: DmVerified): void;
	getUnitOfMeasure(): SystemOfMeasurement;
	setLanguageCode(arg0: string): void;
	kernelType(): Class;
	getTransliterations(): Set;
	setTransliterations(arg0: Set): void;
	setFeaturePointState(arg0: FeaturePointKernel): void;
	getDirectionOnSign(): DirectionOnSign;
	isFeaturePointCleared(): boolean;
	clearFeaturePoint(): void;
	makeFlat(): FlatKernel;
	makeFlat(): FlatDistanceMarkerFeaturePoint;
	getDataPacketType(): DataPacketType;
	setDistanceValue(arg0: string): void;
	accept(arg0: PacketVisitor): void;
	accept(arg0: KernelVisitor): void;
	id(): number;
	isRichObjectPartialCapable(): boolean;
	setPoint(arg0: GeoPoint): void;
	setState(arg0: Kernel): void;
	setId(arg0: number): void;
	setLinkId(arg0: number): void;
	getLinkId(): number;
	setFeaturePointPvid(arg0: number): void;
	getFeaturePointPvid(): number;
	getLinkSide(): LinkSide;
	cleared(): boolean;
	invert(): void;
	setLinkSide(arg0: LinkSide): void;
	getPoint(): GeoPoint;
	clearState(): void;
	equals(arg0: any): boolean;
	clone(): any;
	setStateFromXml(arg0: string): void;
	setCurrentChangeId(arg0: number): void;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var FlatDistanceMarkerFeaturePoint:
{
	new (value?: any): FlatDistanceMarkerFeaturePoint;
	(): any;
	(value: any): any;
	prototype: FlatDistanceMarkerFeaturePoint;
}
interface EvacuationRoute
{
	evacType(): string;
	travelFlow(): string;
	evacCode(): string;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var EvacuationRoute:
{
	new (value?: any): EvacuationRoute;
	(): any;
	(value: any): any;
	prototype: EvacuationRoute;
}
interface ExecuteListUoW
{
	add(arg0: List): void;
	add(arg0: UnitOfWork): void;
	toString(): string;
	isEmpty(): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var ExecuteListUoW:
{
	new (value?: any): ExecuteListUoW;
	(): any;
	(value: any): any;
	prototype: ExecuteListUoW;
}
interface CartoFeatureUtil
{
	area(arg0: CartoFeature): double;
	getCartoFeatureExpandedInclusionAttribute(): ExtendedAttribute;
	removeCartoExpandedInclusionAttribute(arg0: Set): void;
	cartoLinks(arg0: CartoFeature): Set;
	isLongHaul(arg0: CartoFeature): boolean;
	cartoFaces(arg0: CartoFeature): Set;
	hasCompletePolygonBoundary(arg0: CartoFeature): boolean;
	getCartoFeatureSeverityRating(arg0: CartoFeature): number;
	getCartoFeatureProductInclusion(arg0: CartoFeatureKernel): string;
	isCartoFeatureExpandedInclusion(arg0: CartoFeatureKernel): boolean;
	isCartoFeatureAttrExpandedInclusion(arg0: Set): boolean;
	getCartoFeatureExpandedInclusion(arg0: Set): ExtendedAttribute;
	getCartoFeatureEnvironmentalZone(arg0: CartoFeatureKernel): number;
	getCartoFeaturePolygonRestriction(arg0: CartoFeatureKernel): number;
	updateAttribute(arg0: number, arg1: string, arg2: CartoFeatureKernel): void;
	getCountryForCarto(arg0: CartoFeature): Country;
	getCountryFromLink(arg0: Link): Country;
	getCartoFeatureGroundClearance(arg0: CartoFeature): number;
	allComponents(arg0: CartoFeature): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: CartoFeatureKernel): void;
	getAttributeValue(arg0: CartoFeatureKernel, arg1: number): string;
	namedPlace(arg0: CartoFeature, arg1: MapContext): NamedPlace;
	hasPartialCartoLinkOrFace(arg0: CartoFeature): boolean;
	getCartoFace(arg0: CartoFeature, arg1: number): CartoFace;
	getCartoLink(arg0: CartoFeature, arg1: number): CartoLink;
	isGroupedStructure(arg0: CartoFeature): boolean;
	poiCartos(arg0: CartoFeature): Set;
	getPoiCarto(arg0: CartoFeature, arg1: number): PoiCarto;
	isWaterFeature(arg0: CartoFeature): boolean;
	invert(arg0: Set): boolean;
	getExtendedAttribute(arg0: Set, arg1: number): ExtendedAttribute;
	getExtendedAttribute(arg0: Set, arg1: number, arg2: string): ExtendedAttribute;
	getExtendedAttributeWithDefaultValue(arg0: Set, arg1: number, arg2: string): string;
	getAttributeValue(arg0: Set, arg1: number): string;
	containsAttr(arg0: number, arg1: Set): boolean;
	containsAttr(arg0: number, arg1: string, arg2: Set): boolean;
	removeExtendedAttribute(arg0: Set, arg1: number): void;
	removeExtendedAttribute(arg0: Set, arg1: number, arg2: string): void;
	getExpandedInclusionNewAttribute(): ExtendedAttribute;
	removeExpandedInclusionNewAttribute(arg0: Set): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var CartoFeatureUtil:
{
	new (value?: any): CartoFeatureUtil;
	(): any;
	(value: any): any;
	prototype: CartoFeatureUtil;
}
interface GeoLockFilter
{
	accept(arg0: MapObject): boolean;
	visit(arg0: Link): boolean;
	visit(arg0: Node): boolean;
	accept(arg0: number): boolean;
	visit(arg0: LinkPoints): boolean;
	visit(arg0: NavStrand): boolean;
	visit(arg0: RoadLink): boolean;
	visit(arg0: NavLink): boolean;
	visit(arg0: Condition): boolean;
	visit(arg0: PointOfInterest): boolean;
	update(arg0: number, arg1: MapObject): void;
	reset(): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GeoLockFilter:
{
	new (value?: any): GeoLockFilter;
	(): any;
	(value: any): any;
	prototype: GeoLockFilter;
}
interface XtdlAndHovAccessRestrictionFilter
{
	filter(arg0: MapObject): UnitOfWork;
	checkNodeForFunctionalClassCutoff(arg0: GeoPoint, arg1: GeoPoint, arg2: NavNode, arg3: number): boolean;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var XtdlAndHovAccessRestrictionFilter:
{
	new (value?: any): XtdlAndHovAccessRestrictionFilter;
	(): any;
	(value: any): any;
	prototype: XtdlAndHovAccessRestrictionFilter;
}
interface RuleDeltaUnvalidatedChange
{
	isPartial(): boolean;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	unvalidatedMapObjects(): List;
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUser(): string;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
}
declare var RuleDeltaUnvalidatedChange:
{
	new (value?: any): RuleDeltaUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: RuleDeltaUnvalidatedChange;
}
interface AddNavStrandUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddNavStrandUoW:
{
	new (value?: any): AddNavStrandUoW;
	(): any;
	(value: any): any;
	prototype: AddNavStrandUoW;
}
interface ConditionFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ConditionFilter:
{
	new (value?: any): ConditionFilter;
	(): any;
	(value: any): any;
	prototype: ConditionFilter;
}
interface AddSignUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddSignUoW:
{
	new (value?: any): AddSignUoW;
	(): any;
	(value: any): any;
	prototype: AddSignUoW;
}
interface RemoveViaAreaAssociationUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveViaAreaAssociationUoW:
{
	new (value?: any): RemoveViaAreaAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveViaAreaAssociationUoW;
}
interface SupplementalGeometryFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var SupplementalGeometryFilter:
{
	new (value?: any): SupplementalGeometryFilter;
	(): any;
	(value: any): any;
	prototype: SupplementalGeometryFilter;
}
interface LaneTraversalCondition
{
	orientedSource(): OrientedNavLink;
	destLanes(): number;
	sourceLanes(): number;
	orientedDest(): OrientedNavLink;
	connectionMatrix(): LaneConnectionMatrix;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	appliesToLane(arg0: number, arg1: number): boolean;
	hasLaneInfo(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var LaneTraversalCondition:
{
	new (value?: any): LaneTraversalCondition;
	(): any;
	(value: any): any;
	prototype: LaneTraversalCondition;
}
interface AnnotationUtil
{
	allComponents(arg0: Annotation): Set;
	checkStructuralIntegrity(arg0: MapContext, arg1: AnnotationKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var AnnotationUtil:
{
	new (value?: any): AnnotationUtil;
	(): any;
	(value: any): any;
	prototype: AnnotationUtil;
}
interface Node
{
	setPoint(arg0: GeoPoint): void;
	links(): List;
	makeFlat(): FlatNode;
	addLink(arg0: Link): void;
	isRefNode(arg0: Node): boolean;
	isReference(arg0: Link): boolean;
	removeLink(arg0: Link): void;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getPoint(): GeoPoint;
	isAligned(): boolean;
	getNodePvid(): number;
	getMapEdgeId(): number;
	getNodeElevation(): NodeElevation;
	getExtendedAttributes(): Set;
}
declare var Node:
{
	new (value?: any): Node;
	(): any;
	(value: any): any;
	prototype: Node;
}
interface BasicAdminUnvalidatedChange
{
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	setState(arg0: MapContext, arg1: UnvalidatedChangeKernel): void;
	toString(): string;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	getUser(): string;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	makeFlat(): FlatKernel;
	unvalidatedMapObjects(): List;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicAdminUnvalidatedChange:
{
	new (value?: any): BasicAdminUnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: BasicAdminUnvalidatedChange;
}
interface AccessRestriction
{
	minPassengers(): number;
	hasMinPassengers(): boolean;
	hasHOVAllowsMotorcycles(): boolean;
	hovAllowsMotorcycles(): boolean;
	hasHOVAllowsHybrids(): boolean;
	hovAllowsHybrids(): boolean;
	hasHOVAllowsAlternateFuelVehicle(): boolean;
	isSeasonallyClosed(): boolean;
	hovAllowsAlternateFuelVehicle(): boolean;
	hasHOVAllowsFeePay(): boolean;
	hovAllowsFeePay(): boolean;
	hasConditionOverride(): boolean;
	conditionOverride(): boolean;
	hasTimeOverride(): boolean;
	getDependentAccessType(): DependentAccessType;
	hasDependentAccessType(): boolean;
	getTimeOverrideType(): TimeOverrideType;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	appliesToLane(arg0: number, arg1: number): boolean;
	hasLaneInfo(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var AccessRestriction:
{
	new (value?: any): AccessRestriction;
	(): any;
	(value: any): any;
	prototype: AccessRestriction;
}
interface GuidancePointFPFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GuidancePointFPFilter:
{
	new (value?: any): GuidancePointFPFilter;
	(): any;
	(value: any): any;
	prototype: GuidancePointFPFilter;
}
interface CartoLink
{
	cartoFeature(): CartoFeature;
	productAdmin(): AdminPlace;
	link(): Link;
	isLongHaul(): boolean;
	getCoverageIndicator(): string;
	getCoverageIndicatorSource(): number;
	getClaimedBy(): string;
	getControlledBy(): string;
	getLinkId(): number;
	isLineOfControl(): boolean;
	getCartoId(): number;
	kernelType(): Class;
	getProductAdminId(): number;
	makeFlat(): FlatCartoLink;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	length(): double;
	edge(): GeoEdge;
	firstPoint(): GeoPoint;
	lastPoint(): GeoPoint;
	oriented(): boolean;
	invert(): void;
	isInverted(): boolean;
	accept(arg0: MapComponentVisitor): void;
	features(): Set;
	hasFeatures(): boolean;
	hasFeature(arg0: MapFeature): boolean;
	geometry(): GeoShape;
	onAdminPlaceBorder(): boolean;
	setLayer(arg0: number): void;
	removeFeature(arg0: MapFeature): void;
	addFeature(arg0: MapFeature): void;
	layer(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var CartoLink:
{
	new (value?: any): CartoLink;
	(): any;
	(value: any): any;
	prototype: CartoLink;
}
interface AddPostalAreaZoneAssocUoW
{
	toString(): string;
	id(): number;
	setPostalAreaZone(arg0: PostalAreaZoneKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddPostalAreaZoneAssocUoW:
{
	new (value?: any): AddPostalAreaZoneAssocUoW;
	(): any;
	(value: any): any;
	prototype: AddPostalAreaZoneAssocUoW;
}
interface BasicProtectedOvertaking
{
	getConditionType(): number;
	getDirectionType(): DirectionType;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicProtectedOvertaking:
{
	new (value?: any): BasicProtectedOvertaking;
	(): any;
	(value: any): any;
	prototype: BasicProtectedOvertaking;
}
interface MapFeature
{
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
}
declare var MapFeature:
{
	new (value?: any): MapFeature;
	(): any;
	(value: any): any;
	prototype: MapFeature;
}
interface VariableSpeedLimitUtil
{
	getVssId(arg0: ConditionKernel): string;
	getDirectionofTravel(arg0: ConditionKernel): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var VariableSpeedLimitUtil:
{
	new (value?: any): VariableSpeedLimitUtil;
	(): any;
	(value: any): any;
	prototype: VariableSpeedLimitUtil;
}
interface MapContextFilterAbstr
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
	description(): string;
}
declare var MapContextFilterAbstr:
{
	new (value?: any): MapContextFilterAbstr;
	(): any;
	(value: any): any;
	prototype: MapContextFilterAbstr;
}
interface AddViaAreaPOILinkUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddViaAreaPOILinkUoW:
{
	new (value?: any): AddViaAreaPOILinkUoW;
	(): any;
	(value: any): any;
	prototype: AddViaAreaPOILinkUoW;
}
interface PartialCapable
{
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var PartialCapable:
{
	new (value?: any): PartialCapable;
	(): any;
	(value: any): any;
	prototype: PartialCapable;
}
interface PartialFilter
{
	update(arg0: number, arg1: MapObject): void;
	accept(arg0: MapObject): boolean;
	accept(arg0: number): boolean;
	reset(): void;
	visit(arg0: MapObjectAssociation): void;
	visit(arg0: FeaturePoint): void;
	visit(arg0: PoiAssoc): void;
	visit(arg0: GuidancePointToPoiAssociation): void;
	visit(arg0: GuidancePointToCartoAssociation): void;
	visit(arg0: PostalArea): void;
	visit(arg0: NavStrand): void;
	visit(arg0: Condition): void;
	visit(arg0: CompositeRoadFeature): void;
	visit(arg0: LaneStrand): void;
	visit(arg0: ViaArea): void;
	visit(arg0: VirtualConnection): void;
	visit(arg0: ViaAreaPoiLink): void;
	visit(arg0: ViaAreaRLLink): void;
	visit(arg0: GuidancePointToMOAssociation): void;
	visit(arg0: NaturalGuidanceLinkToPoiAssociation): void;
	visit(arg0: NaturalGuidanceLinkToCartoAssociation): void;
	visit(arg0: NaturalGuidanceLinkToMOAssociation): void;
	visit(arg0: FaceLink): void;
	visit(arg0: CartoFace): void;
	visit(arg0: CartoLink): void;
	visit(arg0: AdminPlace): void;
	visit(arg0: CartoFeature): void;
	visit(arg0: Node): void;
	visit(arg0: Link): void;
	visit(arg0: Annotation): void;
	visit(arg0: Face): void;
	visit(arg0: Zone): void;
	visit(arg0: NavNode): void;
	visit(arg0: Sign): void;
	visit(arg0: RoadLink): void;
	visit(arg0: NavLink): void;
	visit(arg0: NavLane): void;
	visit(arg0: PointOfInterest): void;
	visit(arg0: RoadPoint): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PartialFilter:
{
	new (value?: any): PartialFilter;
	(): any;
	(value: any): any;
	prototype: PartialFilter;
}
interface RailwayCrossingUtil
{
	getConditionType(): number;
	crossingType(arg0: ConditionKernel): number;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var RailwayCrossingUtil:
{
	new (value?: any): RailwayCrossingUtil;
	(): any;
	(value: any): any;
	prototype: RailwayCrossingUtil;
}
interface TopologySegment
{
	firstNavNode(): NavNode;
	lastNavNode(): NavNode;
	getOrientedTopologySegNavLinks(): List;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getNavLinkIds(): Set;
	getTopologySegmentPvid(): number;
	getFirstNavNodeId(): number;
	getLastNavNodeId(): number;
	getTopologySegmentNavLinks(): List;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var TopologySegment:
{
	new (value?: any): TopologySegment;
	(): any;
	(value: any): any;
	prototype: TopologySegment;
}
interface ProductBoundaryFaceLinkExtension
{
	index(arg0: MapObject): void;
	load(arg0: MapContextPartition): void;
	unload(arg0: MapContextPartition): void;
	getOrientedLink(arg0: Link): OrientedLink;
	addLinkToOrientedLinkMap(arg0: Link, arg1: OrientedLink): void;
	isLoaded(arg0: MapContextPartition): boolean;
	mapContextExtension(): MapContextExtension;
	isEnabled(): boolean;
	setEnabled(arg0: boolean): void;
	extender(): MapContextExtender;
	unindex(arg0: MapObject): void;
	mapContext(): MapContext;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ProductBoundaryFaceLinkExtension:
{
	new (value?: any): ProductBoundaryFaceLinkExtension;
	(): any;
	(value: any): any;
	prototype: ProductBoundaryFaceLinkExtension;
}
interface ConditionUtility
{
	orientedNavLink(arg0: NavStrand, arg1: NavLink): OrientedNavLink;
	findMod(arg0: Set, arg1: number): FlatConditionModifier;
	reverseParkingSideOfStreet(arg0: Set): Set;
	derivedFeatureFiles(arg0: ConditionKernel, arg1: MapContext): Set;
	has2DigitCountryCode(arg0: Country, arg1: Metadata): boolean;
	getCommonNode(arg0: NavLink, arg1: NavLink): NavNode;
	getConditionName(arg0: ConditionKernel): string;
	conditionSubset(arg0: Collection, arg1: Class): Set;
	conditionsStartingAt(arg0: OrientedNavLink): Set;
	conditionsEndingAt(arg0: OrientedNavLink): Set;
	conditionsStartingAtStartButNotEndingAtEnd(arg0: OrientedNavLink, arg1: OrientedNavLink): Set;
	conditionsStartingAtStartAndEndingAtEnd(arg0: OrientedNavLink, arg1: OrientedNavLink): Set;
	conditionsTraversing(arg0: OrientedNavLink): Set;
	orientedOrigin(arg0: NavStrand): OrientedNavLink;
	orientedDestination(arg0: NavStrand): OrientedNavLink;
	rdmsStartingAt(arg0: OrientedNavLink): Set;
	copyConditions(arg0: Collection): List;
	find2DigitCountryCode(arg0: Country, arg1: Metadata): string;
	get2dJvFeatureFileName(arg0: List, arg1: Metadata): string;
	getSarFeatureFileName(arg0: List, arg1: Metadata): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var ConditionUtility:
{
	new (value?: any): ConditionUtility;
	(): any;
	(value: any): any;
	prototype: ConditionUtility;
}
interface TollBoothImpl
{
	getConditionType(): number;
	getStructureType(): TollStructureType;
	getPaymentMethod(): List;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: number): boolean;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	hasLaneInfo(): boolean;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var TollBoothImpl:
{
	new (value?: any): TollBoothImpl;
	(): any;
	(value: any): any;
	prototype: TollBoothImpl;
}
interface RemoveCountryUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveCountryUoW:
{
	new (value?: any): RemoveCountryUoW;
	(): any;
	(value: any): any;
	prototype: RemoveCountryUoW;
}
interface TransportAccessRestriction
{
	getRestrictionType(): RestrictionType;
	getWeatherType(): WeatherType;
	getDirectionClosureType(): DirectionClosureType;
	getPhysicalStructureType(): PhysicalStructureType;
	getRestrictionValue(): number;
	getHazmatPermitType(): HazmatPermitType;
	getHazardousMaterialType(): HazardousMaterialType;
	getTrailerType(): TrailerType;
	getTimeOverrideType(): TimeOverrideType;
	getSetOfStrandLaneNumbers(): Set;
	navLaneNumbers(): number;
	getLanesToLaneStrand(): Map;
	appliesToLane(arg0: number, arg1: NavLink): boolean;
	appliesToLane(arg0: number): boolean;
	appliesToLane(arg0: number, arg1: number): boolean;
	hasLaneInfo(): boolean;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var TransportAccessRestriction:
{
	new (value?: any): TransportAccessRestriction;
	(): any;
	(value: any): any;
	prototype: TransportAccessRestriction;
}
interface RemoveNGLinkToPOIAssociationUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveNGLinkToPOIAssociationUoW:
{
	new (value?: any): RemoveNGLinkToPOIAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveNGLinkToPOIAssociationUoW;
}
interface WeekOfMonth
{
	toString(): string;
	isValidWeekOfMonth(arg0: number): boolean;
	week(): number;
	isValid(arg0: CalendarUnit): boolean;
	calendarUnit(): CalendarUnit;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var WeekOfMonth:
{
	new (value?: any): WeekOfMonth;
	(): any;
	(value: any): any;
	prototype: WeekOfMonth;
}
interface GoldPlateUoWSecurityManager
{
	type(): string;
	checkUpdatePermissions(arg0: Kernel): boolean;
	checkAddPermissions(arg0: Kernel): boolean;
	getSecurityLog(): string;
	checkDeletePermissions(arg0: Kernel): boolean;
	clearSecurityLog(): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GoldPlateUoWSecurityManager:
{
	new (value?: any): GoldPlateUoWSecurityManager;
	(): any;
	(value: any): any;
	prototype: GoldPlateUoWSecurityManager;
}
interface GeoPointStackedMapComponentListMap
{
	getStackMap(): Map;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var GeoPointStackedMapComponentListMap:
{
	new (value?: any): GeoPointStackedMapComponentListMap;
	(): any;
	(value: any): any;
	prototype: GeoPointStackedMapComponentListMap;
}
interface RemoveManeuverPointCompositeUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveManeuverPointCompositeUoW:
{
	new (value?: any): RemoveManeuverPointCompositeUoW;
	(): any;
	(value: any): any;
	prototype: RemoveManeuverPointCompositeUoW;
}
interface TrafficSignsAndAlertsFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	isTransportAlertCondition(arg0: Condition): boolean;
	isTrafficSignWithTransportModifiers(arg0: Condition): boolean;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var TrafficSignsAndAlertsFilter:
{
	new (value?: any): TrafficSignsAndAlertsFilter;
	(): any;
	(value: any): any;
	prototype: TrafficSignsAndAlertsFilter;
}
interface RemoveFaceUoW
{
	toString(): string;
	setFace(arg0: FaceKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveFaceUoW:
{
	new (value?: any): RemoveFaceUoW;
	(): any;
	(value: any): any;
	prototype: RemoveFaceUoW;
}
interface RemoveManeuverPointUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveManeuverPointUoW:
{
	new (value?: any): RemoveManeuverPointUoW;
	(): any;
	(value: any): any;
	prototype: RemoveManeuverPointUoW;
}
interface CalendarInterval
{
	toString(): string;
	startUnit(): CalendarUnit;
	endUnit(): CalendarUnit;
	calendarInterval(): CalendarInterval;
	setStartUnit(arg0: CalendarUnit): void;
	setEndUnit(arg0: CalendarUnit): void;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var CalendarInterval:
{
	new (value?: any): CalendarInterval;
	(): any;
	(value: any): any;
	prototype: CalendarInterval;
}
interface RemoveCartoFaceUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveCartoFaceUoW:
{
	new (value?: any): RemoveCartoFaceUoW;
	(): any;
	(value: any): any;
	prototype: RemoveCartoFaceUoW;
}
interface AddManeuverPointUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddManeuverPointUoW:
{
	new (value?: any): AddManeuverPointUoW;
	(): any;
	(value: any): any;
	prototype: AddManeuverPointUoW;
}
interface RemoveLinkUoW
{
	toString(): string;
	setLink(arg0: LinkKernel): void;
	setLink(arg0: LinkKernel, arg1: Map): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveLinkUoW:
{
	new (value?: any): RemoveLinkUoW;
	(): any;
	(value: any): any;
	prototype: RemoveLinkUoW;
}
interface TransportRDM
{
	getRestrictionType(): RestrictionType;
	getWeatherType(): WeatherType;
	getRestrictionValue(): number;
	getHazmatPermitType(): HazmatPermitType;
	getHazardousMaterialType(): HazardousMaterialType;
	getTrailerType(): TrailerType;
	getTimeOverrideType(): TimeOverrideType;
	dateTimeMasks(): List;
	navStrand(): NavStrand;
	accept(arg0: MapFeatureVisitor): void;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator): SortedSet;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	allComponents(): Set;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	getConditionType(): number;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	getNavStrandId(): number;
	getDataSource(): number;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	getMultiNavPvid(): number;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
}
declare var TransportRDM:
{
	new (value?: any): TransportRDM;
	(): any;
	(value: any): any;
	prototype: TransportRDM;
}
interface OutdoorFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OutdoorFilter:
{
	new (value?: any): OutdoorFilter;
	(): any;
	(value: any): any;
	prototype: OutdoorFilter;
}
interface UpdateRailwayCrossingFPUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var UpdateRailwayCrossingFPUoW:
{
	new (value?: any): UpdateRailwayCrossingFPUoW;
	(): any;
	(value: any): any;
	prototype: UpdateRailwayCrossingFPUoW;
}
interface BasicSignDestination
{
	signEntries(): List;
	isStraightOn(): boolean;
	destinationNavLinkId(): number;
	destinationNavLink(): NavLink;
	exitNumber(): string;
	getTransliterations(): Set;
	setTransliterations(arg0: Set): void;
	setStraightOn(arg0: boolean): void;
	getSignExitCells(): List;
	setSignExitCells(arg0: List): void;
	alternateExitNumber(): string;
	setAlternateExitNumber(arg0: string): void;
	exitNumberLanguageCode(): string;
	setExitNumberLanguageCode(arg0: string): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var BasicSignDestination:
{
	new (value?: any): BasicSignDestination;
	(): any;
	(value: any): any;
	prototype: BasicSignDestination;
}
interface LaneSpeedFilter
{
	name(): string;
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var LaneSpeedFilter:
{
	new (value?: any): LaneSpeedFilter;
	(): any;
	(value: any): any;
	prototype: LaneSpeedFilter;
}
interface OvertakingConditionUtil
{
	getConditionFilter(arg0: number): UncycledDistanceGraphFilter;
	linkHasCondition(arg0: NavLink, arg1: number): boolean;
	findBoundingNavNodes(arg0: Set): Set;
	getConditionCount(arg0: List, arg1: List): number;
	getConditionForLink(arg0: NavLink, arg1: number): Condition;
	getLinkOnNodeWithConditionType(arg0: NavNode, arg1: number): NavLink;
	removeDuplicateStretches(arg0: List): List;
	isLinkReachable(arg0: NavLink, arg1: NavLink, arg2: MapContext, arg3: Set): boolean;
	findValidSigns(arg0: Set, arg1: Set, arg2: NavLink, arg3: MapContext, arg4: Set, arg5: boolean, arg6: List, arg7: Set): Set;
	findBoundingLinksFromStretch(arg0: Set): Set;
	findTrafficSigns(arg0: Set, arg1: MapContext, arg2: UncycledDistanceGraphFilter, arg3: Set, arg4: List): Set;
	getTrafficSignsOnLinks(arg0: Set, arg1: Set): Set;
	getUncycledFilter(): UncycledDistanceGraphFilter;
	isEndSignReachable(arg0: NavLink, arg1: NavLink, arg2: Set, arg3: Set, arg4: MapContext): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var OvertakingConditionUtil:
{
	new (value?: any): OvertakingConditionUtil;
	(): any;
	(value: any): any;
	prototype: OvertakingConditionUtil;
}
interface UncycledDistanceGraphFilter
{
	reset(): void;
	shouldAddLink(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	shouldExploreLink(arg0: NavLink, arg1: NavNode, arg2: double): ExploreResult;
	shouldAddLength(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	getDefaultFilter(): DistanceGraphFilter;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var UncycledDistanceGraphFilter:
{
	new (value?: any): UncycledDistanceGraphFilter;
	(): any;
	(value: any): any;
	prototype: UncycledDistanceGraphFilter;
}
interface AddRoadPointAddressUoW
{
	toString(): string;
	id(): number;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddRoadPointAddressUoW:
{
	new (value?: any): AddRoadPointAddressUoW;
	(): any;
	(value: any): any;
	prototype: AddRoadPointAddressUoW;
}
interface ModifiableMapContext
{
	add(arg0: Kernel): void;
	remove(arg0: number): void;
	update(arg0: Kernel): void;
	setMetadata(arg0: Metadata): void;
	addIncompleteNode(arg0: IncompleteNodePacket): void;
	removeIncompleteNode(arg0: number): void;
	removeFringe(arg0: MapObject): void;
	updateId(arg0: number, arg1: number): void;
	merger(): Merger;
	addScope(arg0: Scope): void;
	removeScope(): void;
	addFringe(arg0: MapObject): void;
	addIncompleteAdmin(arg0: IncompleteAdminPacket): void;
	removeIncompleteAdmin(arg0: number): void;
	addAdditionalData(arg0: Properties): void;
	setEdgeCandidates(arg0: Set): void;
	addMetricsContext(arg0: MetricContext): void;
	clearMetricsContexts(): void;
	addCustomContext(arg0: Class): void;
	getModifiableDegradationValidationContext(): ModifiableDegradationValidationContext;
	extensions(): Set;
	findMapObjectAssociation(arg0: number): MapObjectAssociation;
	findMapObjectAssociation(arg0: number, arg1: MapObjectAssociationType): MapObjectAssociation;
	findFeaturePoint(arg0: number): FeaturePoint;
	findFeaturePoint(arg0: number, arg1: FeaturePointType): FeaturePoint;
	schemaVersion(): string;
	findRoadName(arg0: number): RoadName;
	findRoadName(arg0: RoadNameKernel): RoadName;
	findPoi(arg0: RoadLink): Set;
	findPoi(arg0: number): PointOfInterest;
	findNavStrand(arg0: number): NavStrand;
	findLink(arg0: number): Link;
	findCartoFeature(arg0: number): CartoFeature;
	findFace(arg0: number): Face;
	findNavLink(arg0: number): NavLink;
	findNavStrandByNavLinkId(arg0: number): Set;
	findCrf(arg0: number): CompositeRoadFeature;
	featureComponentIterator(): Iterator;
	linkIterator(): Iterator;
	nodeIterator(): Iterator;
	faceIterator(): Iterator;
	mbr(): GeoRectangle;
	navLinkIterator(): Iterator;
	findFacesByLinkId(arg0: number): Set;
	isIncompleteNode(arg0: NavNode): boolean;
	isIncompleteNode(arg0: Node): boolean;
	findPostalArea(arg0: number): PostalArea;
	findFaceLink(arg0: number): FaceLink;
	findPoiAssoc(arg0: number): PoiAssoc;
	addAdminPlace(arg0: AdminPlace): void;
	adminPlaceSize(): number;
	adminPlaceIterator(): Iterator;
	linkSize(): number;
	faceSize(): number;
	multiMbr(): Set;
	addCountry(arg0: Country): void;
	findCountry(arg0: number): Country;
	countries(): Set;
	mapObjectIterator(): Iterator;
	faceLinkIterator(): Iterator;
	faceLinkSize(): number;
	findFaceLinksByFaceId(arg0: number): Set;
	nodeSize(): number;
	incompleteNodeSize(): number;
	findFeatureComponent(arg0: number): MapComponent;
	navLinkSize(): number;
	navStrandIterator(): Iterator;
	navStrandSize(): number;
	navNodeIterator(): Iterator;
	navNodeSize(): number;
	roadLinkIterator(): Iterator;
	roadLinkSize(): number;
	roadNameIterator(): Iterator;
	roadNameSize(): number;
	featureIterator(): Iterator;
	featureSize(): number;
	addCartoFeature(arg0: CartoFeature): void;
	cartoFeatureIterator(): Iterator;
	cartoFeatureSize(): number;
	findCartoLink(arg0: number): CartoLink;
	cartoLinkIterator(): Iterator;
	cartoLinkSize(): number;
	findCrfs(arg0: NavNode): Set;
	findCrfs(arg0: NavLink): Set;
	crfIterator(): Iterator;
	crfSize(): number;
	addPoi(arg0: PointOfInterest): void;
	poiIterator(): Iterator;
	poiSize(): number;
	poiAssocIterator(): Iterator;
	poiAssocSize(): number;
	findPoiCarto(arg0: number): PoiCarto;
	poiCartoIterator(): Iterator;
	poiCartoSize(): number;
	conditionIterator(): Iterator;
	conditionSize(): number;
	addSign(arg0: Sign): void;
	findSign(arg0: number): Sign;
	findSignByNavLink(arg0: NavLink): Set;
	signIterator(): Iterator;
	signSize(): number;
	addAlignedNode(arg0: Node): void;
	incompleteNodeIterator(): Iterator;
	alignedNodesIterator(): Iterator;
	alignedNodesSize(): number;
	addAlignedShapePoint(arg0: GeoPoint): void;
	alignedShapePointsIterator(): Iterator;
	alignedShapePointsSize(): number;
	addPostalArea(arg0: PostalArea): void;
	postalAreaIterator(): Iterator;
	postalAreaSize(): number;
	zoneIterator(): Iterator;
	zoneSize(): number;
	estimatedLinks(arg0: number): void;
	estimatedNodes(arg0: number): void;
	estimatedAdminPlaces(arg0: number): void;
	findFeature(arg0: number): MapFeature;
	extend(arg0: MapContextExtension): void;
	setSchemaVersion(arg0: string): void;
	currentDbVersion(): number;
	setCurrentDbVersion(arg0: number): void;
	validationExceptionSize(): number;
	validationExceptionIterator(): Iterator;
	validationExceptions(): Collection;
	findValidationExceptionsByMapObject(arg0: number): Set;
	findValidationException(arg0: number): ValidationException;
	validationSelector(): ValidationSelector;
	findUnvalidatedChange(arg0: number): UnvalidatedChange;
	unvalidatedChangeIterator(): Iterator;
	unvalidatedChangeSize(): number;
	findUnvalidatedChangesByMapObject(arg0: number): Set;
	externalPostalData(): ExternalPostalData;
	externalZipCityData(): ExternalZipCityData;
	trafficInfo(): TrafficInfo;
	getPhoneticDataManager(): PhoneticDataManager;
	getHistoryDataManager(): HistoryDataManager;
	getDegradationValidationContext(): DegradationValidationContext;
	partialIterator(): Iterator;
	scope(): Scope;
	isFringe(arg0: MapObject): boolean;
	fringeIterator(): Iterator;
	fringeSize(): number;
	cartoFaceIterator(): Iterator;
	incompleteAdminSize(): number;
	incompleteAdminIterator(): Iterator;
	isIncompleteAdmin(arg0: AdminPlace): boolean;
	cartoFaceSize(): number;
	findCartoFace(arg0: number): CartoFace;
	findRoadPoint(arg0: NavLink): Set;
	findRoadPoint(arg0: RoadLink): Set;
	findRoadPoint(arg0: number): RoadPoint;
	roadPointIterator(): Iterator;
	roadPointSize(): number;
	findPostalAreaAdminPlace(arg0: number): PostalAreaAdminPlace;
	postalAreaAdminPlaceIterator(): Iterator;
	postalAreaAdminPlaceSize(): number;
	findPostalAreaZone(arg0: number): PostalAreaZone;
	postalAreaZoneIterator(): Iterator;
	postalAreaZoneSize(): number;
	findZoneAdminPlace(arg0: number): ZoneAdminPlace;
	zoneAdminPlaceIterator(): Iterator;
	zoneAdminPlaceSize(): number;
	annotationIterator(): Iterator;
	annotationSize(): number;
	getAdminLinkCount(): Map;
	getPostalLinkCount(): Map;
	getEdgeCandidates(): Set;
	getPropagationDeltaEntries(): Set;
	getAdditionalData(): Properties;
	getMetricsContexts(): Set;
	getMetricSets(): Collection;
	featurePointIterator(): Iterator;
	featurePointIterator(arg0: FeaturePointType): Iterator;
	featurePointSize(): number;
	featurePointSize(arg0: FeaturePointType): number;
	mapObjectAssociationIterator(): Iterator;
	mapObjectAssociationIterator(arg0: MapObjectAssociationType): Iterator;
	mapObjectAssociationSize(): number;
	mapObjectAssociationSize(arg0: MapObjectAssociationType): number;
	findLaneStrand(arg0: number): LaneStrand;
	laneStrandIterator(): Iterator;
	laneStrandSize(): number;
	navLaneIterator(): Iterator;
	navLaneSize(): number;
	getPrepositionManager(): PrepositionManager;
	getNameManager(): NaturalGuidanceNameManager;
	getPremiumContentInfo(): PremiumContentInfo;
	viaAreaIterator(): Iterator;
	viaAreaSize(): number;
	virtualConnectionIterator(): Iterator;
	virtualConnectionSize(): number;
	mapObjectIteratorExceptMetadata(): Iterator;
	findViaAreaPoiLink(arg0: number): ViaAreaPoiLink;
	viaAreaPoiLinkIterator(): Iterator;
	viaAreaPoiLinkSize(): number;
	findViaAreaRLLink(arg0: number): ViaAreaRLLink;
	viaAreaRLLinkIterator(): Iterator;
	viaAreaRLLinkSize(): number;
	findTopologySegment(arg0: number): TopologySegment;
	topologySegmentIterator(): Iterator;
	topologySegmentSize(): number;
	findViaArea(arg0: number): ViaArea;
	findNavLane(arg0: number): NavLane;
	findCondition(arg0: number): Condition;
	findAnnotation(arg0: number): Annotation;
	addZone(arg0: Zone): void;
	isSplitLinkTask(): boolean;
	setSplitLinkTask(arg0: boolean): void;
	addAdminLinkCount(arg0: Map): void;
	addEdgeCandidates(arg0: Set): void;
	addPropagationDeltaEntries(arg0: Set): void;
	addPostalLinkCount(arg0: Map): void;
	setPremiumContentInfo(arg0: PremiumContentInfo): void;
	hasCustomContext(arg0: Class): boolean;
	metadata(): Metadata;
	findAdminPlace(arg0: number): AdminPlace;
	findMapObject(arg0: number): MapObject;
	findNode(arg0: number): Node;
	findVirtualConnection(arg0: number): VirtualConnection;
	findNavNode(arg0: number): NavNode;
	isAligned(arg0: GeoPoint): boolean;
	isAligned(arg0: Node): boolean;
	findRoadLink(arg0: number): RoadLink;
	findNamedPlace(arg0: number): NamedPlace;
	findZone(arg0: number): Zone;
}
declare var ModifiableMapContext:
{
	new (value?: any): ModifiableMapContext;
	(): any;
	(value: any): any;
	prototype: ModifiableMapContext;
}
interface RemoveComboUoW
{
	toString(): string;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveComboUoW:
{
	new (value?: any): RemoveComboUoW;
	(): any;
	(value: any): any;
	prototype: RemoveComboUoW;
}
interface NeighborhoodFilter
{
	filter(arg0: MapObject): UnitOfWork;
	description(): string;
	name(): string;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var NeighborhoodFilter:
{
	new (value?: any): NeighborhoodFilter;
	(): any;
	(value: any): any;
	prototype: NeighborhoodFilter;
}
interface BasicAnnotation
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	equivalent(arg0: Kernel): boolean;
	getAdminPlace(): AdminPlace;
	setState(arg0: Kernel): void;
	setState(arg0: MapContext, arg1: AnnotationKernel): void;
	getAttachedFiles(): Set;
	getAdminPlaceId(): number;
	getFeatureType(): number;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	getGeoPoint(): GeoPoint;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatAnnotation;
	getDisplayClass(): number;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	isMapEdge(): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	hasSameIdentity(arg0: Kernel): boolean;
	getClass(): Class;
}
declare var BasicAnnotation:
{
	new (value?: any): BasicAnnotation;
	(): any;
	(value: any): any;
	prototype: BasicAnnotation;
}
interface BasicEnvironmentalZone
{
	getConditionType(): number;
	getEnvironmentalZoneId(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicEnvironmentalZone:
{
	new (value?: any): BasicEnvironmentalZone;
	(): any;
	(value: any): any;
	prototype: BasicEnvironmentalZone;
}
interface RemoveGPToPOIAssociationUoW
{
	toString(): string;
	canExecute(arg0: ModifiableMapContext): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveGPToPOIAssociationUoW:
{
	new (value?: any): RemoveGPToPOIAssociationUoW;
	(): any;
	(value: any): any;
	prototype: RemoveGPToPOIAssociationUoW;
}
interface AddPoiCartoAssocUoW
{
	toString(): string;
	id(): number;
	setPoiCarto(arg0: PoiCartoKernel): void;
	isWellFormed(arg0: PoiCartoKernel, arg1: MapContext, arg2: Logger): boolean;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var AddPoiCartoAssocUoW:
{
	new (value?: any): AddPoiCartoAssocUoW;
	(): any;
	(value: any): any;
	prototype: AddPoiCartoAssocUoW;
}
interface RemoveNavStrandUoW
{
	toString(): string;
	id(): number;
	setNavStrand(arg0: NavStrandKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveNavStrandUoW:
{
	new (value?: any): RemoveNavStrandUoW;
	(): any;
	(value: any): any;
	prototype: RemoveNavStrandUoW;
}
interface MapFeatureVisitor
{
	visit(arg0: CompositeRoadFeature): void;
	visit(arg0: Condition): void;
	visit(arg0: NavStrand): void;
	visit(arg0: PostalArea): void;
	visit(arg0: RoadLink): void;
	visit(arg0: VirtualConnection): void;
	visit(arg0: ViaArea): void;
	visit(arg0: Annotation): void;
	visit(arg0: FeaturePoint): void;
	visit(arg0: PointOfInterest): void;
	visit(arg0: NavLink): void;
	visit(arg0: CartoFeature): void;
	visit(arg0: AdminPlace): void;
	visit(arg0: Sign): void;
	visit(arg0: NavNode): void;
	visit(arg0: Zone): void;
	visit(arg0: RoadPoint): void;
}
declare var MapFeatureVisitor:
{
	new (value?: any): MapFeatureVisitor;
	(): any;
	(value: any): any;
	prototype: MapFeatureVisitor;
}
interface RemoveSignUoW
{
	toString(): string;
	setSign(arg0: SignKernel): void;
	execute(arg0: MapContext): boolean;
	hasPermissions(arg0: UoWSecurityManager): boolean;
	testMapObjects(arg0: Predicate): boolean;
	getStatusMessage(): string;
	replicate(arg0: MapContext): UnitOfWork;
	setAllStatusMessagesEnabled(arg0: boolean): void;
	isAllStatusMessagesEnabled(): boolean;
	equals(arg0: any): boolean;
	getClass(): Class;
}
declare var RemoveSignUoW:
{
	new (value?: any): RemoveSignUoW;
	(): any;
	(value: any): any;
	prototype: RemoveSignUoW;
}
interface PoiCartoUtil
{
	getMissingIds(arg0: PoiCarto, arg1: MapContext): Set;
	isPartial(arg0: PoiCarto): boolean;
	getCartoName(arg0: CartoFeature): string;
	getPoiName(arg0: PointOfInterest): string;
	checkStructuralIntegrity(arg0: MapContext, arg1: PoiCartoKernel): void;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var PoiCartoUtil:
{
	new (value?: any): PoiCartoUtil;
	(): any;
	(value: any): any;
	prototype: PoiCartoUtil;
}
interface UnvalidatedChange
{
	unvalidatedMapObjects(): List;
	accept(arg0: UnvalidatedChangeKernelVisitor): void;
	getUser(): string;
	getUnvalidatedChangeType(): UnvalidatedChangeType;
	getRuleCode(): string;
	getUnvalidatedMapObjectParts(): List;
	getClipLevelAdminPvids(): Set;
	getTimestamp(): string;
	getProjectName(): string;
	getUnvalidatedChangeStatus(): UnvalidatedChangeStatus;
	accept(arg0: KernelVisitor): void;
	id(): number;
	equivalent(arg0: Kernel): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	makeFlat(): FlatKernel;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: MapObjectType): Set;
	filteredDependents(arg0: Class): Set;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	getMissingIds(): Set;
	isPartial(): boolean;
}
declare var UnvalidatedChange:
{
	new (value?: any): UnvalidatedChange;
	(): any;
	(value: any): any;
	prototype: UnvalidatedChange;
}
interface DistanceGraphFilter
{
	getDefaultFilter(): DistanceGraphFilter;
	shouldAddLink(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	shouldExploreLink(arg0: NavLink, arg1: NavNode, arg2: double): ExploreResult;
	shouldAddLength(arg0: NavLink, arg1: NavNode, arg2: double): boolean;
	equals(arg0: any): boolean;
	toString(): string;
	getClass(): Class;
}
declare var DistanceGraphFilter:
{
	new (value?: any): DistanceGraphFilter;
	(): any;
	(value: any): any;
	prototype: DistanceGraphFilter;
}
interface ConstructionStatusImpl
{
	isOpen(): boolean;
	getConditionType(): number;
	accept(arg0: MapFeatureVisitor): void;
	accept(arg0: KernelVisitor): void;
	equivalent(arg0: Kernel): boolean;
	setState(arg0: MapContext, arg1: ConditionKernel): void;
	addDateTimeMask(arg0: DateTimeMask): void;
	removeDateTimeMask(arg0: DateTimeMask): void;
	dateTimeMasks(): List;
	addVehicleAccessType(arg0: number): void;
	removeVehicleAccessType(arg0: number): void;
	getDateTimeModifiers(): List;
	getVehicleAccessSet(): number;
	setVehicleAccessSet(arg0: number): void;
	getNavStrandId(): number;
	getDataSource(): number;
	setDataSource(arg0: number): void;
	getConditionModifiers(): Set;
	getConditionDate(): number;
	setConditionDate(arg0: number): void;
	getMultiNavPvid(): number;
	setMultiNavPvid(arg0: number): void;
	getEndOfLink(): string;
	getAttachedFiles(): Set;
	setEndOfLink(arg0: string): void;
	getFeatureType(): number;
	navStrand(): NavStrand;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCondition;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(arg0: string): FeatureName;
	commonName(): FeatureName;
	isNameable(): boolean;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	equals(arg0: any): boolean;
	toString(): string;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var ConstructionStatusImpl:
{
	new (value?: any): ConstructionStatusImpl;
	(): any;
	(value: any): any;
	prototype: ConstructionStatusImpl;
}
interface BasicCartoFeature
{
	toString(): string;
	accept(arg0: KernelVisitor): void;
	accept(arg0: MapFeatureVisitor): void;
	equivalent(arg0: Kernel): boolean;
	hasComponent(arg0: MapComponent): boolean;
	getComponentIds(): Set;
	getAttachedFiles(): Set;
	cartoLinks(): Set;
	getRegions(): Set;
	isLongHaul(): boolean;
	cartoFaces(): Set;
	hasCompletePolygonBoundary(): boolean;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	allComponents(): Set;
	getExtendedAttributes(): Set;
	makeFlat(): FlatKernel;
	makeFlat(): FlatCartoFeature;
	namedPlace(): NamedPlace;
	getNamedPlaceId(): number;
	setDisplayClass(arg0: string): void;
	getDisplayClass(): string;
	getCartoPvid(): number;
	getValidUnnamedSource(): number;
	setCartoPvid(arg0: number): void;
	setValidUnnamedSource(arg0: number): void;
	setNamedPlace(arg0: NamedPlace): void;
	getNamedPlaceType(): string;
	hasPartialCartoLinkOrFace(): boolean;
	getCartoFace(arg0: number): CartoFace;
	getCartoLink(arg0: number): CartoLink;
	isGroupedStructure(): boolean;
	isSpecialCaseProtected(): boolean;
	poiCartos(): Set;
	getPoiCarto(arg0: number): PoiCarto;
	getTmcCodes(): Set;
	getEnteredCartoFeatureSubTypes(): Set;
	isWaterFeature(): boolean;
	names(arg0: string): Set;
	isValidUnnamed(): boolean;
	setValidUnnamed(arg0: boolean): void;
	getFeatureType(): number;
	addName(arg0: FeatureName): void;
	removeName(arg0: FeatureName): void;
	commonName(): FeatureName;
	commonName(arg0: string): FeatureName;
	isNameable(): boolean;
	getNames(arg0: string): Set;
	getNames(): Set;
	getSortedNames(arg0: Comparator, arg1: string): SortedSet;
	getSortedNames(arg0: Comparator): SortedSet;
	defaultLangCode(): string;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var BasicCartoFeature:
{
	new (value?: any): BasicCartoFeature;
	(): any;
	(value: any): any;
	prototype: BasicCartoFeature;
}
interface ValidationExceptionImpl
{
	toString(): string;
	getMessage(): string;
	accept(arg0: KernelVisitor): void;
	merge(arg0: Kernel, arg1: Kernel, arg2: Kernel): KernelMergeResult;
	setTimestamp(arg0: Calendar): void;
	equivalent(arg0: Kernel): boolean;
	getMissingIds(): Set;
	isPartial(): boolean;
	setState(arg0: MapContext, arg1: ValidationExceptionKernel): void;
	getTimestamp(): Calendar;
	rule(): Rule;
	setKernels(arg0: Array<Kernel>): void;
	setMessage(arg0: string): void;
	kernels(): Kernel;
	setRuleResult(arg0: RuleResult): void;
	getRuleResult(): RuleResult;
	getKernelIds(): number;
	getRuleId(): number;
	getStatus(): string;
	getUserId(): string;
	getLeStatus(): string;
	getLeReason(): string;
	getRemark(): string;
	getWavStatus(): string;
	getProjectName(): string;
	getExtractionFailure(): string;
	setLeStatus(arg0: string): void;
	isMapEdge(): boolean;
	mapObjectType(): MapObjectType;
	kernelType(): Class;
	hasSameIdentity(arg0: Kernel): boolean;
	setLeReason(arg0: string): void;
	setRemark(arg0: string): void;
	setWavStatus(arg0: string): void;
	setExtractionFailure(arg0: string): void;
	setProjectName(arg0: string): void;
	makeFlat(): FlatValidationException;
	makeFlat(): FlatKernel;
	equals(arg0: any): boolean;
	id(): number;
	setId(arg0: number): void;
	setCurrentChangeId(arg0: number): void;
	dependents(): Set;
	filteredDependents(arg0: Class): Set;
	filteredDependents(arg0: MapObjectType): Set;
	addDependent(arg0: MapObject): void;
	hasDependent(arg0: MapObject): boolean;
	currentChangeId(): number;
	toXml(arg0: StringBuffer): void;
	hasDependents(): boolean;
	removeDependent(arg0: MapObject): boolean;
	getClass(): Class;
}
declare var ValidationExceptionImpl:
{
	new (value?: any): ValidationExceptionImpl;
	(): any;
	(value: any): any;
	prototype: ValidationExceptionImpl;
}
interface LinkProductBoundaryOverride
{
	isUrban(): boolean;
	getAdminPlaceId(): number;
	isDetailedCity(): boolean;
}
declare var LinkProductBoundaryOverride:
{
	new (value?: any): LinkProductBoundaryOverride;
	(): any;
	(value: any): any;
	prototype: LinkProductBoundaryOverride;
}

interface CMS{
	execute(mc:MapContext,kernel:Kernel,action:String): void;
}
declare var CMS:
{
	new (value?: any): CMS;
	(): any;
	(value: any): any;
	prototype: CMS;
}
var cms=new CMS()
var mapContext=new MapContext()